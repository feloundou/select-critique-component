{"ast":null,"code":"var _jsxFileName = \"/Users/tyna/code/select_critique_package/my_component/frontend/src/MyComponent.tsx\";\nimport React from 'react';\nimport { StreamlitComponentBase, withStreamlitConnection } from 'streamlit-component-lib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst customContainer = {\n  width: '100%',\n  maxWidth: '100%',\n  minHeight: '1000px'\n};\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      prompt: 'Why is the sky blue?',\n      tree: [[['Because God said so', []], ['Because of Raleigh scattering', []]]],\n      clicked: []\n    };\n    this.addToTree = (level, index, text, newNodes) => {\n      const tree = JSON.parse(JSON.stringify(this.state.tree));\n      tree[level] = tree[level] || [];\n      tree[level][index] = [text, newNodes];\n      this.setState({\n        tree\n      });\n    };\n    this.handleClick = (level, index) => {\n      this.setState(prevState => {\n        const clicked = [...prevState.clicked];\n        clicked[level] = clicked[level] || [];\n\n        // If the button is already clicked, toggle it off and set the other button to false\n        if (clicked[level][index]) {\n          clicked[level][index] = false;\n          clicked[level][1 - index] = false;\n        } else {\n          // If the button is not clicked, set it to true and the other button to false\n          clicked[level][index] = true;\n          clicked[level][1 - index] = false;\n        }\n        return {\n          clicked\n        };\n      });\n    };\n    this.renderNode = (level, index) => {\n      var _this$state$tree$leve, _this$state$tree$leve2, _this$state$clicked$l, _this$state$clicked$l2;\n      const content = (_this$state$tree$leve = this.state.tree[level]) === null || _this$state$tree$leve === void 0 ? void 0 : (_this$state$tree$leve2 = _this$state$tree$leve[index]) === null || _this$state$tree$leve2 === void 0 ? void 0 : _this$state$tree$leve2[0];\n      const isClicked = (_this$state$clicked$l = this.state.clicked[level]) === null || _this$state$clicked$l === void 0 ? void 0 : _this$state$clicked$l[index];\n      const otherButtonClicked = (_this$state$clicked$l2 = this.state.clicked[level]) === null || _this$state$clicked$l2 === void 0 ? void 0 : _this$state$clicked$l2[1 - index];\n      if (content) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex flex-column align-items-center\",\n          style: {\n            marginRight: index === 0 ? '2rem' : undefined,\n            marginLeft: index === 1 ? '2rem' : undefined\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              this.handleClick(level, index);\n            },\n            className: `btn btn-${isClicked ? 'secondary' : 'primary'} my-1`,\n            style: {\n              marginBottom: '1.5rem',\n              whiteSpace: 'normal',\n              width: '12rem',\n              height: '100%' // Add height style to keep the buttons vertically aligned\n            },\n            children: content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              minHeight: '1.5rem'\n            },\n            children: !isClicked && otherButtonClicked && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: 'white',\n                fontStyle: 'italic'\n              },\n              children: \"This response was not clicked\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }, this);\n      }\n      return null;\n    };\n    this.renderTextInput = (level, index) => {\n      var _this$state$clicked$l3;\n      const isClicked = (_this$state$clicked$l3 = this.state.clicked[level]) === null || _this$state$clicked$l3 === void 0 ? void 0 : _this$state$clicked$l3[index];\n      const handleKeyPress = event => {\n        if (event.key === 'Enter') {\n          const commentary = event.currentTarget.value;\n          this.handleClick(level, index);\n          this.addToTree(level + 1, index * 2, commentary, []);\n        }\n      };\n      const handleButtonClick = event => {\n        const commentary = event.currentTarget.previousSibling.value;\n        const clicked = [...this.state.clicked];\n        clicked[level] = clicked[level] || [];\n        clicked[level][index] = true;\n        clicked[level][1 - index] = false;\n        const tree = JSON.parse(JSON.stringify(this.state.tree));\n        const newNodes = level === 0 ? index === 0 ? [[\"God wanted us to be happy, and he made the sky to give us light and food\"], [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]] : [[\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"], [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]] : []; // For deeper levels, you can add more new nodes here\n\n        tree[level + 1] = tree[level + 1] || [];\n        tree[level + 1][index * 2] = [newNodes[0], []];\n        tree[level + 1][index * 2 + 1] = [newNodes[1], []];\n        this.setState({\n          clicked,\n          tree\n        });\n      };\n      if (isClicked) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group mb-3\",\n          style: {\n            marginTop: '1rem',\n            width: '300px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            placeholder: \"Enter your commentary\",\n            id: `inputDefault_${level}_${index}`,\n            onKeyPress: handleKeyPress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            type: \"button\",\n            id: `button-addon2_${level}_${index}`,\n            onClick: handleButtonClick,\n            children: \"Critique\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }, this);\n      }\n      return null;\n    };\n    this.renderLevel = (level, index) => {\n      var _this$state$clicked$l4, _this$state$clicked$l5;\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            marginLeft: '-12rem',\n            marginRight: '-12rem',\n            flexWrap: 'wrap'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex flex-column align-items-center\",\n            children: [this.renderNode(level, index * 2), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0\",\n              max: \"100\",\n              defaultValue: \"50\",\n              style: {\n                width: '150px',\n                marginTop: '1rem'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 13\n            }, this), this.renderTextInput(level, index * 2), ((_this$state$clicked$l4 = this.state.clicked[level]) === null || _this$state$clicked$l4 === void 0 ? void 0 : _this$state$clicked$l4[index * 2]) && this.renderDividerAndNewNodes(level, index * 2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex flex-column align-items-center\",\n            children: [this.renderNode(level, index * 2 + 1), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0\",\n              max: \"100\",\n              defaultValue: \"50\",\n              style: {\n                width: '150px',\n                marginTop: '1rem'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 13\n            }, this), this.renderTextInput(level, index * 2 + 1), ((_this$state$clicked$l5 = this.state.clicked[level]) === null || _this$state$clicked$l5 === void 0 ? void 0 : _this$state$clicked$l5[index * 2 + 1]) && this.renderDividerAndNewNodes(level, index * 2 + 1)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 7\n      }, this);\n    };\n    this.renderDividerAndNewNodes = (level, index) => {\n      var _this$state$clicked$l6, _this$state$tree, _this$state$tree2;\n      const isClicked = (_this$state$clicked$l6 = this.state.clicked[level]) === null || _this$state$clicked$l6 === void 0 ? void 0 : _this$state$clicked$l6[index];\n      const newNodesExist = (_this$state$tree = this.state.tree[level + 1]) === null || _this$state$tree === void 0 ? void 0 : (_this$state$tree2 = _this$state$tree[index * 2]) === null || _this$state$tree2 === void 0 ? void 0 : _this$state$tree2[0];\n      if (isClicked && newNodesExist) {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'flex-end',\n              marginTop: '2rem',\n              flexWrap: 'wrap'\n            },\n            children: this.renderLevel(level + 1, index)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 9\n        }, this);\n      }\n      return null;\n    };\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        style: customContainer,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            marginTop: '2rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              backgroundColor: '#007bff',\n              border: '1px solid #007bff',\n              borderRadius: '4px',\n              color: 'white',\n              padding: '0.5rem 1rem',\n              margin: '1rem',\n              pointerEvents: 'none'\n            },\n            children: this.state.prompt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 11\n          }, this), this.renderLevel(0, 0)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 7\n      }, this);\n    };\n  }\n}\nexport default _c = withStreamlitConnection(MyComponent);\n\n// import React, { ReactNode } from 'react';\n// import {\n//     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// interface State {\n//   prompt: string;\n//   tree: (string | string[][])[][];\n//   clicked: boolean[][];\n// }\n\n// const customContainer = {\n//   width: '100%',\n//   maxWidth: '100%',\n//   minHeight: '1000px',\n// };\n\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state: State = {\n//     prompt: 'Why is the sky blue?',\n//     tree: [\n//       [\n//         ['Because God said so', []],\n//         ['Because of Raleigh scattering', []],\n//       ],\n//     ],\n//     clicked: [],\n//   };\n\n//   private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n//     const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n//     tree[level] = tree[level] || [];\n//     tree[level][index] = [text, newNodes];\n//     this.setState({ tree });\n//   };\n\n//   private handleClick = (level: number, index: number) => {\n//     const clicked = [...this.state.clicked] as boolean[][];\n//     clicked[level] = clicked[level] || [];\n//     clicked[level][index] = true;\n//     clicked[level][1 - index] = false;\n//     this.setState({ clicked });\n//   };\n\n//   private renderNode = (level: number, index: number) => {\n//     const content = this.state.tree[level]?.[index]?.[0];\n//     const isClicked = this.state.clicked[level]?.[index];\n//     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n//     if (content) {\n//       return (\n//         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n//           <button\n//             onClick={() => {\n//               this.handleClick(level, index);\n//             }}\n//             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n//             style={{ marginBottom: '1.5rem', whiteSpace: 'normal', width: '12rem' }} // Add white-space and width styles\n//           >\n//             {content}\n//           </button>\n//           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n//             {!isClicked && otherButtonClicked && (\n//               <span style={{ color: 'white', fontStyle: 'italic' }}>\n//                 This response was not selected\n//               </span>\n//             )}\n//           </div>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   private renderTextInput = (level: number, index: number) => {\n//     const isClicked = this.state.clicked[level]?.[index];\n\n//     const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n//       if (event.key === 'Enter') {\n//         const commentary = event.currentTarget.value;\n//         this.handleClick(level, index);\n//         this.addToTree(level + 1, index * 2, commentary, []);\n//       }\n//     };\n\n//     const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n//       const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n\n//       const clicked = [...this.state.clicked] as boolean[][];\n//       clicked[level] = clicked[level] || [];\n//       clicked[level][index] = true;\n//       clicked[level][1 - index] = false;\n\n//       const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n//       const newNodes = level === 0\n//         ? index === 0\n//           ? [\n//             [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n//             [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n//           ]\n//           : [\n//             [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n//             [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n//           ]\n//         : []; // For deeper levels, you can add more new nodes here\n\n//       tree[level + 1] = tree[level + 1] || [];\n//       tree[level + 1][index * 2] = [newNodes[0], []];\n//       tree[level + 1][index * 2 + 1] = [newNodes[1], []];\n\n//       this.setState({ clicked, tree });\n//     };\n\n//     if (isClicked) {\n//       return (\n//         <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             placeholder=\"Enter your commentary\"\n//             id={`inputDefault_${level}_${index}`}\n//             onKeyPress={handleKeyPress}\n//           />\n//           <button\n//             className=\"btn btn-primary\"\n//             type=\"button\"\n//             id={`button-addon2_${level}_${index}`}\n//             onClick={handleButtonClick}\n//           >\n//             Critique\n//           </button>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   public render = (): ReactNode => {\n//     const renderDividerAndNewNodes = (level: number, index: number) => {\n//       const isClicked = this.state.clicked[level]?.[index];\n//       const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n//       if (isClicked && newNodesExist) {\n//         return (\n//           <React.Fragment>\n//             <hr />\n//             <div\n//               style={{\n//                 display: 'flex',\n//                 justifyContent: 'center',\n//                 alignItems: 'flex-end',\n//                 marginTop: '2rem',\n//                 flexWrap: 'wrap', // Add flex-wrap style\n//               }}\n//             >\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(level + 1, index * 2)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(level + 1, index * 2)}\n//               </div>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(level + 1, index * 2 + 1)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(level + 1, index * 2 + 1)}\n//               </div>\n//             </div>\n//           </React.Fragment>\n//         );\n//       }\n//       return null;\n//     };\n\n//     return (\n//       <div className=\"container\" style={customContainer}>\n//         <div\n//           style={{\n//             display: 'flex',\n//             flexDirection: 'column',\n//             alignItems: 'center',\n//             marginTop: '2rem',\n//           }}\n//         >\n//           <button\n//             style={{\n//               backgroundColor: '#007bff',\n//               border: '1px solid #007bff',\n//               borderRadius: '4px',\n//               color: 'white',\n//               padding: '0.5rem 1rem',\n//               margin: '1rem',\n//               pointerEvents: 'none',\n//             }}\n//           >\n//             {this.state.prompt}\n//           </button>\n//           <div\n//             style={{\n//               display: 'flex',\n//               justifyContent: 'center',\n//               alignItems: 'flex-end',\n//               marginTop: '2rem',\n//               flexWrap: 'wrap', // Add flex-wrap style\n//             }}\n//           >\n//             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem', flexWrap: 'wrap' }}>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(0, 0)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(0, 0)}\n//                 {renderDividerAndNewNodes(0, 0)}\n//               </div>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(0, 1)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(0, 1)}\n//                 {renderDividerAndNewNodes(0, 1)}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   };\n// }\n\n// export default withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","StreamlitComponentBase","withStreamlitConnection","jsxDEV","_jsxDEV","customContainer","width","maxWidth","minHeight","MyComponent","constructor","arguments","state","prompt","tree","clicked","addToTree","level","index","text","newNodes","JSON","parse","stringify","setState","handleClick","prevState","renderNode","_this$state$tree$leve","_this$state$tree$leve2","_this$state$clicked$l","_this$state$clicked$l2","content","isClicked","otherButtonClicked","className","style","marginRight","undefined","marginLeft","children","onClick","marginBottom","whiteSpace","height","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","alignItems","color","fontStyle","renderTextInput","_this$state$clicked$l3","handleKeyPress","event","key","commentary","currentTarget","value","handleButtonClick","previousSibling","marginTop","type","placeholder","id","onKeyPress","renderLevel","_this$state$clicked$l4","_this$state$clicked$l5","Fragment","flexWrap","min","max","defaultValue","renderDividerAndNewNodes","_this$state$clicked$l6","_this$state$tree","_this$state$tree2","newNodesExist","render","flexDirection","backgroundColor","border","borderRadius","padding","margin","pointerEvents","_c","$RefreshReg$"],"sources":["/Users/tyna/code/select_critique_package/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\nimport {\n    Streamlit, StreamlitComponentBase, withStreamlitConnection\n} from 'streamlit-component-lib';\n\ninterface State {\n  prompt: string;\n  tree: (string | string[][])[][];\n  clicked: boolean[][];\n}\n\nconst customContainer = {\n  width: '100%',\n  maxWidth: '100%',\n  minHeight: '1000px',\n};\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state: State = {\n    prompt: 'Why is the sky blue?',\n    tree: [\n      [\n        ['Because God said so', []],\n        ['Because of Raleigh scattering', []],\n      ],\n    ],\n    clicked: [],\n  };\n\n  private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n    const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n    tree[level] = tree[level] || [];\n    tree[level][index] = [text, newNodes];\n    this.setState({ tree });\n  };\n\n  private handleClick = (level: number, index: number) => {\n    this.setState((prevState) => {\n      const clicked = [...prevState.clicked] as boolean[][];\n      clicked[level] = clicked[level] || [];\n\n      // If the button is already clicked, toggle it off and set the other button to false\n      if (clicked[level][index]) {\n        clicked[level][index] = false;\n        clicked[level][1 - index] = false;\n      } else {\n        // If the button is not clicked, set it to true and the other button to false\n        clicked[level][index] = true;\n        clicked[level][1 - index] = false;\n      }\n\n      return { clicked };\n    });\n  };\n\n\n  private renderNode = (level: number, index: number) => {\n    const content = this.state.tree[level]?.[index]?.[0];\n    const isClicked = this.state.clicked[level]?.[index];\n    const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n    if (content) {\n      return (\n        <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n          <button\n            onClick={() => {\n              this.handleClick(level, index);\n            }}\n            className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n            style={{\n              marginBottom: '1.5rem',\n              whiteSpace: 'normal',\n              width: '12rem',\n              height: '100%', // Add height style to keep the buttons vertically aligned\n            }}\n          >\n            {content}\n          </button>\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n            {!isClicked && otherButtonClicked && (\n              <span style={{ color: 'white', fontStyle: 'italic' }}>\n                This response was not clicked\n              </span>\n            )}\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  private renderTextInput = (level: number, index: number) => {\n    const isClicked = this.state.clicked[level]?.[index];\n\n    const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Enter') {\n        const commentary = event.currentTarget.value;\n        this.handleClick(level, index);\n        this.addToTree(level + 1, index * 2, commentary, []);\n      }\n    };\n\n    const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n      const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n\n      const clicked = [...this.state.clicked] as boolean[][];\n      clicked[level] = clicked[level] || [];\n      clicked[level][index] = true;\n      clicked[level][1 - index] = false;\n\n      const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n      const newNodes = level === 0\n        ? index === 0\n          ? [\n            [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n            [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n          ]\n          : [\n            [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n            [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n          ]\n        : []; // For deeper levels, you can add more new nodes here\n\n      tree[level + 1] = tree[level + 1] || [];\n      tree[level + 1][index * 2] = [newNodes[0], []];\n      tree[level + 1][index * 2 + 1] = [newNodes[1], []];\n\n      this.setState({ clicked, tree });\n    };\n\n    if (isClicked) {\n      return (\n        <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Enter your commentary\"\n            id={`inputDefault_${level}_${index}`}\n            onKeyPress={handleKeyPress}\n          />\n          <button\n            className=\"btn btn-primary\"\n            type=\"button\"\n            id={`button-addon2_${level}_${index}`}\n            onClick={handleButtonClick}\n          >\n            Critique\n          </button>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  private renderLevel = (level: number, index: number) => {\n    return (\n      <React.Fragment>\n        <div\n          style={{\n            display: 'flex',\n            marginLeft: '-12rem',\n            marginRight: '-12rem',\n            flexWrap: 'wrap',\n          }}\n        >\n          <div className=\"d-flex flex-column align-items-center\">\n            {this.renderNode(level, index * 2)}\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              defaultValue=\"50\"\n              style={{ width: '150px', marginTop: '1rem' }}\n            />\n            {this.renderTextInput(level, index * 2)}\n            {this.state.clicked[level]?.[index * 2] &&\n              this.renderDividerAndNewNodes(level, index * 2)}\n          </div>\n          <div className=\"d-flex flex-column align-items-center\">\n            {this.renderNode(level, index * 2 + 1)}\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              defaultValue=\"50\"\n              style={{ width: '150px', marginTop: '1rem' }}\n            />\n            {this.renderTextInput(level, index * 2 + 1)}\n            {this.state.clicked[level]?.[index * 2 + 1] &&\n              this.renderDividerAndNewNodes(level, index * 2 + 1)}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  private renderDividerAndNewNodes = (level: number, index: number) => {\n    const isClicked = this.state.clicked[level]?.[index];\n    const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n    if (isClicked && newNodesExist) {\n      return (\n        <React.Fragment>\n          <hr />\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'flex-end',\n              marginTop: '2rem',\n              flexWrap: 'wrap',\n            }}\n          >\n            {this.renderLevel(level + 1, index)}\n          </div>\n        </React.Fragment>\n      );\n    }\n    return null;\n  };\n\n\n  public render = (): ReactNode => {\n    return (\n      <div className=\"container\" style={customContainer}>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            marginTop: '2rem',\n          }}\n        >\n          <button\n            style={{\n              backgroundColor: '#007bff',\n              border: '1px solid #007bff',\n              borderRadius: '4px',\n              color: 'white',\n              padding: '0.5rem 1rem',\n              margin: '1rem',\n              pointerEvents: 'none',\n            }}\n          >\n            {this.state.prompt}\n          </button>\n          {this.renderLevel(0, 0)}\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default withStreamlitConnection(MyComponent);\n\n\n// import React, { ReactNode } from 'react';\n// import {\n//     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// interface State {\n//   prompt: string;\n//   tree: (string | string[][])[][];\n//   clicked: boolean[][];\n// }\n\n// const customContainer = {\n//   width: '100%',\n//   maxWidth: '100%',\n//   minHeight: '1000px',\n// };\n\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state: State = {\n//     prompt: 'Why is the sky blue?',\n//     tree: [\n//       [\n//         ['Because God said so', []],\n//         ['Because of Raleigh scattering', []],\n//       ],\n//     ],\n//     clicked: [],\n//   };\n\n//   private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n//     const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n//     tree[level] = tree[level] || [];\n//     tree[level][index] = [text, newNodes];\n//     this.setState({ tree });\n//   };\n\n//   private handleClick = (level: number, index: number) => {\n//     const clicked = [...this.state.clicked] as boolean[][];\n//     clicked[level] = clicked[level] || [];\n//     clicked[level][index] = true;\n//     clicked[level][1 - index] = false;\n//     this.setState({ clicked });\n//   };\n\n//   private renderNode = (level: number, index: number) => {\n//     const content = this.state.tree[level]?.[index]?.[0];\n//     const isClicked = this.state.clicked[level]?.[index];\n//     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n//     if (content) {\n//       return (\n//         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n//           <button\n//             onClick={() => {\n//               this.handleClick(level, index);\n//             }}\n//             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n//             style={{ marginBottom: '1.5rem', whiteSpace: 'normal', width: '12rem' }} // Add white-space and width styles\n//           >\n//             {content}\n//           </button>\n//           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n//             {!isClicked && otherButtonClicked && (\n//               <span style={{ color: 'white', fontStyle: 'italic' }}>\n//                 This response was not selected\n//               </span>\n//             )}\n//           </div>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   private renderTextInput = (level: number, index: number) => {\n//     const isClicked = this.state.clicked[level]?.[index];\n\n//     const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n//       if (event.key === 'Enter') {\n//         const commentary = event.currentTarget.value;\n//         this.handleClick(level, index);\n//         this.addToTree(level + 1, index * 2, commentary, []);\n//       }\n//     };\n\n//     const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n//       const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n\n//       const clicked = [...this.state.clicked] as boolean[][];\n//       clicked[level] = clicked[level] || [];\n//       clicked[level][index] = true;\n//       clicked[level][1 - index] = false;\n\n//       const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n//       const newNodes = level === 0\n//         ? index === 0\n//           ? [\n//             [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n//             [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n//           ]\n//           : [\n//             [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n//             [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n//           ]\n//         : []; // For deeper levels, you can add more new nodes here\n\n//       tree[level + 1] = tree[level + 1] || [];\n//       tree[level + 1][index * 2] = [newNodes[0], []];\n//       tree[level + 1][index * 2 + 1] = [newNodes[1], []];\n\n//       this.setState({ clicked, tree });\n//     };\n\n//     if (isClicked) {\n//       return (\n//         <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             placeholder=\"Enter your commentary\"\n//             id={`inputDefault_${level}_${index}`}\n//             onKeyPress={handleKeyPress}\n//           />\n//           <button\n//             className=\"btn btn-primary\"\n//             type=\"button\"\n//             id={`button-addon2_${level}_${index}`}\n//             onClick={handleButtonClick}\n//           >\n//             Critique\n//           </button>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   public render = (): ReactNode => {\n//     const renderDividerAndNewNodes = (level: number, index: number) => {\n//       const isClicked = this.state.clicked[level]?.[index];\n//       const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n//       if (isClicked && newNodesExist) {\n//         return (\n//           <React.Fragment>\n//             <hr />\n//             <div\n//               style={{\n//                 display: 'flex',\n//                 justifyContent: 'center',\n//                 alignItems: 'flex-end',\n//                 marginTop: '2rem',\n//                 flexWrap: 'wrap', // Add flex-wrap style\n//               }}\n//             >\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(level + 1, index * 2)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(level + 1, index * 2)}\n//               </div>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(level + 1, index * 2 + 1)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(level + 1, index * 2 + 1)}\n//               </div>\n//             </div>\n//           </React.Fragment>\n//         );\n//       }\n//       return null;\n//     };\n\n//     return (\n//       <div className=\"container\" style={customContainer}>\n//         <div\n//           style={{\n//             display: 'flex',\n//             flexDirection: 'column',\n//             alignItems: 'center',\n//             marginTop: '2rem',\n//           }}\n//         >\n//           <button\n//             style={{\n//               backgroundColor: '#007bff',\n//               border: '1px solid #007bff',\n//               borderRadius: '4px',\n//               color: 'white',\n//               padding: '0.5rem 1rem',\n//               margin: '1rem',\n//               pointerEvents: 'none',\n//             }}\n//           >\n//             {this.state.prompt}\n//           </button>\n//           <div\n//             style={{\n//               display: 'flex',\n//               justifyContent: 'center',\n//               alignItems: 'flex-end',\n//               marginTop: '2rem',\n//               flexWrap: 'wrap', // Add flex-wrap style\n//             }}\n//           >\n//             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem', flexWrap: 'wrap' }}>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(0, 0)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(0, 0)}\n//                 {renderDividerAndNewNodes(0, 0)}\n//               </div>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(0, 1)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(0, 1)}\n//                 {renderDividerAndNewNodes(0, 1)}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   };\n// }\n\n// export default withStreamlitConnection(MyComponent);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}