{"ast":null,"code":"var _jsxFileName = \"/Users/tyna/code/select_critique_package/my_component/frontend/src/MyComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { StreamlitComponentBase, withStreamlitConnection } from 'streamlit-component-lib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst customContainer = {\n  width: '100%',\n  maxWidth: '100%',\n  minHeight: '1000px',\n  backgroundColor: 'transparent'\n};\nconst ChoicePair = _ref => {\n  _s();\n  let {\n    level,\n    index,\n    content,\n    updateTree\n  } = _ref;\n  const [clicked, setClicked] = useState([false, false]);\n  const [textInput, setTextInput] = useState('');\n  const handleClick = btnIndex => {\n    const newClickedState = clicked.map((c, i) => i === btnIndex);\n    setClicked(newClickedState);\n    setTextInput('');\n  };\n  const handleTextInputChange = e => {\n    setTextInput(e.target.value);\n  };\n  const handleButtonClick = () => {\n    updateTree(level, index, textInput);\n    setTextInput('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"choice-pair\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: content.map((btnContent, btnIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-column align-items-center\",\n        style: {\n          marginRight: btnIndex === 0 ? '2rem' : undefined,\n          marginLeft: btnIndex === 1 ? '2rem' : undefined\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleClick(btnIndex),\n          className: `btn btn-${clicked[btnIndex] ? 'secondary' : 'primary'} my-1`,\n          style: {\n            marginBottom: '1.5rem',\n            whiteSpace: 'normal',\n            width: '12rem'\n          },\n          children: btnContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            minHeight: '1.5rem'\n          },\n          children: !clicked[btnIndex] && clicked[1 - btnIndex] && /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: 'white',\n              fontStyle: 'italic'\n            },\n            children: \"This response was not selected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), clicked[btnIndex] && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: \"100\",\n          defaultValue: \"50\",\n          style: {\n            width: '150px',\n            marginBottom: '1rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this), clicked[btnIndex] && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group mb-3\",\n          style: {\n            marginTop: '1rem',\n            width: '300px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            placeholder: \"Enter your commentary\",\n            value: textInput,\n            onChange: handleTextInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            type: \"button\",\n            onClick: handleButtonClick,\n            children: \"Critique\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this)]\n      }, btnIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(ChoicePair, \"36EQJWcKiwEl58NR7KQPxQJF5ak=\");\n_c = ChoicePair;\nclass MyComponent extends StreamlitComponentBase {\n  constructor(props) {\n    super(props);\n    this.updateTree = (level, index, textInput) => {\n      const tree = JSON.parse(JSON.stringify(this.state.tree));\n      const newNode = {\n        level: level + 1,\n        index: tree.length,\n        content: [`Level ${level + 1}, Index ${index * 2} response: ${textInput}`, `Level ${level + 1}, Index ${index * 2 + 1} response: ${textInput}`],\n        children: []\n      };\n      tree.push(newNode);\n      this.setState({\n        tree\n      });\n    };\n    this.state = {\n      tree: [{\n        level: 0,\n        index: 0,\n        content: ['Because God said so', 'Because of Raleigh scattering'],\n        children: []\n      }]\n    };\n  }\n  render() {\n    const {\n      tree\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      style: customContainer,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          marginTop: '2rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: '#007bff',\n            border: '1px solid #007bff',\n            borderRadius: '4px',\n            color: 'white',\n            padding: '0.5rem 1rem',\n            margin: '1rem',\n            pointerEvents: 'none'\n          },\n          children: \"Why is the sky blue?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: tree.map((node, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(ChoicePair, {\n              level: node.level,\n              index: node.index,\n              content: node.content,\n              updateTree: this.updateTree\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 17\n            }, this), index < tree.length - 1 && /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 45\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default _c2 = withStreamlitConnection(MyComponent);\n\n// import React, { ReactNode } from 'react';\n// import {\n//     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// interface State {\n//   prompt: string;\n//   tree: (string | string[][])[][];\n//   clicked: boolean[][];\n// }\n\n// const customContainer = {\n//   width: '100%',\n//   maxWidth: '100%',\n//   minHeight: '1000px',\n// };\n\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state: State = {\n//     prompt: 'Why is the sky blue?',\n//     tree: [\n//       [\n//         ['Because God said so', []],\n//         ['Because of Raleigh scattering', []],\n//       ],\n//     ],\n//     clicked: [],\n//   };\n\n//   private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n//     const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n//     tree[level] = tree[level] || [];\n//     tree[level][index] = [text, newNodes];\n//     this.setState({ tree });\n//   };\n\n//   private handleClick = (level: number, index: number) => {\n//     const clicked = JSON.parse(JSON.stringify(this.state.clicked)) as boolean[][];\n//     clicked[level] = clicked[level] || [];\n\n//     if (clicked[level][index]) {\n//       clicked[level][index] = false;\n//     } else {\n//       clicked[level][index] = true;\n//       clicked[level][1 - index] = false;\n//     }\n\n//     this.setState({ clicked }, () => {\n//       // If a button is unclicked, clear the input field associated with that button\n//       const unclickedInput = document.getElementById(\n//         `inputDefault_${level}_${index}`\n//       ) as HTMLInputElement;\n//       if (unclickedInput) {\n//         unclickedInput.value = '';\n//       }\n//     });\n//   };\n\n//   private renderNode = (level: number, index: number) => {\n//     const content = this.state.tree[level]?.[index]?.[0];\n//     const isClicked = this.state.clicked[level]?.[index];\n//     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n//     if (content) {\n//       return (\n//         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n//           <button\n//             onClick={() => {\n//               this.handleClick(level, index);\n//             }}\n//             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n//             style={{ marginBottom: '1.5rem', whiteSpace: 'normal', width: '12rem' }}\n//           >\n//             {content}\n//           </button>\n//           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n//             {!isClicked && otherButtonClicked && (\n//               <span style={{ color: 'white', fontStyle: 'italic' }}>\n//                 This response was not selected\n//               </span>\n//             )}\n//           </div>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   private generateNewNodes = (level: number, index: number) => {\n//     if (level === 0) {\n//       if (index === 0) {\n//         return [\n//           [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n//           [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n//         ];\n//       } else {\n//         return [\n//           [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n//           [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n//         ];\n//       }\n//     } else {\n//       return [\n//         [`Level ${level + 1}, Index ${index * 2} response`],\n//         [`Level ${level + 1}, Index ${index * 2 + 1} response`]\n//       ];\n//     }\n//   };\n\n//   private renderTextInput = (level: number, index: number) => {\n//     const isClicked = this.state.clicked[level]?.[index];\n\n//     const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n//       if (event.key === 'Enter') {\n//         const commentary = event.currentTarget.value;\n//         this.handleClick(level, index);\n\n//         // Generate new nodes without modifying the current node text\n//         const newNodes = this.generateNewNodes(level, index);\n\n//         this.addToTree(level + 1, index * 2, newNodes[0][0], []);\n//         this.addToTree(level + 1, index * 2 + 1, newNodes[1][0], []);\n//       }\n//     };\n\n//     const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n//       const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n\n//       const clicked = [...this.state.clicked] as boolean[][];\n//       clicked[level] = clicked[level] || [];\n//       clicked[level][index] = true;\n//       clicked[level][1 - index] = false;\n\n//       const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n\n//       let newNodes: string[][] = [];\n\n//       if (level === 0) {\n//         if (index === 0) {\n//           newNodes = [\n//             [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n//             [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n//           ];\n//         } else {\n//           newNodes = [\n//             [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n//             [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n//           ];\n//         }\n//       } else {\n//         newNodes = [\n//           [`Level ${level + 1}, Index ${index * 2} response`],\n//           [`Level ${level + 1}, Index ${index * 2 + 1} response`]\n//         ];\n//       }\n\n//       tree[level + 1] = tree[level + 1] || [];\n//       tree[level + 1][index * 2] = [newNodes[0][0], []];\n//       tree[level + 1][index * 2 + 1] = [newNodes[1][0], []];\n\n//       this.setState({ clicked, tree });\n//     };\n\n//     if (isClicked) {\n//       return (\n//         <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             placeholder=\"Enter your commentary\"\n//             id={`inputDefault_${level}_${index}`}\n//             onKeyPress={handleKeyPress}\n//           />\n//           <button\n//             className=\"btn btn-primary\"\n//             type=\"button\"\n//             id={`button-addon2_${level}_${index}`}\n//             onClick={handleButtonClick} // Add this line back\n//           >\n//             Critique\n//           </button>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   public render = (): ReactNode => {\n//     const renderDividerAndNewNodes = (level: number, index: number) => {\n//       const isClicked = this.state.clicked[level]?.[index];\n//       const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n//       if (isClicked && newNodesExist) {\n//         return (\n//           <React.Fragment>\n//             <hr />\n//             <div\n//               style={{\n//                 display: 'flex',\n//                 justifyContent: 'center',\n//                 alignItems: 'flex-end',\n//                 marginTop: '2rem',\n//                 flexWrap: 'wrap',\n//               }}\n//             >\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(level + 1, index * 2)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(level + 1, index * 2)}\n//               </div>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(level + 1, index * 2 + 1)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(level + 1, index * 2 + 1)}\n//               </div>\n//             </div>\n//           </React.Fragment>\n//         );\n//       }\n//       return null;\n//     };\n\n//     return (\n//       <div className=\"container\" style={customContainer}>\n//         <div\n//           style={{\n//             display: 'flex',\n//             flexDirection: 'column',\n//             alignItems: 'center',\n//             marginTop: '2rem',\n//           }}\n//         >\n//           <button\n//             style={{\n//               backgroundColor: '#007bff',\n//               border: '1px solid #007bff',\n//               borderRadius: '4px',\n//               color: 'white',\n//               padding: '0.5rem 1rem',\n//               margin: '1rem',\n//               pointerEvents: 'none',\n//             }}\n//           >\n//             {this.state.prompt}\n//           </button>\n//           <div\n//             style={{\n//               display: 'flex',\n//               justifyContent: 'center',\n//               alignItems: 'flex-end',\n//               marginTop: '2rem',\n//               flexWrap: 'wrap',\n//             }}\n//           >\n//             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem', flexWrap: 'wrap' }}>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(0, 0)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(0, 0)}\n//                 {renderDividerAndNewNodes(0, 0)}\n//               </div>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(0, 1)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(0, 1)}\n//                 {renderDividerAndNewNodes(0, 1)}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   };\n// }\n\n// export default withStreamlitConnection(MyComponent);\n\n// // // import React, { ReactNode } from 'react';\n// // // import {\n// // //     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// // // } from 'streamlit-component-lib';\n\n// // // interface State {\n// // //   prompt: string;\n// // //   tree: (string | string[][])[][];\n// // //   clicked: boolean[][];\n// // // }\n\n// // // const customContainer = {\n// // //   width: '100%',\n// // //   maxWidth: '100%',\n// // //   minHeight: '1000px',\n// // // };\n\n// // // class MyComponent extends StreamlitComponentBase<State> {\n// // //   public state: State = {\n// // //     prompt: 'Why is the sky blue?',\n// // //     tree: [\n// // //       [\n// // //         ['Because God said so', []],\n// // //         ['Because of Raleigh scattering', []],\n// // //       ],\n// // //     ],\n// // //     clicked: [],\n// // //   };\n\n// // //   private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n// // //     const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// // //     tree[level] = tree[level] || [];\n// // //     tree[level][index] = [text, newNodes];\n// // //     this.setState({ tree });\n// // //   };\n\n// // //   private handleClick = (level: number, index: number) => {\n// // //     const clicked = [...this.state.clicked] as boolean[][];\n// // //     clicked[level] = clicked[level] || [];\n// // //     clicked[level][index] = true;\n// // //     clicked[level][1 - index] = false;\n// // //     this.setState({ clicked });\n// // //   };\n\n// // //   private renderNode = (level: number, index: number) => {\n// // //     const content = this.state.tree[level]?.[index]?.[0];\n// // //     const isClicked = this.state.clicked[level]?.[index];\n// // //     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n// // //     if (content) {\n// // //       return (\n// // //         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n// // //           <button\n// // //             onClick={() => {\n// // //               this.handleClick(level, index);\n// // //             }}\n// // //             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n// // //             style={{ marginBottom: '1.5rem', whiteSpace: 'normal', width: '12rem' }} // Add white-space and width styles\n// // //           >\n// // //             {content}\n// // //           </button>\n// // //           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n// // //             {!isClicked && otherButtonClicked && (\n// // //               <span style={{ color: 'white', fontStyle: 'italic' }}>\n// // //                 This response was not selected\n// // //               </span>\n// // //             )}\n// // //           </div>\n// // //         </div>\n// // //       );\n// // //     }\n// // //     return null;\n// // //   };\n\n// // //   private renderTextInput = (level: number, index: number) => {\n// // //     const isClicked = this.state.clicked[level]?.[index];\n\n// // //     const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n// // //       if (event.key === 'Enter') {\n// // //         const commentary = event.currentTarget.value;\n// // //         this.handleClick(level, index);\n// // //         this.addToTree(level + 1, index * 2, commentary, []);\n// // //       }\n// // //     };\n\n// // //     const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n// // //       const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n\n// // //       const clicked = [...this.state.clicked] as boolean[][];\n// // //       clicked[level] = clicked[level] || [];\n// // //       clicked[level][index] = true;\n// // //       clicked[level][1 - index] = false;\n\n// // //       const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// // //       const newNodes = level === 0\n// // //         ? index === 0\n// // //           ? [\n// // //             [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n// // //             [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n// // //           ]\n// // //           : [\n// // //             [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n// // //             [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n// // //           ]\n// // //         : []; // For deeper levels, you can add more new nodes here\n\n// // //       tree[level + 1] = tree[level + 1] || [];\n// // //       tree[level + 1][index * 2] = [newNodes[0], []];\n// // //       tree[level + 1][index * 2 + 1] = [newNodes[1], []];\n\n// // //       this.setState({ clicked, tree });\n// // //     };\n\n// // //     if (isClicked) {\n// // //       return (\n// // //         <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n// // //           <input\n// // //             type=\"text\"\n// // //             className=\"form-control\"\n// // //             placeholder=\"Enter your commentary\"\n// // //             id={`inputDefault_${level}_${index}`}\n// // //             onKeyPress={handleKeyPress}\n// // //           />\n// // //           <button\n// // //             className=\"btn btn-primary\"\n// // //             type=\"button\"\n// // //             id={`button-addon2_${level}_${index}`}\n// // //             onClick={handleButtonClick}\n// // //           >\n// // //             Critique\n// // //           </button>\n// // //         </div>\n// // //       );\n// // //     }\n// // //     return null;\n// // //   };\n\n// // //   public render = (): ReactNode => {\n// // //     const renderDividerAndNewNodes = (level: number, index: number) => {\n// // //       const isClicked = this.state.clicked[level]?.[index];\n// // //       const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n// // //       if (isClicked && newNodesExist) {\n// // //         return (\n// // //           <React.Fragment>\n// // //             <hr />\n// // //             <div\n// // //               style={{\n// // //                 display: 'flex',\n// // //                 justifyContent: 'center',\n// // //                 alignItems: 'flex-end',\n// // //                 marginTop: '2rem',\n// // //                 flexWrap: 'wrap', // Add flex-wrap style\n// // //               }}\n// // //             >\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(level + 1, index * 2)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(level + 1, index * 2)}\n// // //               </div>\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(level + 1, index * 2 + 1)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(level + 1, index * 2 + 1)}\n// // //               </div>\n// // //             </div>\n// // //           </React.Fragment>\n// // //         );\n// // //       }\n// // //       return null;\n// // //     };\n\n// // //     return (\n// // //       <div className=\"container\" style={customContainer}>\n// // //         <div\n// // //           style={{\n// // //             display: 'flex',\n// // //             flexDirection: 'column',\n// // //             alignItems: 'center',\n// // //             marginTop: '2rem',\n// // //           }}\n// // //         >\n// // //           <button\n// // //             style={{\n// // //               backgroundColor: '#007bff',\n// // //               border: '1px solid #007bff',\n// // //               borderRadius: '4px',\n// // //               color: 'white',\n// // //               padding: '0.5rem 1rem',\n// // //               margin: '1rem',\n// // //               pointerEvents: 'none',\n// // //             }}\n// // //           >\n// // //             {this.state.prompt}\n// // //           </button>\n// // //           <div\n// // //             style={{\n// // //               display: 'flex',\n// // //               justifyContent: 'center',\n// // //               alignItems: 'flex-end',\n// // //               marginTop: '2rem',\n// // //               flexWrap: 'wrap', // Add flex-wrap style\n// // //             }}\n// // //           >\n// // //             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem', flexWrap: 'wrap' }}>\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(0, 0)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(0, 0)}\n// // //                 {renderDividerAndNewNodes(0, 0)}\n// // //               </div>\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(0, 1)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(0, 1)}\n// // //                 {renderDividerAndNewNodes(0, 1)}\n// // //               </div>\n// // //             </div>\n// // //           </div>\n// // //         </div>\n// // //       </div>\n// // //     );\n// // //   };\n// // // }\n\n// // // export default withStreamlitConnection(MyComponent);\nvar _c, _c2;\n$RefreshReg$(_c, \"ChoicePair\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","StreamlitComponentBase","withStreamlitConnection","jsxDEV","_jsxDEV","customContainer","width","maxWidth","minHeight","backgroundColor","ChoicePair","_ref","_s","level","index","content","updateTree","clicked","setClicked","textInput","setTextInput","handleClick","btnIndex","newClickedState","map","c","i","handleTextInputChange","e","target","value","handleButtonClick","className","children","style","display","justifyContent","btnContent","marginRight","undefined","marginLeft","onClick","marginBottom","whiteSpace","fileName","_jsxFileName","lineNumber","columnNumber","alignItems","color","fontStyle","type","min","max","defaultValue","marginTop","placeholder","onChange","_c","MyComponent","constructor","props","tree","JSON","parse","stringify","state","newNode","length","push","setState","render","flexDirection","border","borderRadius","padding","margin","pointerEvents","node","_c2","$RefreshReg$"],"sources":["/Users/tyna/code/select_critique_package/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n    Streamlit, StreamlitComponentBase, withStreamlitConnection\n} from 'streamlit-component-lib';\n\nconst customContainer = {\n  width: '100%',\n  maxWidth: '100%',\n  minHeight: '1000px',\n  backgroundColor: 'transparent',\n};\n\nconst ChoicePair = ({ level, index, content, updateTree }) => {\n  const [clicked, setClicked] = useState([false, false]);\n  const [textInput, setTextInput] = useState('');\n\n  const handleClick = (btnIndex) => {\n    const newClickedState = clicked.map((c, i) => i === btnIndex);\n    setClicked(newClickedState);\n    setTextInput('');\n  };\n\n  const handleTextInputChange = (e) => {\n    setTextInput(e.target.value);\n  };\n\n  const handleButtonClick = () => {\n    updateTree(level, index, textInput);\n    setTextInput('');\n  };\n\n  return (\n    <div className=\"choice-pair\">\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\n        {content.map((btnContent, btnIndex) => (\n          <div\n            key={btnIndex}\n            className=\"d-flex flex-column align-items-center\"\n            style={{\n              marginRight: btnIndex === 0 ? '2rem' : undefined,\n              marginLeft: btnIndex === 1 ? '2rem' : undefined,\n            }}\n          >\n            <button\n              onClick={() => handleClick(btnIndex)}\n              className={`btn btn-${clicked[btnIndex] ? 'secondary' : 'primary'\n                } my-1`}\n              style={{\n                marginBottom: '1.5rem',\n                whiteSpace: 'normal',\n                width: '12rem',\n              }}\n            >\n              {btnContent}\n            </button>\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                minHeight: '1.5rem',\n              }}\n            >\n              {!clicked[btnIndex] && clicked[1 - btnIndex] && (\n                <span style={{ color: 'white', fontStyle: 'italic' }}>\n                  This response was not selected\n                </span>\n              )}\n            </div>\n            {clicked[btnIndex] && (\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                defaultValue=\"50\"\n                style={{ width: '150px', marginBottom: '1rem' }}\n              />\n            )}\n            {clicked[btnIndex] && (\n              <div\n                className=\"input-group mb-3\"\n                style={{ marginTop: '1rem', width: '300px' }}\n              >\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Enter your commentary\"\n                  value={textInput}\n                  onChange={handleTextInputChange}\n                />\n                <button\n                  className=\"btn btn-primary\"\n                  type=\"button\"\n                  onClick={handleButtonClick}\n                >\n                  Critique\n                </button>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nclass MyComponent extends StreamlitComponentBase {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tree: [\n        {\n          level: 0,\n          index: 0,\n          content: [\n            'Because God said so',\n            'Because of Raleigh scattering',\n          ],\n          children: [],\n        },\n      ],\n    };\n  }\n\n  updateTree = (level, index, textInput) => {\n    const tree = JSON.parse(JSON.stringify(this.state.tree));\n\n    const newNode = {\n      level: level + 1,\n      index: tree.length,\n      content: [\n        `Level ${level + 1}, Index ${index * 2} response: ${textInput}`,\n        `Level ${level + 1}, Index ${index * 2 + 1} response: ${textInput}`,\n      ],\n      children: [],\n    };\n\n    tree.push(newNode);\n    this.setState({ tree });\n  };\n\n  render() {\n    const { tree } = this.state;\n\n    return (\n      <div className=\"container\" style={customContainer}>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            marginTop: '2rem',\n          }}\n        >\n          <button\n            style={{\n              backgroundColor: '#007bff',\n              border: '1px solid #007bff',\n              borderRadius: '4px',\n              color: 'white',\n              padding: '0.5rem 1rem',\n              margin: '1rem',\n              pointerEvents: 'none',\n            }}\n          >\n            Why is the sky blue?\n          </button>\n          <div>\n            {tree.map((node, index) => (\n              <div key={index}>\n                <ChoicePair\n                  level={node.level}\n                  index={node.index}\n                  content={node.content}\n                  updateTree={this.updateTree}\n                />\n                {index < tree.length - 1 && <hr />}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStreamlitConnection(MyComponent);\n\n\n\n\n// import React, { ReactNode } from 'react';\n// import {\n//     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// interface State {\n//   prompt: string;\n//   tree: (string | string[][])[][];\n//   clicked: boolean[][];\n// }\n\n// const customContainer = {\n//   width: '100%',\n//   maxWidth: '100%',\n//   minHeight: '1000px',\n// };\n\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state: State = {\n//     prompt: 'Why is the sky blue?',\n//     tree: [\n//       [\n//         ['Because God said so', []],\n//         ['Because of Raleigh scattering', []],\n//       ],\n//     ],\n//     clicked: [],\n//   };\n\n//   private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n//     const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n//     tree[level] = tree[level] || [];\n//     tree[level][index] = [text, newNodes];\n//     this.setState({ tree });\n//   };\n\n\n//   private handleClick = (level: number, index: number) => {\n//     const clicked = JSON.parse(JSON.stringify(this.state.clicked)) as boolean[][];\n//     clicked[level] = clicked[level] || [];\n\n//     if (clicked[level][index]) {\n//       clicked[level][index] = false;\n//     } else {\n//       clicked[level][index] = true;\n//       clicked[level][1 - index] = false;\n//     }\n\n//     this.setState({ clicked }, () => {\n//       // If a button is unclicked, clear the input field associated with that button\n//       const unclickedInput = document.getElementById(\n//         `inputDefault_${level}_${index}`\n//       ) as HTMLInputElement;\n//       if (unclickedInput) {\n//         unclickedInput.value = '';\n//       }\n//     });\n//   };\n\n\n\n\n\n//   private renderNode = (level: number, index: number) => {\n//     const content = this.state.tree[level]?.[index]?.[0];\n//     const isClicked = this.state.clicked[level]?.[index];\n//     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n//     if (content) {\n//       return (\n//         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n//           <button\n//             onClick={() => {\n//               this.handleClick(level, index);\n//             }}\n//             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n//             style={{ marginBottom: '1.5rem', whiteSpace: 'normal', width: '12rem' }}\n//           >\n//             {content}\n//           </button>\n//           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n//             {!isClicked && otherButtonClicked && (\n//               <span style={{ color: 'white', fontStyle: 'italic' }}>\n//                 This response was not selected\n//               </span>\n//             )}\n//           </div>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   private generateNewNodes = (level: number, index: number) => {\n//     if (level === 0) {\n//       if (index === 0) {\n//         return [\n//           [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n//           [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n//         ];\n//       } else {\n//         return [\n//           [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n//           [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n//         ];\n//       }\n//     } else {\n//       return [\n//         [`Level ${level + 1}, Index ${index * 2} response`],\n//         [`Level ${level + 1}, Index ${index * 2 + 1} response`]\n//       ];\n//     }\n//   };\n\n//   private renderTextInput = (level: number, index: number) => {\n//     const isClicked = this.state.clicked[level]?.[index];\n\n//     const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n//       if (event.key === 'Enter') {\n//         const commentary = event.currentTarget.value;\n//         this.handleClick(level, index);\n\n//         // Generate new nodes without modifying the current node text\n//         const newNodes = this.generateNewNodes(level, index);\n\n//         this.addToTree(level + 1, index * 2, newNodes[0][0], []);\n//         this.addToTree(level + 1, index * 2 + 1, newNodes[1][0], []);\n//       }\n//     };\n\n//     const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n//       const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n\n//       const clicked = [...this.state.clicked] as boolean[][];\n//       clicked[level] = clicked[level] || [];\n//       clicked[level][index] = true;\n//       clicked[level][1 - index] = false;\n\n//       const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n\n//       let newNodes: string[][] = [];\n\n//       if (level === 0) {\n//         if (index === 0) {\n//           newNodes = [\n//             [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n//             [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n//           ];\n//         } else {\n//           newNodes = [\n//             [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n//             [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n//           ];\n//         }\n//       } else {\n//         newNodes = [\n//           [`Level ${level + 1}, Index ${index * 2} response`],\n//           [`Level ${level + 1}, Index ${index * 2 + 1} response`]\n//         ];\n//       }\n\n//       tree[level + 1] = tree[level + 1] || [];\n//       tree[level + 1][index * 2] = [newNodes[0][0], []];\n//       tree[level + 1][index * 2 + 1] = [newNodes[1][0], []];\n\n//       this.setState({ clicked, tree });\n//     };\n\n\n//     if (isClicked) {\n//       return (\n//         <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             placeholder=\"Enter your commentary\"\n//             id={`inputDefault_${level}_${index}`}\n//             onKeyPress={handleKeyPress}\n//           />\n//           <button\n//             className=\"btn btn-primary\"\n//             type=\"button\"\n//             id={`button-addon2_${level}_${index}`}\n//             onClick={handleButtonClick} // Add this line back\n//           >\n//             Critique\n//           </button>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n\n//   public render = (): ReactNode => {\n//     const renderDividerAndNewNodes = (level: number, index: number) => {\n//       const isClicked = this.state.clicked[level]?.[index];\n//       const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n//       if (isClicked && newNodesExist) {\n//         return (\n//           <React.Fragment>\n//             <hr />\n//             <div\n//               style={{\n//                 display: 'flex',\n//                 justifyContent: 'center',\n//                 alignItems: 'flex-end',\n//                 marginTop: '2rem',\n//                 flexWrap: 'wrap',\n//               }}\n//             >\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(level + 1, index * 2)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(level + 1, index * 2)}\n//               </div>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(level + 1, index * 2 + 1)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(level + 1, index * 2 + 1)}\n//               </div>\n//             </div>\n//           </React.Fragment>\n//         );\n//       }\n//       return null;\n//     };\n\n//     return (\n//       <div className=\"container\" style={customContainer}>\n//         <div\n//           style={{\n//             display: 'flex',\n//             flexDirection: 'column',\n//             alignItems: 'center',\n//             marginTop: '2rem',\n//           }}\n//         >\n//           <button\n//             style={{\n//               backgroundColor: '#007bff',\n//               border: '1px solid #007bff',\n//               borderRadius: '4px',\n//               color: 'white',\n//               padding: '0.5rem 1rem',\n//               margin: '1rem',\n//               pointerEvents: 'none',\n//             }}\n//           >\n//             {this.state.prompt}\n//           </button>\n//           <div\n//             style={{\n//               display: 'flex',\n//               justifyContent: 'center',\n//               alignItems: 'flex-end',\n//               marginTop: '2rem',\n//               flexWrap: 'wrap',\n//             }}\n//           >\n//             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem', flexWrap: 'wrap' }}>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(0, 0)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(0, 0)}\n//                 {renderDividerAndNewNodes(0, 0)}\n//               </div>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(0, 1)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(0, 1)}\n//                 {renderDividerAndNewNodes(0, 1)}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   };\n// }\n\n// export default withStreamlitConnection(MyComponent);\n\n\n// // // import React, { ReactNode } from 'react';\n// // // import {\n// // //     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// // // } from 'streamlit-component-lib';\n\n// // // interface State {\n// // //   prompt: string;\n// // //   tree: (string | string[][])[][];\n// // //   clicked: boolean[][];\n// // // }\n\n// // // const customContainer = {\n// // //   width: '100%',\n// // //   maxWidth: '100%',\n// // //   minHeight: '1000px',\n// // // };\n\n// // // class MyComponent extends StreamlitComponentBase<State> {\n// // //   public state: State = {\n// // //     prompt: 'Why is the sky blue?',\n// // //     tree: [\n// // //       [\n// // //         ['Because God said so', []],\n// // //         ['Because of Raleigh scattering', []],\n// // //       ],\n// // //     ],\n// // //     clicked: [],\n// // //   };\n\n// // //   private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n// // //     const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// // //     tree[level] = tree[level] || [];\n// // //     tree[level][index] = [text, newNodes];\n// // //     this.setState({ tree });\n// // //   };\n\n// // //   private handleClick = (level: number, index: number) => {\n// // //     const clicked = [...this.state.clicked] as boolean[][];\n// // //     clicked[level] = clicked[level] || [];\n// // //     clicked[level][index] = true;\n// // //     clicked[level][1 - index] = false;\n// // //     this.setState({ clicked });\n// // //   };\n\n// // //   private renderNode = (level: number, index: number) => {\n// // //     const content = this.state.tree[level]?.[index]?.[0];\n// // //     const isClicked = this.state.clicked[level]?.[index];\n// // //     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n// // //     if (content) {\n// // //       return (\n// // //         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n// // //           <button\n// // //             onClick={() => {\n// // //               this.handleClick(level, index);\n// // //             }}\n// // //             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n// // //             style={{ marginBottom: '1.5rem', whiteSpace: 'normal', width: '12rem' }} // Add white-space and width styles\n// // //           >\n// // //             {content}\n// // //           </button>\n// // //           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n// // //             {!isClicked && otherButtonClicked && (\n// // //               <span style={{ color: 'white', fontStyle: 'italic' }}>\n// // //                 This response was not selected\n// // //               </span>\n// // //             )}\n// // //           </div>\n// // //         </div>\n// // //       );\n// // //     }\n// // //     return null;\n// // //   };\n\n// // //   private renderTextInput = (level: number, index: number) => {\n// // //     const isClicked = this.state.clicked[level]?.[index];\n\n// // //     const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n// // //       if (event.key === 'Enter') {\n// // //         const commentary = event.currentTarget.value;\n// // //         this.handleClick(level, index);\n// // //         this.addToTree(level + 1, index * 2, commentary, []);\n// // //       }\n// // //     };\n\n// // //     const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n// // //       const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n\n// // //       const clicked = [...this.state.clicked] as boolean[][];\n// // //       clicked[level] = clicked[level] || [];\n// // //       clicked[level][index] = true;\n// // //       clicked[level][1 - index] = false;\n\n// // //       const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// // //       const newNodes = level === 0\n// // //         ? index === 0\n// // //           ? [\n// // //             [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n// // //             [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n// // //           ]\n// // //           : [\n// // //             [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n// // //             [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n// // //           ]\n// // //         : []; // For deeper levels, you can add more new nodes here\n\n// // //       tree[level + 1] = tree[level + 1] || [];\n// // //       tree[level + 1][index * 2] = [newNodes[0], []];\n// // //       tree[level + 1][index * 2 + 1] = [newNodes[1], []];\n\n// // //       this.setState({ clicked, tree });\n// // //     };\n\n// // //     if (isClicked) {\n// // //       return (\n// // //         <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n// // //           <input\n// // //             type=\"text\"\n// // //             className=\"form-control\"\n// // //             placeholder=\"Enter your commentary\"\n// // //             id={`inputDefault_${level}_${index}`}\n// // //             onKeyPress={handleKeyPress}\n// // //           />\n// // //           <button\n// // //             className=\"btn btn-primary\"\n// // //             type=\"button\"\n// // //             id={`button-addon2_${level}_${index}`}\n// // //             onClick={handleButtonClick}\n// // //           >\n// // //             Critique\n// // //           </button>\n// // //         </div>\n// // //       );\n// // //     }\n// // //     return null;\n// // //   };\n\n// // //   public render = (): ReactNode => {\n// // //     const renderDividerAndNewNodes = (level: number, index: number) => {\n// // //       const isClicked = this.state.clicked[level]?.[index];\n// // //       const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n// // //       if (isClicked && newNodesExist) {\n// // //         return (\n// // //           <React.Fragment>\n// // //             <hr />\n// // //             <div\n// // //               style={{\n// // //                 display: 'flex',\n// // //                 justifyContent: 'center',\n// // //                 alignItems: 'flex-end',\n// // //                 marginTop: '2rem',\n// // //                 flexWrap: 'wrap', // Add flex-wrap style\n// // //               }}\n// // //             >\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(level + 1, index * 2)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(level + 1, index * 2)}\n// // //               </div>\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(level + 1, index * 2 + 1)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(level + 1, index * 2 + 1)}\n// // //               </div>\n// // //             </div>\n// // //           </React.Fragment>\n// // //         );\n// // //       }\n// // //       return null;\n// // //     };\n\n// // //     return (\n// // //       <div className=\"container\" style={customContainer}>\n// // //         <div\n// // //           style={{\n// // //             display: 'flex',\n// // //             flexDirection: 'column',\n// // //             alignItems: 'center',\n// // //             marginTop: '2rem',\n// // //           }}\n// // //         >\n// // //           <button\n// // //             style={{\n// // //               backgroundColor: '#007bff',\n// // //               border: '1px solid #007bff',\n// // //               borderRadius: '4px',\n// // //               color: 'white',\n// // //               padding: '0.5rem 1rem',\n// // //               margin: '1rem',\n// // //               pointerEvents: 'none',\n// // //             }}\n// // //           >\n// // //             {this.state.prompt}\n// // //           </button>\n// // //           <div\n// // //             style={{\n// // //               display: 'flex',\n// // //               justifyContent: 'center',\n// // //               alignItems: 'flex-end',\n// // //               marginTop: '2rem',\n// // //               flexWrap: 'wrap', // Add flex-wrap style\n// // //             }}\n// // //           >\n// // //             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem', flexWrap: 'wrap' }}>\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(0, 0)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(0, 0)}\n// // //                 {renderDividerAndNewNodes(0, 0)}\n// // //               </div>\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(0, 1)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(0, 1)}\n// // //                 {renderDividerAndNewNodes(0, 1)}\n// // //               </div>\n// // //             </div>\n// // //           </div>\n// // //         </div>\n// // //       </div>\n// // //     );\n// // //   };\n// // // }\n\n// // // export default withStreamlitConnection(MyComponent);\n"],"mappings":"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AI,CAACM,MAAM,GAAG,CAAC,iBAAIhE,OAAA;cAAAwC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC;UAAA,GAP1BjC,KAAK;YAAA8B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAQV,CACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;AACF;AAEA,eAAAgC,GAAA,GAAe7E,uBAAuB,CAACyD,WAAW,CAAC;;AAKnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAD,EAAA,EAAAqB,GAAA;AAAAC,YAAA,CAAAtB,EAAA;AAAAsB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module"}