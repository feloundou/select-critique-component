{"ast":null,"code":"var _jsxFileName = \"/Users/tyna/code/select_critique_package/my_component/frontend/src/MyComponent.tsx\";\nimport React from 'react';\nimport { StreamlitComponentBase, withStreamlitConnection } from 'streamlit-component-lib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      prompt: 'Why is the sky blue?',\n      tree: [[['Because God said so'], ['Because of Raleigh scattering']]],\n      clicked: []\n    };\n    this.addToTree = (level, index, text) => {\n      const tree = [...this.state.tree];\n      tree[level] = tree[level] || [];\n      tree[level][index] = [text];\n      this.setState({\n        tree\n      });\n    };\n    this.handleClick = (level, index) => {\n      const clicked = [...this.state.clicked];\n      clicked[level] = clicked[level] || [];\n      clicked[level][index] = true;\n      clicked[level][1 - index] = false;\n      this.setState({\n        clicked\n      });\n    };\n    this.renderNode = (level, index) => {\n      var _this$state$tree$leve, _this$state$tree$leve2, _this$state$clicked$l;\n      const content = (_this$state$tree$leve = this.state.tree[level]) === null || _this$state$tree$leve === void 0 ? void 0 : (_this$state$tree$leve2 = _this$state$tree$leve[index]) === null || _this$state$tree$leve2 === void 0 ? void 0 : _this$state$tree$leve2[0];\n      const isClicked = (_this$state$clicked$l = this.state.clicked[level]) === null || _this$state$clicked$l === void 0 ? void 0 : _this$state$clicked$l[index];\n      if (content) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              this.handleClick(level, index);\n              if (isClicked) {\n                this.addToTree(level + 1, index * 2, 'Response A');\n              }\n            },\n            style: {\n              backgroundColor: isClicked ? 'gray' : '#ffffff',\n              border: '1px solid blue',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              color: 'blue',\n              padding: '0.5rem 1rem',\n              margin: '1rem',\n              pointerEvents: 'all'\n            },\n            children: content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 11\n          }, this), isClicked && /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter a commentary\",\n            style: {\n              marginBottom: '1rem',\n              width: '150px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), !isClicked && /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: 'white',\n              fontStyle: 'italic',\n              marginBottom: '1rem'\n            },\n            children: \"This response was not selected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this);\n      }\n      return null;\n    };\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            marginTop: '2rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              backgroundColor: '#007bff',\n              border: '1px solid #007bff',\n              borderRadius: '4px',\n              color: 'white',\n              padding: '0.5rem 1rem',\n              margin: '1rem',\n              pointerEvents: 'none'\n            },\n            children: this.state.prompt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'flex-end',\n              marginTop: '2rem'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  border: '1px solid white',\n                  width: '1px',\n                  height: '2rem'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  width: '18rem'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    border: '1px solid white',\n                    height: '1px',\n                    width: '50%'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    border: '1px solid white',\n                    height: '1px',\n                    width: '50%'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                marginLeft: '-9rem',\n                marginRight: '-9rem'\n              },\n              children: [this.renderNode(0, 0), this.renderNode(0, 1)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                width: '18rem',\n                marginTop: '1rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"range\",\n                min: \"0\",\n                max: \"100\",\n                defaultValue: \"50\",\n                style: {\n                  width: '150px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"range\",\n                min: \"0\",\n                max: \"100\",\n                defaultValue: \"50\",\n                style: {\n                  width: '150px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this);\n    };\n  }\n}\nexport default _c = withStreamlitConnection(MyComponent);\n\n// import React, { ReactNode } from 'react';\n// import {\n//     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// interface State {\n//   prompt: string;\n//   tree: string[][][];\n// }\n\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state: State = {\n//     prompt: 'Why is the sky blue?',\n//     tree: [\n//       [['Because God said so'], ['Because of Raleigh scattering']],\n//     ],\n//   };\n\n//   private addToTree = (level: number, index: number, text: string) => {\n//     const tree = [...this.state.tree] as string[][][];\n//     tree[level] = tree[level] || [];\n//     tree[level][index] = [text];\n//     this.setState({ tree });\n//   };\n\n//   private renderNode = (level: number, index: number) => {\n//     const content = this.state.tree[level]?.[index]?.[0];\n\n//     if (content) {\n//       return (\n//         <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n//           <span>{content}</span>\n//           {index % 2 === 0 && this.state.tree[level]?.[index + 1] && (\n//             <div style={{ display: 'flex', justifyContent: 'space-between', width: '12rem' }}>\n//               <button\n//                 style={{ backgroundColor: 'transparent', border: 'none', cursor: 'pointer', color: 'blue' }}\n//                 onClick={() => this.addToTree(level + 1, index * 2, 'Response A')}\n//               >\n//                 A\n//               </button>\n//               <button\n//                 style={{ backgroundColor: 'transparent', border: 'none', cursor: 'pointer', color: 'blue' }}\n//                 onClick={() => this.addToTree(level + 1, index * 2 + 1, 'Response B')}\n//               >\n//                 B\n//               </button>\n//             </div>\n//           )}\n//           <div style={{ display: 'flex' }}>\n//             {this.renderNode(level + 1, index * 2)}\n//             {this.renderNode(level + 1, index * 2 + 1)}\n//           </div>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   public render = (): ReactNode => {\n//     return (\n//       <div>\n//         <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '1rem' }}>\n//           <span>{this.state.prompt}</span>\n//           <div style={{ display: 'flex' }}>\n//             {this.renderNode(0, 0)}\n//             {this.renderNode(0, 1)}\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default withStreamlitConnection(MyComponent);\n\n// import {\n//   Streamlit,\n//   StreamlitComponentBase,\n//   withStreamlitConnection,\n// } from \"streamlit-component-lib\"\n// import React, { ReactNode } from \"react\"\n\n// interface State {\n//   numClicks: number\n//   isFocused: boolean\n// }\n\n// /**\n//  * This is a React-based component template. The `render()` function is called\n//  * automatically when your component should be re-rendered.\n//  */\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state = { numClicks: 0, isFocused: false }\n\n//   public render = (): ReactNode => {\n//     // Arguments that are passed to the plugin in Python are accessible\n//     // via `this.props.args`. Here, we access the \"name\" arg.\n//     const name = this.props.args[\"name\"]\n\n//     // Streamlit sends us a theme object via props that we can use to ensure\n//     // that our component has visuals that match the active theme in a\n//     // streamlit app.\n//     const { theme } = this.props\n//     const style: React.CSSProperties = {}\n\n//     // Maintain compatibility with older versions of Streamlit that don't send\n//     // a theme object.\n//     if (theme) {\n//       // Use the theme object to style our button border. Alternatively, the\n//       // theme style is defined in CSS vars.\n//       const borderStyling = `1px solid ${\n//         this.state.isFocused ? theme.primaryColor : \"gray\"\n//       }`\n//       style.border = borderStyling\n//       style.outline = borderStyling\n//     }\n\n//     // Show a button and some text.\n//     // When the button is clicked, we'll increment our \"numClicks\" state\n//     // variable, and send its new value back to Streamlit, where it'll\n//     // be available to the Python program.\n//     return (\n//       <span>\n//         Hello, {name}! &nbsp;\n//         <button\n//           style={style}\n//           onClick={this.onClicked}\n//           disabled={this.props.disabled}\n//           onFocus={this._onFocus}\n//           onBlur={this._onBlur}\n//         >\n//           Click Me!\n//         </button>\n//       </span>\n//     )\n//   }\n\n//   /** Click handler for our \"Click Me!\" button. */\n//   private onClicked = (): void => {\n//     // Increment state.numClicks, and pass the new value back to\n//     // Streamlit via `Streamlit.setComponentValue`.\n//     this.setState(\n//       prevState => ({ numClicks: prevState.numClicks + 1 }),\n//       () => Streamlit.setComponentValue(this.state.numClicks)\n//     )\n//   }\n\n//   /** Focus handler for our \"Click Me!\" button. */\n//   private _onFocus = (): void => {\n//     this.setState({ isFocused: true })\n//   }\n\n//   /** Blur handler for our \"Click Me!\" button. */\n//   private _onBlur = (): void => {\n//     this.setState({ isFocused: false })\n//   }\n// }\n\n// // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// // connection between your component and the Streamlit app, and handles\n// // passing arguments from Python -> Component.\n// //\n// // You don't need to edit withStreamlitConnection (but you're welcome to!).\n// export default withStreamlitConnection(MyComponent)\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","StreamlitComponentBase","withStreamlitConnection","jsxDEV","_jsxDEV","MyComponent","constructor","arguments","state","prompt","tree","clicked","addToTree","level","index","text","setState","handleClick","renderNode","_this$state$tree$leve","_this$state$tree$leve2","_this$state$clicked$l","content","isClicked","style","display","flexDirection","alignItems","children","onClick","backgroundColor","border","borderRadius","cursor","color","padding","margin","pointerEvents","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","marginBottom","width","fontStyle","render","marginTop","justifyContent","height","marginLeft","marginRight","min","max","defaultValue","_c","$RefreshReg$"],"sources":["/Users/tyna/code/select_critique_package/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\nimport {\n    Streamlit, StreamlitComponentBase, withStreamlitConnection\n} from 'streamlit-component-lib';\n\ninterface State {\n  prompt: string;\n  tree: string[][][];\n  clicked: boolean[][];\n}\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state: State = {\n    prompt: 'Why is the sky blue?',\n    tree: [\n      [['Because God said so'], ['Because of Raleigh scattering']],\n    ],\n    clicked: [],\n  };\n\n  private addToTree = (level: number, index: number, text: string) => {\n    const tree = [...this.state.tree] as string[][][];\n    tree[level] = tree[level] || [];\n    tree[level][index] = [text];\n    this.setState({ tree });\n  };\n\n  private handleClick = (level: number, index: number) => {\n    const clicked = [...this.state.clicked] as boolean[][];\n    clicked[level] = clicked[level] || [];\n    clicked[level][index] = true;\n    clicked[level][1 - index] = false;\n    this.setState({ clicked });\n  };\n\n  private renderNode = (level: number, index: number) => {\n    const content = this.state.tree[level]?.[index]?.[0];\n    const isClicked = this.state.clicked[level]?.[index];\n\n    if (content) {\n      return (\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n          <button\n            onClick={() => {\n              this.handleClick(level, index);\n              if (isClicked) {\n                this.addToTree(level + 1, index * 2, 'Response A');\n              }\n            }}\n            style={{\n              backgroundColor: isClicked ? 'gray' : '#ffffff',\n              border: '1px solid blue',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              color: 'blue',\n              padding: '0.5rem 1rem',\n              margin: '1rem',\n              pointerEvents: 'all',\n            }}\n          >\n            {content}\n          </button>\n          {isClicked && (\n            <input\n              type=\"text\"\n              placeholder=\"Enter a commentary\"\n              style={{ marginBottom: '1rem', width: '150px' }}\n            />\n          )}\n          {!isClicked && (\n            <span style={{ color: 'white', fontStyle: 'italic', marginBottom: '1rem' }}>\n              This response was not selected\n            </span>\n          )}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  public render = (): ReactNode => {\n    return (\n      <div>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            marginTop: '2rem',\n          }}\n        >\n          <button\n            style={{\n              backgroundColor: '#007bff',\n              border: '1px solid #007bff',\n              borderRadius: '4px',\n              color: 'white',\n              padding: '0.5rem 1rem',\n              margin: '1rem',\n              pointerEvents: 'none',\n            }}\n          >\n            {this.state.prompt}\n          </button>\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'flex-end',\n              marginTop: '2rem',\n            }}\n          >\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              <div style={{ border: '1px solid white', width: '1px', height: '2rem' }}></div>\n              <div style={{ display: 'flex', justifyContent: 'space-between', width: '18rem' }}>\n                <div style={{ border: '1px solid white', height: '1px', width: '50%' }}></div>\n                <div style={{ border: '1px solid white', height: '1px', width: '50%' }}></div>\n              </div>\n            </div>\n            <div\n              style={{\n                display: 'flex',\n                marginLeft: '-9rem',\n                marginRight: '-9rem',\n              }}\n            >\n              {this.renderNode(0, 0)}\n              {this.renderNode(0, 1)}\n            </div>\n            <div style={{ display: 'flex', justifyContent: 'space-between', width: '18rem', marginTop: '1rem' }}>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                defaultValue=\"50\"\n                style={{ width: '150px' }}\n              />\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                defaultValue=\"50\"\n                style={{ width: '150px' }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStreamlitConnection(MyComponent);\n\n\n\n\n\n\n\n// import React, { ReactNode } from 'react';\n// import {\n//     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// interface State {\n//   prompt: string;\n//   tree: string[][][];\n// }\n\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state: State = {\n//     prompt: 'Why is the sky blue?',\n//     tree: [\n//       [['Because God said so'], ['Because of Raleigh scattering']],\n//     ],\n//   };\n\n//   private addToTree = (level: number, index: number, text: string) => {\n//     const tree = [...this.state.tree] as string[][][];\n//     tree[level] = tree[level] || [];\n//     tree[level][index] = [text];\n//     this.setState({ tree });\n//   };\n\n//   private renderNode = (level: number, index: number) => {\n//     const content = this.state.tree[level]?.[index]?.[0];\n\n//     if (content) {\n//       return (\n//         <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n//           <span>{content}</span>\n//           {index % 2 === 0 && this.state.tree[level]?.[index + 1] && (\n//             <div style={{ display: 'flex', justifyContent: 'space-between', width: '12rem' }}>\n//               <button\n//                 style={{ backgroundColor: 'transparent', border: 'none', cursor: 'pointer', color: 'blue' }}\n//                 onClick={() => this.addToTree(level + 1, index * 2, 'Response A')}\n//               >\n//                 A\n//               </button>\n//               <button\n//                 style={{ backgroundColor: 'transparent', border: 'none', cursor: 'pointer', color: 'blue' }}\n//                 onClick={() => this.addToTree(level + 1, index * 2 + 1, 'Response B')}\n//               >\n//                 B\n//               </button>\n//             </div>\n//           )}\n//           <div style={{ display: 'flex' }}>\n//             {this.renderNode(level + 1, index * 2)}\n//             {this.renderNode(level + 1, index * 2 + 1)}\n//           </div>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   public render = (): ReactNode => {\n//     return (\n//       <div>\n//         <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '1rem' }}>\n//           <span>{this.state.prompt}</span>\n//           <div style={{ display: 'flex' }}>\n//             {this.renderNode(0, 0)}\n//             {this.renderNode(0, 1)}\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default withStreamlitConnection(MyComponent);\n\n\n\n// import {\n//   Streamlit,\n//   StreamlitComponentBase,\n//   withStreamlitConnection,\n// } from \"streamlit-component-lib\"\n// import React, { ReactNode } from \"react\"\n\n// interface State {\n//   numClicks: number\n//   isFocused: boolean\n// }\n\n// /**\n//  * This is a React-based component template. The `render()` function is called\n//  * automatically when your component should be re-rendered.\n//  */\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state = { numClicks: 0, isFocused: false }\n\n//   public render = (): ReactNode => {\n//     // Arguments that are passed to the plugin in Python are accessible\n//     // via `this.props.args`. Here, we access the \"name\" arg.\n//     const name = this.props.args[\"name\"]\n\n//     // Streamlit sends us a theme object via props that we can use to ensure\n//     // that our component has visuals that match the active theme in a\n//     // streamlit app.\n//     const { theme } = this.props\n//     const style: React.CSSProperties = {}\n\n//     // Maintain compatibility with older versions of Streamlit that don't send\n//     // a theme object.\n//     if (theme) {\n//       // Use the theme object to style our button border. Alternatively, the\n//       // theme style is defined in CSS vars.\n//       const borderStyling = `1px solid ${\n//         this.state.isFocused ? theme.primaryColor : \"gray\"\n//       }`\n//       style.border = borderStyling\n//       style.outline = borderStyling\n//     }\n\n//     // Show a button and some text.\n//     // When the button is clicked, we'll increment our \"numClicks\" state\n//     // variable, and send its new value back to Streamlit, where it'll\n//     // be available to the Python program.\n//     return (\n//       <span>\n//         Hello, {name}! &nbsp;\n//         <button\n//           style={style}\n//           onClick={this.onClicked}\n//           disabled={this.props.disabled}\n//           onFocus={this._onFocus}\n//           onBlur={this._onBlur}\n//         >\n//           Click Me!\n//         </button>\n//       </span>\n//     )\n//   }\n\n//   /** Click handler for our \"Click Me!\" button. */\n//   private onClicked = (): void => {\n//     // Increment state.numClicks, and pass the new value back to\n//     // Streamlit via `Streamlit.setComponentValue`.\n//     this.setState(\n//       prevState => ({ numClicks: prevState.numClicks + 1 }),\n//       () => Streamlit.setComponentValue(this.state.numClicks)\n//     )\n//   }\n\n//   /** Focus handler for our \"Click Me!\" button. */\n//   private _onFocus = (): void => {\n//     this.setState({ isFocused: true })\n//   }\n\n//   /** Blur handler for our \"Click Me!\" button. */\n//   private _onBlur = (): void => {\n//     this.setState({ isFocused: false })\n//   }\n// }\n\n// // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// // connection between your component and the Streamlit app, and handles\n// // passing arguments from Python -> Component.\n// //\n// // You don't need to edit withStreamlitConnection (but you're welcome to!).\n// export default withStreamlitConnection(MyComponent)\n"],"mappings":"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AAA,OAC3B,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAEV,CAAC;EAAA;AACH;AAEA,eAAAe,EAAA,GAAetD,uBAAuB,CAACG,WAAW,CAAC;;AAQnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}