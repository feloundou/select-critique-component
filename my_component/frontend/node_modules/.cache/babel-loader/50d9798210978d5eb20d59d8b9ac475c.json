{"ast":null,"code":"var _jsxFileName = \"/Users/tyna/code/select_critique_package/my_component/frontend/src/MyComponent.tsx\";\nimport React from 'react';\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from 'streamlit-component-lib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      prompt: \"\",\n      tree: []\n    };\n    this.addToTree = (level, index, text) => {\n      const tree = [...this.state.tree];\n      tree[level] = tree[level] || [];\n      tree[level][index] = text;\n      this.setState({\n        tree\n      });\n    };\n    this.renderNode = (level, index) => {\n      var _this$state$tree$leve;\n      const content = (_this$state$tree$leve = this.state.tree[level]) === null || _this$state$tree$leve === void 0 ? void 0 : _this$state$tree$leve[index];\n      if (content) {\n        var _this$state$tree$leve2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 11\n          }, this), index % 2 === 0 && ((_this$state$tree$leve2 = this.state.tree[level]) === null || _this$state$tree$leve2 === void 0 ? void 0 : _this$state$tree$leve2[index + 1]) && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'space-between',\n              width: '12rem'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                backgroundColor: 'transparent',\n                border: 'none',\n                cursor: 'pointer',\n                color: 'blue'\n              },\n              onClick: () => this.addToTree(level + 1, index * 2, 'Response A'),\n              children: \"A\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                backgroundColor: 'transparent',\n                border: 'none',\n                cursor: 'pointer',\n                color: 'blue'\n              },\n              onClick: () => this.addToTree(level + 1, index * 2 + 1, 'Response B'),\n              children: \"B\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex'\n            },\n            children: [this.renderNode(level + 1, index * 2), this.renderNode(level + 1, index * 2 + 1)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }, this);\n      }\n      return null;\n    };\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter a prompt\",\n          value: this.state.prompt,\n          onChange: event => {\n            this.setState({\n              prompt: event.target.value\n            }, () => {\n              Streamlit.setComponentValue({\n                prompt: this.state.prompt,\n                tree: this.state.tree\n              });\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            marginTop: '1rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: this.state.prompt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex'\n            },\n            children: [this.renderNode(0, 0), this.renderNode(0, 1)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this);\n    };\n  }\n}\nexport default _c = withStreamlitConnection(MyComponent);\n\n// import {\n//   Streamlit,\n//   StreamlitComponentBase,\n//   withStreamlitConnection,\n// } from \"streamlit-component-lib\"\n// import React, { ReactNode } from \"react\"\n\n// interface State {\n//   numClicks: number\n//   isFocused: boolean\n// }\n\n// /**\n//  * This is a React-based component template. The `render()` function is called\n//  * automatically when your component should be re-rendered.\n//  */\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state = { numClicks: 0, isFocused: false }\n\n//   public render = (): ReactNode => {\n//     // Arguments that are passed to the plugin in Python are accessible\n//     // via `this.props.args`. Here, we access the \"name\" arg.\n//     const name = this.props.args[\"name\"]\n\n//     // Streamlit sends us a theme object via props that we can use to ensure\n//     // that our component has visuals that match the active theme in a\n//     // streamlit app.\n//     const { theme } = this.props\n//     const style: React.CSSProperties = {}\n\n//     // Maintain compatibility with older versions of Streamlit that don't send\n//     // a theme object.\n//     if (theme) {\n//       // Use the theme object to style our button border. Alternatively, the\n//       // theme style is defined in CSS vars.\n//       const borderStyling = `1px solid ${\n//         this.state.isFocused ? theme.primaryColor : \"gray\"\n//       }`\n//       style.border = borderStyling\n//       style.outline = borderStyling\n//     }\n\n//     // Show a button and some text.\n//     // When the button is clicked, we'll increment our \"numClicks\" state\n//     // variable, and send its new value back to Streamlit, where it'll\n//     // be available to the Python program.\n//     return (\n//       <span>\n//         Hello, {name}! &nbsp;\n//         <button\n//           style={style}\n//           onClick={this.onClicked}\n//           disabled={this.props.disabled}\n//           onFocus={this._onFocus}\n//           onBlur={this._onBlur}\n//         >\n//           Click Me!\n//         </button>\n//       </span>\n//     )\n//   }\n\n//   /** Click handler for our \"Click Me!\" button. */\n//   private onClicked = (): void => {\n//     // Increment state.numClicks, and pass the new value back to\n//     // Streamlit via `Streamlit.setComponentValue`.\n//     this.setState(\n//       prevState => ({ numClicks: prevState.numClicks + 1 }),\n//       () => Streamlit.setComponentValue(this.state.numClicks)\n//     )\n//   }\n\n//   /** Focus handler for our \"Click Me!\" button. */\n//   private _onFocus = (): void => {\n//     this.setState({ isFocused: true })\n//   }\n\n//   /** Blur handler for our \"Click Me!\" button. */\n//   private _onBlur = (): void => {\n//     this.setState({ isFocused: false })\n//   }\n// }\n\n// // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// // connection between your component and the Streamlit app, and handles\n// // passing arguments from Python -> Component.\n// //\n// // You don't need to edit withStreamlitConnection (but you're welcome to!).\n// export default withStreamlitConnection(MyComponent)\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","Streamlit","StreamlitComponentBase","withStreamlitConnection","jsxDEV","_jsxDEV","MyComponent","constructor","arguments","state","prompt","tree","addToTree","level","index","text","setState","renderNode","_this$state$tree$leve","content","_this$state$tree$leve2","style","display","flexDirection","alignItems","children","fileName","_jsxFileName","lineNumber","columnNumber","justifyContent","width","backgroundColor","border","cursor","color","onClick","render","type","placeholder","value","onChange","event","target","setComponentValue","marginTop","_c","$RefreshReg$"],"sources":["/Users/tyna/code/select_critique_package/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\nimport {\n    Streamlit, StreamlitComponentBase, withStreamlitConnection\n} from 'streamlit-component-lib';\n\ninterface State {\n  prompt: string\n  tree: any[]\n}\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { prompt: \"\", tree: [] }\n\n  private addToTree = (level: number, index: number, text: string) => {\n    const tree = [...this.state.tree];\n    tree[level] = tree[level] || [];\n    tree[level][index] = text;\n    this.setState({ tree });\n  };\n\n  private renderNode = (level: number, index: number) => {\n    const content = this.state.tree[level]?.[index];\n\n    if (content) {\n      return (\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n          <span>{content}</span>\n          {index % 2 === 0 && this.state.tree[level]?.[index + 1] && (\n            <div style={{ display: 'flex', justifyContent: 'space-between', width: '12rem' }}>\n              <button\n                style={{ backgroundColor: 'transparent', border: 'none', cursor: 'pointer', color: 'blue' }}\n                onClick={() => this.addToTree(level + 1, index * 2, 'Response A')}\n              >\n                A\n              </button>\n              <button\n                style={{ backgroundColor: 'transparent', border: 'none', cursor: 'pointer', color: 'blue' }}\n                onClick={() => this.addToTree(level + 1, index * 2 + 1, 'Response B')}\n              >\n                B\n              </button>\n            </div>\n          )}\n          <div style={{ display: 'flex' }}>\n            {this.renderNode(level + 1, index * 2)}\n            {this.renderNode(level + 1, index * 2 + 1)}\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  public render = (): ReactNode => {\n    return (\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Enter a prompt\"\n          value={this.state.prompt}\n          onChange={(event) => {\n            this.setState({ prompt: event.target.value }, () => {\n              Streamlit.setComponentValue({ prompt: this.state.prompt, tree: this.state.tree });\n            });\n          }}\n        />\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '1rem' }}>\n          <span>{this.state.prompt}</span>\n          <div style={{ display: 'flex' }}>\n            {this.renderNode(0, 0)}\n            {this.renderNode(0, 1)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStreamlitConnection(MyComponent);\n\n\n\n// import {\n//   Streamlit,\n//   StreamlitComponentBase,\n//   withStreamlitConnection,\n// } from \"streamlit-component-lib\"\n// import React, { ReactNode } from \"react\"\n\n// interface State {\n//   numClicks: number\n//   isFocused: boolean\n// }\n\n// /**\n//  * This is a React-based component template. The `render()` function is called\n//  * automatically when your component should be re-rendered.\n//  */\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state = { numClicks: 0, isFocused: false }\n\n//   public render = (): ReactNode => {\n//     // Arguments that are passed to the plugin in Python are accessible\n//     // via `this.props.args`. Here, we access the \"name\" arg.\n//     const name = this.props.args[\"name\"]\n\n//     // Streamlit sends us a theme object via props that we can use to ensure\n//     // that our component has visuals that match the active theme in a\n//     // streamlit app.\n//     const { theme } = this.props\n//     const style: React.CSSProperties = {}\n\n//     // Maintain compatibility with older versions of Streamlit that don't send\n//     // a theme object.\n//     if (theme) {\n//       // Use the theme object to style our button border. Alternatively, the\n//       // theme style is defined in CSS vars.\n//       const borderStyling = `1px solid ${\n//         this.state.isFocused ? theme.primaryColor : \"gray\"\n//       }`\n//       style.border = borderStyling\n//       style.outline = borderStyling\n//     }\n\n//     // Show a button and some text.\n//     // When the button is clicked, we'll increment our \"numClicks\" state\n//     // variable, and send its new value back to Streamlit, where it'll\n//     // be available to the Python program.\n//     return (\n//       <span>\n//         Hello, {name}! &nbsp;\n//         <button\n//           style={style}\n//           onClick={this.onClicked}\n//           disabled={this.props.disabled}\n//           onFocus={this._onFocus}\n//           onBlur={this._onBlur}\n//         >\n//           Click Me!\n//         </button>\n//       </span>\n//     )\n//   }\n\n//   /** Click handler for our \"Click Me!\" button. */\n//   private onClicked = (): void => {\n//     // Increment state.numClicks, and pass the new value back to\n//     // Streamlit via `Streamlit.setComponentValue`.\n//     this.setState(\n//       prevState => ({ numClicks: prevState.numClicks + 1 }),\n//       () => Streamlit.setComponentValue(this.state.numClicks)\n//     )\n//   }\n\n//   /** Focus handler for our \"Click Me!\" button. */\n//   private _onFocus = (): void => {\n//     this.setState({ isFocused: true })\n//   }\n\n//   /** Blur handler for our \"Click Me!\" button. */\n//   private _onBlur = (): void => {\n//     this.setState({ isFocused: false })\n//   }\n// }\n\n// // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// // connection between your component and the Streamlit app, and handles\n// // passing arguments from Python -> Component.\n// //\n// // You don't need to edit withStreamlitConnection (but you're welcome to!).\n// export default withStreamlitConnection(MyComponent)\n"],"mappings":";AAAA,OAAOA,KAAK,MAAqB,OAAO;AACxC,SACIC,SAAS,EAAEC,sBAAsB,EAAEC,uBAAuB,QACvD,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOjC,MAAMC,WAAW,SAASJ,sBAAsB,CAAQ;EAAAK,YAAA;IAAA,SAAAC,SAAA;IAAA,KAC/CC,KAAK,GAAG;MAAEC,MAAM,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAG,CAAC;IAAA,KAE/BC,SAAS,GAAG,CAACC,KAAa,EAAEC,KAAa,EAAEC,IAAY,KAAK;MAClE,MAAMJ,IAAI,GAAG,CAAC,GAAG,IAAI,CAACF,KAAK,CAACE,IAAI,CAAC;MACjCA,IAAI,CAACE,KAAK,CAAC,GAAGF,IAAI,CAACE,KAAK,CAAC,IAAI,EAAE;MAC/BF,IAAI,CAACE,KAAK,CAAC,CAACC,KAAK,CAAC,GAAGC,IAAI;MACzB,IAAI,CAACC,QAAQ,CAAC;QAAEL;MAAK,CAAC,CAAC;IACzB,CAAC;IAAA,KAEOM,UAAU,GAAG,CAACJ,KAAa,EAAEC,KAAa,KAAK;MAAA,IAAAI,qBAAA;MACrD,MAAMC,OAAO,IAAAD,qBAAA,GAAG,IAAI,CAACT,KAAK,CAACE,IAAI,CAACE,KAAK,CAAC,cAAAK,qBAAA,uBAAtBA,qBAAA,CAAyBJ,KAAK,CAAC;MAE/C,IAAIK,OAAO,EAAE;QAAA,IAAAC,sBAAA;QACX,oBACEf,OAAA;UAAKgB,KAAK,EAAE;YAAEC,OAAO,EAAE,MAAM;YAAEC,aAAa,EAAE,QAAQ;YAAEC,UAAU,EAAE;UAAS,CAAE;UAAAC,QAAA,gBAC7EpB,OAAA;YAAAoB,QAAA,EAAON;UAAO;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,EACrBf,KAAK,GAAG,CAAC,KAAK,CAAC,MAAAM,sBAAA,GAAI,IAAI,CAACX,KAAK,CAACE,IAAI,CAACE,KAAK,CAAC,cAAAO,sBAAA,uBAAtBA,sBAAA,CAAyBN,KAAK,GAAG,CAAC,CAAC,kBACrDT,OAAA;YAAKgB,KAAK,EAAE;cAAEC,OAAO,EAAE,MAAM;cAAEQ,cAAc,EAAE,eAAe;cAAEC,KAAK,EAAE;YAAQ,CAAE;YAAAN,QAAA,gBAC/EpB,OAAA;cACEgB,KAAK,EAAE;gBAAEW,eAAe,EAAE,aAAa;gBAAEC,MAAM,EAAE,MAAM;gBAAEC,MAAM,EAAE,SAAS;gBAAEC,KAAK,EAAE;cAAO,CAAE;cAC5FC,OAAO,EAAEA,CAAA,KAAM,IAAI,CAACxB,SAAS,CAACC,KAAK,GAAG,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAE,YAAY,CAAE;cAAAW,QAAA,EACnE;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACTxB,OAAA;cACEgB,KAAK,EAAE;gBAAEW,eAAe,EAAE,aAAa;gBAAEC,MAAM,EAAE,MAAM;gBAAEC,MAAM,EAAE,SAAS;gBAAEC,KAAK,EAAE;cAAO,CAAE;cAC5FC,OAAO,EAAEA,CAAA,KAAM,IAAI,CAACxB,SAAS,CAACC,KAAK,GAAG,CAAC,EAAEC,KAAK,GAAG,CAAC,GAAG,CAAC,EAAE,YAAY,CAAE;cAAAW,QAAA,EACvE;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CACN,eACDxB,OAAA;YAAKgB,KAAK,EAAE;cAAEC,OAAO,EAAE;YAAO,CAAE;YAAAG,QAAA,GAC7B,IAAI,CAACR,UAAU,CAACJ,KAAK,GAAG,CAAC,EAAEC,KAAK,GAAG,CAAC,CAAC,EACrC,IAAI,CAACG,UAAU,CAACJ,KAAK,GAAG,CAAC,EAAEC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;UAAA;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAEV;MACA,OAAO,IAAI;IACb,CAAC;IAAA,KAEMQ,MAAM,GAAG,MAAiB;MAC/B,oBACEhC,OAAA;QAAAoB,QAAA,gBACEpB,OAAA;UACEiC,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,gBAAgB;UAC5BC,KAAK,EAAE,IAAI,CAAC/B,KAAK,CAACC,MAAO;UACzB+B,QAAQ,EAAGC,KAAK,IAAK;YACnB,IAAI,CAAC1B,QAAQ,CAAC;cAAEN,MAAM,EAAEgC,KAAK,CAACC,MAAM,CAACH;YAAM,CAAC,EAAE,MAAM;cAClDvC,SAAS,CAAC2C,iBAAiB,CAAC;gBAAElC,MAAM,EAAE,IAAI,CAACD,KAAK,CAACC,MAAM;gBAAEC,IAAI,EAAE,IAAI,CAACF,KAAK,CAACE;cAAK,CAAC,CAAC;YACnF,CAAC,CAAC;UACJ;QAAE;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eACFxB,OAAA;UAAKgB,KAAK,EAAE;YAAEC,OAAO,EAAE,MAAM;YAAEC,aAAa,EAAE,QAAQ;YAAEC,UAAU,EAAE,QAAQ;YAAEqB,SAAS,EAAE;UAAO,CAAE;UAAApB,QAAA,gBAChGpB,OAAA;YAAAoB,QAAA,EAAO,IAAI,CAAChB,KAAK,CAACC;UAAM;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAChCxB,OAAA;YAAKgB,KAAK,EAAE;cAAEC,OAAO,EAAE;YAAO,CAAE;YAAAG,QAAA,GAC7B,IAAI,CAACR,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,EACrB,IAAI,CAACA,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;UAAA;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAEV,CAAC;EAAA;AACH;AAEA,eAAAiB,EAAA,GAAe3C,uBAAuB,CAACG,WAAW,CAAC;;AAInD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}