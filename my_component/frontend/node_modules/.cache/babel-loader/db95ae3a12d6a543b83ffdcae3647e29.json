{"ast":null,"code":"var _jsxFileName = \"/Users/tyna/code/select_critique_package/my_component/frontend/src/MyComponent.tsx\";\nimport React from 'react';\nimport { StreamlitComponentBase, withStreamlitConnection } from 'streamlit-component-lib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst customContainer = {\n  width: '100%',\n  maxWidth: '100%',\n  minHeight: '1000px'\n};\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      prompt: 'Why is the sky blue?',\n      tree: [[['Because God said so', []], ['Because of Raleigh scattering', []]]],\n      clicked: []\n    };\n    this.addToTree = (level, index, text, newNodes) => {\n      const tree = [...this.state.tree];\n      tree[level] = tree[level] || [];\n      tree[level][index] = [text, newNodes];\n      this.setState({\n        tree\n      });\n    };\n    this.handleClick = (level, index) => {\n      var _this$state$clicked$l;\n      const clicked = [...this.state.clicked];\n      clicked[level] = clicked[level] || [];\n      clicked[level][index] = true;\n      clicked[level][1 - index] = false;\n      this.setState({\n        clicked\n      });\n      if ((_this$state$clicked$l = this.state.clicked[level]) !== null && _this$state$clicked$l !== void 0 && _this$state$clicked$l[index]) {\n        const newNodes = level === 0 ? index === 0 ? [[\"God wanted us to be happy, and he made the sky to give us light and food\"], [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]] : [[\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"], [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]] : []; // For deeper levels, you can add more new nodes here\n\n        this.addToTree(level + 1, index * 2, 'Response A', newNodes);\n      }\n    };\n    this.renderNode = (level, index) => {\n      var _this$state$tree$leve, _this$state$tree$leve2, _this$state$clicked$l2, _this$state$clicked$l3;\n      const content = (_this$state$tree$leve = this.state.tree[level]) === null || _this$state$tree$leve === void 0 ? void 0 : (_this$state$tree$leve2 = _this$state$tree$leve[index]) === null || _this$state$tree$leve2 === void 0 ? void 0 : _this$state$tree$leve2[0];\n      const isClicked = (_this$state$clicked$l2 = this.state.clicked[level]) === null || _this$state$clicked$l2 === void 0 ? void 0 : _this$state$clicked$l2[index];\n      const otherButtonClicked = (_this$state$clicked$l3 = this.state.clicked[level]) === null || _this$state$clicked$l3 === void 0 ? void 0 : _this$state$clicked$l3[1 - index];\n      if (content) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex flex-column align-items-center\",\n          style: {\n            marginRight: index === 0 ? '2rem' : undefined,\n            marginLeft: index === 1 ? '2rem' : undefined\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              this.handleClick(level, index);\n              if (isClicked) {\n                this.addToTree(level + 1, index * 2, 'Response A', []);\n              }\n            },\n            className: `btn btn-${isClicked ? 'secondary' : 'primary'} my-1`,\n            style: {\n              marginBottom: '1.5rem'\n            },\n            children: content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              minHeight: '1.5rem'\n            },\n            children: !isClicked && otherButtonClicked && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: 'white',\n                fontStyle: 'italic'\n              },\n              children: \"This response was not selected\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }, this);\n      }\n      return null;\n    };\n    this.renderTextInput = (level, index) => {\n      var _this$state$clicked$l4;\n      const isClicked = (_this$state$clicked$l4 = this.state.clicked[level]) === null || _this$state$clicked$l4 === void 0 ? void 0 : _this$state$clicked$l4[index];\n      const handleKeyPress = event => {\n        if (event.key === 'Enter') {\n          const commentary = event.currentTarget.value;\n          this.handleClick(level, index);\n          this.addToTree(level + 1, index * 2, commentary, []);\n        }\n      };\n      const handleButtonClick = event => {\n        const commentary = event.currentTarget.previousSibling.value;\n        this.handleClick(level, index, commentary);\n      };\n      if (isClicked) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group mb-3\",\n          style: {\n            marginTop: '1rem',\n            width: '300px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            placeholder: \"Enter your commentary\",\n            id: `inputDefault_${level}_${index}`,\n            onKeyPress: handleKeyPress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            type: \"button\",\n            id: `button-addon2_${level}_${index}`,\n            onClick: handleButtonClick,\n            children: \"Critique\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }, this);\n      }\n      return null;\n    };\n    this.render = () => {\n      const renderDividerAndNewNodes = (level, index) => {\n        var _this$state$clicked$l5, _this$state$tree, _this$state$tree2;\n        const isClicked = (_this$state$clicked$l5 = this.state.clicked[level]) === null || _this$state$clicked$l5 === void 0 ? void 0 : _this$state$clicked$l5[index];\n        const newNodesExist = (_this$state$tree = this.state.tree[level + 1]) === null || _this$state$tree === void 0 ? void 0 : (_this$state$tree2 = _this$state$tree[index * 2]) === null || _this$state$tree2 === void 0 ? void 0 : _this$state$tree2[0];\n        if (isClicked && newNodesExist) {\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'flex-end',\n                marginTop: '2rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"d-flex flex-column align-items-center\",\n                children: [this.renderNode(level + 1, index * 2), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"range\",\n                  min: \"0\",\n                  max: \"100\",\n                  defaultValue: \"50\",\n                  style: {\n                    width: '150px',\n                    marginTop: '1rem'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 17\n                }, this), this.renderTextInput(level + 1, index * 2)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"d-flex flex-column align-items-center\",\n                children: [this.renderNode(level + 1, index * 2 + 1), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"range\",\n                  min: \"0\",\n                  max: \"100\",\n                  defaultValue: \"50\",\n                  style: {\n                    width: '150px',\n                    marginTop: '1rem'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 17\n                }, this), this.renderTextInput(level + 1, index * 2 + 1)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 11\n          }, this);\n        }\n        return null;\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        style: customContainer,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            marginTop: '2rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              backgroundColor: '#007bff',\n              border: '1px solid #007bff',\n              borderRadius: '4px',\n              color: 'white',\n              padding: '0.5rem 1rem',\n              margin: '1rem',\n              pointerEvents: 'none'\n            },\n            children: this.state.prompt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'flex-end',\n              marginTop: '2rem'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                marginLeft: '-12rem',\n                marginRight: '-12rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"d-flex flex-column align-items-center\",\n                children: [this.renderNode(0, 0), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"range\",\n                  min: \"0\",\n                  max: \"100\",\n                  defaultValue: \"50\",\n                  style: {\n                    width: '150px',\n                    marginTop: '1rem'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 17\n                }, this), this.renderTextInput(0, 0), renderDividerAndNewNodes(0, 0)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"d-flex flex-column align-items-center\",\n                children: [this.renderNode(0, 1), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"range\",\n                  min: \"0\",\n                  max: \"100\",\n                  defaultValue: \"50\",\n                  style: {\n                    width: '150px',\n                    marginTop: '1rem'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 17\n                }, this), this.renderTextInput(0, 1), renderDividerAndNewNodes(0, 1)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 7\n      }, this);\n    };\n  }\n}\nexport default _c = withStreamlitConnection(MyComponent);\n\n// import React, { ReactNode } from 'react';\n// import {\n//     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// interface State {\n//   prompt: string;\n//   tree: string[][][];\n//   clicked: boolean[][];\n// }\n\n// const customContainer = {\n//   width: '100%',\n//   maxWidth: '100%',\n//   minHeight: '400px',\n// };\n\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state: State = {\n//     prompt: 'Why is the sky blue?',\n//     tree: [\n//       [['Because God said so'], ['Because of Raleigh scattering']],\n//     ],\n//     clicked: [],\n//   };\n\n//   private addToTree = (level: number, index: number, text: string) => {\n//     const tree = [...this.state.tree] as string[][][];\n//     tree[level] = tree[level] || [];\n//     tree[level][index] = [text];\n//     this.setState({ tree });\n//   };\n\n//   private handleClick = (level: number, index: number) => {\n//     const clicked = [...this.state.clicked] as boolean[][];\n//     clicked[level] = clicked[level] || [];\n//     clicked[level][index] = true;\n//     clicked[level][1 - index] = false;\n//     this.setState({ clicked });\n//   };\n\n//   private renderNode = (level: number, index: number) => {\n//     const content = this.state.tree[level]?.[index]?.[0];\n//     const isClicked = this.state.clicked[level]?.[index];\n//     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n//     if (content) {\n//       return (\n//         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n//           <button\n//             onClick={() => {\n//               this.handleClick(level, index);\n//               if (isClicked) {\n//                 this.addToTree(level + 1, index * 2, 'Response A');\n//               }\n//             }}\n//             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n//             style={{ marginBottom: '1.5rem' }} // Add marginBottom\n//           >\n//             {content}\n//           </button>\n//           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n//             {!isClicked && otherButtonClicked && (\n//               <span style={{ color: 'white', fontStyle: 'italic' }}>\n//                 This response was not selected\n//               </span>\n//             )}\n//           </div>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   private renderTextInput = (level: number, index: number) => {\n//     const isClicked = this.state.clicked[level]?.[index];\n//     if (isClicked) {\n//       return (\n//         <div className=\"form-group\">\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             placeholder=\"Enter your commentary\"\n//             id={`inputDefault_${level}_${index}`}\n//             style={{ width: '400px', marginTop: '1rem' }}\n//           />\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   public render = (): ReactNode => {\n//     return (\n//       <div className=\"container\" style={customContainer}>\n//         <div\n//           style={{\n//             display: 'flex',\n//             flexDirection: 'column',\n//             alignItems: 'center',\n//             marginTop: '2rem',\n//           }}\n//         >\n//           <button\n//             style={{\n//               backgroundColor: '#007bff',\n//               border: '1px solid #007bff',\n//               borderRadius: '4px',\n//               color: 'white',\n//               padding: '0.5rem 1rem',\n//               margin: '1rem',\n//               pointerEvents: 'none',\n//             }}\n//           >\n//             {this.state.prompt}\n//           </button>\n//           <div\n//             style={{\n//               display: 'flex',\n//               justifyContent: 'center',\n//               alignItems: 'flex-end',\n//               marginTop: '2rem',\n//             }}\n//           >\n//             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem' }}>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(0, 0)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(0, 0)}\n//               </div>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(0, 1)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(0, 1)}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","StreamlitComponentBase","withStreamlitConnection","jsxDEV","_jsxDEV","customContainer","width","maxWidth","minHeight","MyComponent","constructor","arguments","state","prompt","tree","clicked","addToTree","level","index","text","newNodes","setState","handleClick","_this$state$clicked$l","renderNode","_this$state$tree$leve","_this$state$tree$leve2","_this$state$clicked$l2","_this$state$clicked$l3","content","isClicked","otherButtonClicked","className","style","marginRight","undefined","marginLeft","children","onClick","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","alignItems","color","fontStyle","renderTextInput","_this$state$clicked$l4","handleKeyPress","event","key","commentary","currentTarget","value","handleButtonClick","previousSibling","marginTop","type","placeholder","id","onKeyPress","render","renderDividerAndNewNodes","_this$state$clicked$l5","_this$state$tree","_this$state$tree2","newNodesExist","Fragment","min","max","defaultValue","flexDirection","backgroundColor","border","borderRadius","padding","margin","pointerEvents","_c","$RefreshReg$"],"sources":["/Users/tyna/code/select_critique_package/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\nimport {\n    Streamlit, StreamlitComponentBase, withStreamlitConnection\n} from 'streamlit-component-lib';\n\ninterface State {\n  prompt: string;\n  tree: (string | string[][])[][];\n  clicked: boolean[][];\n}\n\n\nconst customContainer = {\n  width: '100%',\n  maxWidth: '100%',\n  minHeight: '1000px',\n};\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state: State = {\n    prompt: 'Why is the sky blue?',\n    tree: [\n      [\n        ['Because God said so', []],\n        ['Because of Raleigh scattering', []]\n      ],\n    ],\n    clicked: [],\n  };\n  private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n    const tree = [...this.state.tree] as (string | string[][])[][][];\n    tree[level] = tree[level] || [];\n    tree[level][index] = [text, newNodes];\n    this.setState({ tree });\n  };\n\n  private handleClick = (level: number, index: number) => {\n    const clicked = [...this.state.clicked] as boolean[][];\n    clicked[level] = clicked[level] || [];\n    clicked[level][index] = true;\n    clicked[level][1 - index] = false;\n    this.setState({ clicked });\n\n    if (this.state.clicked[level]?.[index]) {\n      const newNodes = level === 0\n        ? index === 0\n          ? [\n            [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n            [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n          ]\n          : [\n            [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n            [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n          ]\n        : []; // For deeper levels, you can add more new nodes here\n\n      this.addToTree(level + 1, index * 2, 'Response A', newNodes);\n    }\n  };\n\n  private renderNode = (level: number, index: number) => {\n    const content = this.state.tree[level]?.[index]?.[0];\n    const isClicked = this.state.clicked[level]?.[index];\n    const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n    if (content) {\n      return (\n        <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n          <button\n            onClick={() => {\n              this.handleClick(level, index);\n              if (isClicked) {\n                this.addToTree(level + 1, index * 2, 'Response A', []);\n              }\n            }}\n            className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n            style={{ marginBottom: '1.5rem' }}\n          >\n            {content}\n          </button>\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n            {!isClicked && otherButtonClicked && (\n              <span style={{ color: 'white', fontStyle: 'italic' }}>\n                This response was not selected\n              </span>\n            )}\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  private renderTextInput = (level: number, index: number) => {\n    const isClicked = this.state.clicked[level]?.[index];\n\n    const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Enter') {\n        const commentary = event.currentTarget.value;\n        this.handleClick(level, index);\n        this.addToTree(level + 1, index * 2, commentary, []);\n      }\n    };\n\n    const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n      const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n      this.handleClick(level, index, commentary);\n    };\n\n\n    if (isClicked) {\n      return (\n        <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Enter your commentary\"\n            id={`inputDefault_${level}_${index}`}\n            onKeyPress={handleKeyPress}\n          />\n          <button\n            className=\"btn btn-primary\"\n            type=\"button\"\n            id={`button-addon2_${level}_${index}`}\n            onClick={handleButtonClick}\n          >\n            Critique\n          </button>\n        </div>\n      );\n    }\n    return null;\n  };\n\n\n\n  public render = (): ReactNode => {\n    const renderDividerAndNewNodes = (level: number, index: number) => {\n      const isClicked = this.state.clicked[level]?.[index];\n      const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n      if (isClicked && newNodesExist) {\n        return (\n          <React.Fragment>\n            <hr />\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'flex-end',\n                marginTop: '2rem',\n              }}\n            >\n              <div className=\"d-flex flex-column align-items-center\">\n                {this.renderNode(level + 1, index * 2)}\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"100\"\n                  defaultValue=\"50\"\n                  style={{ width: '150px', marginTop: '1rem' }}\n                />\n                {this.renderTextInput(level + 1, index * 2)}\n              </div>\n              <div className=\"d-flex flex-column align-items-center\">\n                {this.renderNode(level + 1, index * 2 + 1)}\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"100\"\n                  defaultValue=\"50\"\n                  style={{ width: '150px', marginTop: '1rem' }}\n                />\n                {this.renderTextInput(level + 1, index * 2 + 1)}\n              </div>\n            </div>\n          </React.Fragment>\n        );\n      }\n      return null;\n    };\n\n    return (\n      <div className=\"container\" style={customContainer}>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            marginTop: '2rem',\n          }}\n        >\n          <button\n            style={{\n              backgroundColor: '#007bff',\n              border: '1px solid #007bff',\n              borderRadius: '4px',\n              color: 'white',\n              padding: '0.5rem 1rem',\n              margin: '1rem',\n              pointerEvents: 'none',\n            }}\n          >\n            {this.state.prompt}\n          </button>\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'flex-end',\n              marginTop: '2rem',\n            }}\n          >\n            <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem' }}>\n              <div className=\"d-flex flex-column align-items-center\">\n                {this.renderNode(0, 0)}\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"100\"\n                  defaultValue=\"50\"\n                  style={{ width: '150px', marginTop: '1rem' }}\n                />\n                {this.renderTextInput(0, 0)}\n                {renderDividerAndNewNodes(0, 0)}\n              </div>\n              <div className=\"d-flex flex-column align-items-center\">\n                {this.renderNode(0, 1)}\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"100\"\n                  defaultValue=\"50\"\n                  style={{ width: '150px', marginTop: '1rem' }}\n                />\n                {this.renderTextInput(0, 1)}\n                {renderDividerAndNewNodes(0, 1)}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStreamlitConnection(MyComponent);\n\n\n\n// import React, { ReactNode } from 'react';\n// import {\n//     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// interface State {\n//   prompt: string;\n//   tree: string[][][];\n//   clicked: boolean[][];\n// }\n\n// const customContainer = {\n//   width: '100%',\n//   maxWidth: '100%',\n//   minHeight: '400px',\n// };\n\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state: State = {\n//     prompt: 'Why is the sky blue?',\n//     tree: [\n//       [['Because God said so'], ['Because of Raleigh scattering']],\n//     ],\n//     clicked: [],\n//   };\n\n//   private addToTree = (level: number, index: number, text: string) => {\n//     const tree = [...this.state.tree] as string[][][];\n//     tree[level] = tree[level] || [];\n//     tree[level][index] = [text];\n//     this.setState({ tree });\n//   };\n\n//   private handleClick = (level: number, index: number) => {\n//     const clicked = [...this.state.clicked] as boolean[][];\n//     clicked[level] = clicked[level] || [];\n//     clicked[level][index] = true;\n//     clicked[level][1 - index] = false;\n//     this.setState({ clicked });\n//   };\n\n//   private renderNode = (level: number, index: number) => {\n//     const content = this.state.tree[level]?.[index]?.[0];\n//     const isClicked = this.state.clicked[level]?.[index];\n//     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n//     if (content) {\n//       return (\n//         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n//           <button\n//             onClick={() => {\n//               this.handleClick(level, index);\n//               if (isClicked) {\n//                 this.addToTree(level + 1, index * 2, 'Response A');\n//               }\n//             }}\n//             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n//             style={{ marginBottom: '1.5rem' }} // Add marginBottom\n//           >\n//             {content}\n//           </button>\n//           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n//             {!isClicked && otherButtonClicked && (\n//               <span style={{ color: 'white', fontStyle: 'italic' }}>\n//                 This response was not selected\n//               </span>\n//             )}\n//           </div>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n\n\n//   private renderTextInput = (level: number, index: number) => {\n//     const isClicked = this.state.clicked[level]?.[index];\n//     if (isClicked) {\n//       return (\n//         <div className=\"form-group\">\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             placeholder=\"Enter your commentary\"\n//             id={`inputDefault_${level}_${index}`}\n//             style={{ width: '400px', marginTop: '1rem' }}\n//           />\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   public render = (): ReactNode => {\n//     return (\n//       <div className=\"container\" style={customContainer}>\n//         <div\n//           style={{\n//             display: 'flex',\n//             flexDirection: 'column',\n//             alignItems: 'center',\n//             marginTop: '2rem',\n//           }}\n//         >\n//           <button\n//             style={{\n//               backgroundColor: '#007bff',\n//               border: '1px solid #007bff',\n//               borderRadius: '4px',\n//               color: 'white',\n//               padding: '0.5rem 1rem',\n//               margin: '1rem',\n//               pointerEvents: 'none',\n//             }}\n//           >\n//             {this.state.prompt}\n//           </button>\n//           <div\n//             style={{\n//               display: 'flex',\n//               justifyContent: 'center',\n//               alignItems: 'flex-end',\n//               marginTop: '2rem',\n//             }}\n//           >\n//             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem' }}>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(0, 0)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(0, 0)}\n//               </div>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(0, 1)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(0, 1)}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default withStreamlitConnection(MyComponent);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}