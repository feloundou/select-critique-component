{"ast":null,"code":"var _jsxFileName = \"/Users/tyna/code/select_critique_package/my_component/frontend/src/MyComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { StreamlitComponentBase, withStreamlitConnection } from 'streamlit-component-lib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst customContainer = {\n  width: '100%',\n  maxWidth: '100%',\n  minHeight: '1000px'\n};\nconst ChoicePair = _ref => {\n  _s();\n  let {\n    level,\n    index,\n    content,\n    updateTree,\n    critiques,\n    visible\n  } = _ref;\n  const [clicked, setClicked] = useState([false, false]);\n  const [textInput, setTextInput] = useState('');\n  const handleClick = btnIndex => {\n    const newClickedState = clicked.map((c, i) => i === btnIndex);\n    setClicked(newClickedState);\n    setTextInput('');\n  };\n  const handleTextInputChange = e => {\n    setTextInput(e.target.value);\n  };\n  const handleButtonClick = () => {\n    updateTree(level, index, textInput);\n    setTextInput('');\n  };\n  if (!visible) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"choice-pair\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: content.map((btnContent, btnIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-column align-items-center\",\n        style: {\n          marginRight: btnIndex === 0 ? '2rem' : undefined,\n          marginLeft: btnIndex === 1 ? '2rem' : undefined\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleClick(btnIndex),\n          className: `btn btn-${clicked[btnIndex] ? 'secondary' : 'primary'} my-1`,\n          style: {\n            marginBottom: '1.5rem',\n            whiteSpace: 'normal',\n            width: '12rem'\n          },\n          children: btnContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            minHeight: '1.5rem'\n          },\n          children: !clicked[btnIndex] && clicked[1 - btnIndex] && /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: 'white',\n              fontStyle: 'italic'\n            },\n            children: \"This response was not selected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), clicked[btnIndex] && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: \"100\",\n          defaultValue: \"50\",\n          style: {\n            width: '150px',\n            marginBottom: '1rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this), clicked[btnIndex] && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group mb-3\",\n          style: {\n            marginTop: '1rem',\n            width: '300px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            placeholder: \"Enter your commentary\",\n            value: textInput,\n            onChange: handleTextInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            type: \"button\",\n            onClick: handleButtonClick,\n            children: \"Critique\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this)]\n      }, btnIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(ChoicePair, \"36EQJWcKiwEl58NR7KQPxQJF5ak=\");\n_c = ChoicePair;\nclass MyComponent extends StreamlitComponentBase {\n  constructor(props) {\n    super(props);\n    this.updateTree = (level, index, textInput) => {\n      const tree = JSON.parse(JSON.stringify(this.state.tree));\n      const critiques = JSON.parse(JSON.stringify(this.state.critiques));\n      const clicked = JSON.parse(JSON.stringify(this.state.clicked));\n      const newNode = {\n        level: level + 1,\n        index: tree.length,\n        content: [`Level ${level + 1}, Index ${index * 2} response`, `Level ${level + 1}, Index ${index * 2 + 1} response`],\n        children: []\n      };\n\n      // Store the critique in the critiques dictionary\n      critiques[`${level}_${index}`] = textInput;\n\n      // Update the clicked state at the current level\n      clicked[level] = index;\n      tree.push(newNode);\n      this.setState({\n        tree,\n        critiques,\n        clicked\n      });\n    };\n    this.state = {\n      tree: [{\n        level: 0,\n        index: 0,\n        content: ['Because God said so', 'Because of Raleigh scattering'],\n        children: []\n      }],\n      critiques: {},\n      clicked: [0] // Add an array to store the clicked state at each level\n    };\n  }\n\n  render() {\n    const {\n      tree,\n      critiques,\n      clicked\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      style: customContainer,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          marginTop: '2rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: '#007bff',\n            border: '1px solid #007bff',\n            borderRadius: '4px',\n            color: 'white',\n            padding: '0.5rem 1rem',\n            margin: '1rem',\n            pointerEvents: 'none'\n          },\n          children: \"Why is the sky blue?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: tree.map((node, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(ChoicePair, {\n              level: node.level,\n              index: node.index,\n              content: node.content,\n              updateTree: this.updateTree,\n              critiques: critiques,\n              visible: clicked[node.level] === node.index\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }, this), index < tree.length - 1 && /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 45\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default _c2 = withStreamlitConnection(MyComponent);\n\n// import React, { useState } from 'react';\n// import {\n//   Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// const customContainer = {\n//   width: '100%',\n//   maxWidth: '100%',\n//   minHeight: '1000px',\n// };\n\n// type ChoicePairProps = {\n//   level: number;\n//   index: number;\n//   content: string[];\n//   updateTree: (level: number, index: number, textInput: string) => void;\n// };\n\n// const ChoicePair: React.FC<ChoicePairProps> = ({\n//   level,\n//   index,\n//   content,\n//   updateTree,\n// }) => {\n//   const [clicked, setClicked] = useState<boolean[]>([false, false]);\n//   const [textInput, setTextInput] = useState<string>('');\n\n//   const handleClick = (btnIndex: number) => {\n//     const newClickedState = clicked.map((c, i) => i === btnIndex);\n//     setClicked(newClickedState);\n//     setTextInput('');\n//   };\n\n//   const handleTextInputChange = (\n//     e: React.ChangeEvent<HTMLInputElement>\n//   ) => {\n//     setTextInput(e.target.value);\n//   };\n\n//   const handleButtonClick = () => {\n//     updateTree(level, index, textInput);\n//     setTextInput('');\n//   };\n\n//   return (\n//     <div className=\"choice-pair\">\n//       <div style={{ display: 'flex', justifyContent: 'center' }}>\n//         {content.map((btnContent, btnIndex) => (\n//           <div\n//             key={btnIndex}\n//             className=\"d-flex flex-column align-items-center\"\n//             style={{\n//               marginRight: btnIndex === 0 ? '2rem' : undefined,\n//               marginLeft: btnIndex === 1 ? '2rem' : undefined,\n//             }}\n//           >\n//             <button\n//               onClick={() => handleClick(btnIndex)}\n//               className={`btn btn-${clicked[btnIndex] ? 'secondary' : 'primary'\n//                 } my-1`}\n//               style={{\n//                 marginBottom: '1.5rem',\n//                 whiteSpace: 'normal',\n//                 width: '12rem',\n//               }}\n//             >\n//               {btnContent}\n//             </button>\n//             <div\n//               style={{\n//                 display: 'flex',\n//                 justifyContent: 'center',\n//                 alignItems: 'center',\n//                 minHeight: '1.5rem',\n//               }}\n//             >\n//               {!clicked[btnIndex] && clicked[1 - btnIndex] && (\n//                 <span style={{ color: 'white', fontStyle: 'italic' }}>\n//                   This response was not selected\n//                 </span>\n//               )}\n//             </div>\n//             {clicked[btnIndex] && (\n//               <input\n//                 type=\"range\"\n//                 min=\"0\"\n//                 max=\"100\"\n//                 defaultValue=\"50\"\n//                 style={{ width: '150px', marginBottom: '1rem' }}\n//               />\n//             )}\n//             {clicked[btnIndex] && (\n//               <div\n//                 className=\"input-group mb-3\"\n//                 style={{ marginTop: '1rem', width: '300px' }}\n//               >\n//                 <input\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   placeholder=\"Enter your commentary\"\n//                   value={textInput}\n//                   onChange={handleTextInputChange}\n//                 />\n//                 <button\n//                   className=\"btn btn-primary\"\n//                   type=\"button\"\n//                   onClick={handleButtonClick}\n//                 >\n//                   Critique\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// type Node = {\n//   level: number;\n//   index: number;\n//   content: string[];\n//   children: any[];\n// };\n\n// type MyComponentState = {\n//   tree: Node[];\n//   critiques: { [key: string]: string };\n// };\n\n// class MyComponent extends StreamlitComponentBase<MyComponentState> {\n//   constructor(props: any) {\n//     super(props);\n\n//     this.state = {\n//       tree: [\n//         {\n//           level: 0,\n//           index: 0,\n//           content: [\n//             'Because God said so',\n//             'Because of Rayleigh scattering',\n//           ],\n//           children: [],\n//         },\n//       ],\n//       critiques: {},\n//     };\n//   }\n\n//   updateTree = (level: number, index: number, textInput: string) => {\n//     const tree = JSON.parse(JSON.stringify(this.state.tree)) as Node[];\n\n//     const key = `L${level}I${index}`;\n//     const critiques = { ...this.state.critiques, [key]: textInput };\n\n//     const newNode: Node = {\n//       level: level + 1,\n//       index: tree.length,\n//       content: [\n//         `Level ${level + 1}, Index ${index * 2} response: ${textInput}`,\n//         `Level ${level + 1}, Index ${index * 2 + 1} response: ${textInput}`,\n//       ],\n//       children: [],\n//     };\n\n//     tree.push(newNode);\n//     this.setState({ tree, critiques });\n//   };\n\n//   render() {\n//     const { tree } = this.state;\n\n//     return (\n//       <div className=\"container\" style={customContainer}>\n//         <div\n//           style={{\n//             display: 'flex',\n//             flexDirection: 'column',\n//             alignItems: 'center',\n//             marginTop: '2rem',\n//           }}\n//         >\n//           <button\n//             style={{\n//               backgroundColor: '#007bff',\n//               border: '1px solid #007bff',\n//               borderRadius: '4px',\n//               color: 'white',\n//               padding: '0.5rem 1rem',\n//               margin: '1rem',\n//               pointerEvents: 'none',\n//             }}\n//           >\n//             Why is the sky blue?\n//           </button>\n//           <div>\n//             {tree.map((node, index) => (\n//               <div key={index}>\n//                 <ChoicePair\n//                   level={node.level}\n//                   index={node.index}\n//                   content={node.content}\n//                   updateTree={this.updateTree}\n//                 />\n//                 {index < tree.length - 1 && <hr />}\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default withStreamlitConnection(MyComponent);\n\n// import React, { useState } from 'react';\n// import {\n//   Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// const customContainer = {\n//   width: '100%',\n//   maxWidth: '100%',\n//   minHeight: '1000px',\n// };\n\n// type ChoicePairProps = {\n//   level: number;\n//   index: number;\n//   content: string[];\n//   updateTree: (level: number, index: number, textInput: string) => void;\n// };\n\n// const ChoicePair: React.FC<ChoicePairProps> = ({\n//   level,\n//   index,\n//   content,\n//   updateTree,\n// }) => {\n//   const [clicked, setClicked] = useState<boolean[]>([false, false]);\n//   const [textInput, setTextInput] = useState<string>('');\n\n//   const handleClick = (btnIndex: number) => {\n//     const newClickedState = clicked.map((c, i) => i === btnIndex);\n//     setClicked(newClickedState);\n//     setTextInput('');\n//   };\n\n//   const handleTextInputChange = (\n//     e: React.ChangeEvent<HTMLInputElement>\n//   ) => {\n//     setTextInput(e.target.value);\n//   };\n\n//   const handleButtonClick = () => {\n//     updateTree(level, index, textInput);\n//     setTextInput('');\n//   };\n\n//   return (\n//     <div className=\"choice-pair\">\n//       <div style={{ display: 'flex', justifyContent: 'center' }}>\n//         {content.map((btnContent, btnIndex) => (\n//           <div\n//             key={btnIndex}\n//             className=\"d-flex flex-column align-items-center\"\n//             style={{\n//               marginRight: btnIndex === 0 ? '2rem' : undefined,\n//               marginLeft: btnIndex === 1 ? '2rem' : undefined,\n//             }}\n//           >\n//             <button\n//               onClick={() => handleClick(btnIndex)}\n//               className={`btn btn-${clicked[btnIndex] ? 'secondary' : 'primary'} my-1`}\n//               style={{\n//                 marginBottom: '1.5rem',\n//                 whiteSpace: 'normal',\n//                 width: '12rem',\n//               }}\n//             >\n//               {btnContent}\n//             </button>\n//             <div\n//               style={{\n//                 display: 'flex',\n//                 justifyContent: 'center',\n//                 alignItems: 'center',\n//                 minHeight: '1.5rem',\n//               }}\n//             >\n//               {!clicked[btnIndex] && clicked[1 - btnIndex] && (\n//                 <span style={{ color: 'white', fontStyle: 'italic' }}>\n//                   This response was not selected\n//                 </span>\n//               )}\n//             </div>\n//             {clicked[btnIndex] && (\n//               <input\n//                 type=\"range\"\n//                 min=\"0\"\n//                 max=\"100\"\n//                 defaultValue=\"50\"\n//                 style={{ width: '150px', marginBottom: '1rem' }}\n//               />\n//             )}\n//             {clicked[btnIndex] && (\n//               <div\n//                 className=\"input-group mb-3\"\n//                 style={{ marginTop: '1rem', width: '300px' }}\n//               >\n//                 <input\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   placeholder=\"Enter your commentary\"\n//                   value={textInput}\n//                   onChange={handleTextInputChange}\n//                 />\n//                 <button\n//                   className=\"btn btn-primary\"\n//                   type=\"button\"\n//                   onClick={handleButtonClick}\n//                 >\n//                   Critique\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// type Node = {\n//   level: number;\n//   index: number;\n//   content: string[];\n//   children: any[]; // Update with the proper type if possible.\n// };\n\n// type MyComponentState = {\n//   tree: Node[];\n// };\n\n// class MyComponent extends StreamlitComponentBase<MyComponentState> {\n//   constructor(props: any) {\n//     super(props);\n\n//     this.state = {\n//       tree: [\n//         {\n//           level: 0,\n//           index: 0,\n//           content: [\n//             'Because God said so',\n//             'Because of Raleigh scattering',\n//           ],\n//           children: [],\n//         },\n//       ],\n//     };\n//   }\n\n//   updateTree = (level: number, index: number, textInput: string) => {\n//     const tree = JSON.parse(JSON.stringify(this.state.tree)) as Node[];\n\n//     const newNode: Node = {\n//       level: level + 1,\n//       index: tree.length,\n//       content: [\n//         `Level ${level + 1}, Index ${index * 2} response: ${textInput}`,\n//         `Level ${level + 1}, Index ${index * 2 + 1} response: ${textInput}`,\n//       ],\n//       children: [],\n//     };\n\n//     tree.push(newNode);\n//     this.setState({ tree });\n//   };\n\n//   render() {\n//     const { tree } = this.state;\n\n//     return (\n//       <div className=\"container\" style={customContainer}>\n//         <div\n//           style={{\n//             display: 'flex',\n//             flexDirection: 'column',\n//             alignItems: 'center',\n//             marginTop: '2rem',\n//           }}\n//         >\n//           <button\n//             style={{\n//               backgroundColor: '#007bff',\n//               border: '1px solid #007bff',\n//               borderRadius: '4px',\n//               color: 'white',\n//               padding: '0.5rem 1rem',\n//               margin: '1rem',\n//               pointerEvents: 'none',\n//             }}\n//           >\n//             Why is the sky blue?\n//           </button>\n//           <div>\n//             {tree.map((node, index) => (\n//               <div key={index}>\n//                 <ChoicePair\n//                   level={node.level}\n//                   index={node.index}\n//                   content={node.content}\n//                   updateTree={this.updateTree}\n//                 />\n//                 {index < tree.length - 1 && <hr />}\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default withStreamlitConnection(MyComponent);\n\n// // // import React, { ReactNode } from 'react';\n// // // import {\n// // //     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// // // } from 'streamlit-component-lib';\n\n// // // interface State {\n// // //   prompt: string;\n// // //   tree: (string | string[][])[][];\n// // //   clicked: boolean[][];\n// // // }\n\n// // // const customContainer = {\n// // //   width: '100%',\n// // //   maxWidth: '100%',\n// // //   minHeight: '1000px',\n// // // };\n\n// // // class MyComponent extends StreamlitComponentBase<State> {\n// // //   public state: State = {\n// // //     prompt: 'Why is the sky blue?',\n// // //     tree: [\n// // //       [\n// // //         ['Because God said so', []],\n// // //         ['Because of Raleigh scattering', []],\n// // //       ],\n// // //     ],\n// // //     clicked: [],\n// // //   };\n\n// // //   private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n// // //     const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// // //     tree[level] = tree[level] || [];\n// // //     tree[level][index] = [text, newNodes];\n// // //     this.setState({ tree });\n// // //   };\n\n// // //   private handleClick = (level: number, index: number) => {\n// // //     const clicked = JSON.parse(JSON.stringify(this.state.clicked)) as boolean[][];\n// // //     clicked[level] = clicked[level] || [];\n\n// // //     if (clicked[level][index]) {\n// // //       clicked[level][index] = false;\n// // //     } else {\n// // //       clicked[level][index] = true;\n// // //       clicked[level][1 - index] = false;\n// // //     }\n\n// // //     this.setState({ clicked }, () => {\n// // //       // If a button is unclicked, clear the input field associated with that button\n// // //       const unclickedInput = document.getElementById(\n// // //         `inputDefault_${level}_${index}`\n// // //       ) as HTMLInputElement;\n// // //       if (unclickedInput) {\n// // //         unclickedInput.value = '';\n// // //       }\n// // //     });\n// // //   };\n\n// // //   private renderNode = (level: number, index: number) => {\n// // //     const content = this.state.tree[level]?.[index]?.[0];\n// // //     const isClicked = this.state.clicked[level]?.[index];\n// // //     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n// // //     if (content) {\n// // //       return (\n// // //         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n// // //           <button\n// // //             onClick={() => {\n// // //               this.handleClick(level, index);\n// // //             }}\n// // //             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n// // //             style={{ marginBottom: '1.5rem', whiteSpace: 'normal', width: '12rem' }}\n// // //           >\n// // //             {content}\n// // //           </button>\n// // //           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n// // //             {!isClicked && otherButtonClicked && (\n// // //               <span style={{ color: 'white', fontStyle: 'italic' }}>\n// // //                 This response was not selected\n// // //               </span>\n// // //             )}\n// // //           </div>\n// // //         </div>\n// // //       );\n// // //     }\n// // //     return null;\n// // //   };\n\n// // //   private generateNewNodes = (level: number, index: number) => {\n// // //     if (level === 0) {\n// // //       if (index === 0) {\n// // //         return [\n// // //           [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n// // //           [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n// // //         ];\n// // //       } else {\n// // //         return [\n// // //           [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n// // //           [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n// // //         ];\n// // //       }\n// // //     } else {\n// // //       return [\n// // //         [`Level ${level + 1}, Index ${index * 2} response`],\n// // //         [`Level ${level + 1}, Index ${index * 2 + 1} response`]\n// // //       ];\n// // //     }\n// // //   };\n\n// // //   private renderTextInput = (level: number, index: number) => {\n// // //     const isClicked = this.state.clicked[level]?.[index];\n\n// // //     const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n// // //       if (event.key === 'Enter') {\n// // //         const commentary = event.currentTarget.value;\n// // //         this.handleClick(level, index);\n\n// // //         // Generate new nodes without modifying the current node text\n// // //         const newNodes = this.generateNewNodes(level, index);\n\n// // //         this.addToTree(level + 1, index * 2, newNodes[0][0], []);\n// // //         this.addToTree(level + 1, index * 2 + 1, newNodes[1][0], []);\n// // //       }\n// // //     };\n\n// // //     const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n// // //       const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n\n// // //       const clicked = [...this.state.clicked] as boolean[][];\n// // //       clicked[level] = clicked[level] || [];\n// // //       clicked[level][index] = true;\n// // //       clicked[level][1 - index] = false;\n\n// // //       const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n\n// // //       let newNodes: string[][] = [];\n\n// // //       if (level === 0) {\n// // //         if (index === 0) {\n// // //           newNodes = [\n// // //             [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n// // //             [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n// // //           ];\n// // //         } else {\n// // //           newNodes = [\n// // //             [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n// // //             [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n// // //           ];\n// // //         }\n// // //       } else {\n// // //         newNodes = [\n// // //           [`Level ${level + 1}, Index ${index * 2} response`],\n// // //           [`Level ${level + 1}, Index ${index * 2 + 1} response`]\n// // //         ];\n// // //       }\n\n// // //       tree[level + 1] = tree[level + 1] || [];\n// // //       tree[level + 1][index * 2] = [newNodes[0][0], []];\n// // //       tree[level + 1][index * 2 + 1] = [newNodes[1][0], []];\n\n// // //       this.setState({ clicked, tree });\n// // //     };\n\n// // //     if (isClicked) {\n// // //       return (\n// // //         <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n// // //           <input\n// // //             type=\"text\"\n// // //             className=\"form-control\"\n// // //             placeholder=\"Enter your commentary\"\n// // //             id={`inputDefault_${level}_${index}`}\n// // //             onKeyPress={handleKeyPress}\n// // //           />\n// // //           <button\n// // //             className=\"btn btn-primary\"\n// // //             type=\"button\"\n// // //             id={`button-addon2_${level}_${index}`}\n// // //             onClick={handleButtonClick} // Add this line back\n// // //           >\n// // //             Critique\n// // //           </button>\n// // //         </div>\n// // //       );\n// // //     }\n// // //     return null;\n// // //   };\n\n// // //   public render = (): ReactNode => {\n// // //     const renderDividerAndNewNodes = (level: number, index: number) => {\n// // //       const isClicked = this.state.clicked[level]?.[index];\n// // //       const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n// // //       if (isClicked && newNodesExist) {\n// // //         return (\n// // //           <React.Fragment>\n// // //             <hr />\n// // //             <div\n// // //               style={{\n// // //                 display: 'flex',\n// // //                 justifyContent: 'center',\n// // //                 alignItems: 'flex-end',\n// // //                 marginTop: '2rem',\n// // //                 flexWrap: 'wrap',\n// // //               }}\n// // //             >\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(level + 1, index * 2)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(level + 1, index * 2)}\n// // //               </div>\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(level + 1, index * 2 + 1)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(level + 1, index * 2 + 1)}\n// // //               </div>\n// // //             </div>\n// // //           </React.Fragment>\n// // //         );\n// // //       }\n// // //       return null;\n// // //     };\n\n// // //     return (\n// // //       <div className=\"container\" style={customContainer}>\n// // //         <div\n// // //           style={{\n// // //             display: 'flex',\n// // //             flexDirection: 'column',\n// // //             alignItems: 'center',\n// // //             marginTop: '2rem',\n// // //           }}\n// // //         >\n// // //           <button\n// // //             style={{\n// // //               backgroundColor: '#007bff',\n// // //               border: '1px solid #007bff',\n// // //               borderRadius: '4px',\n// // //               color: 'white',\n// // //               padding: '0.5rem 1rem',\n// // //               margin: '1rem',\n// // //               pointerEvents: 'none',\n// // //             }}\n// // //           >\n// // //             {this.state.prompt}\n// // //           </button>\n// // //           <div\n// // //             style={{\n// // //               display: 'flex',\n// // //               justifyContent: 'center',\n// // //               alignItems: 'flex-end',\n// // //               marginTop: '2rem',\n// // //               flexWrap: 'wrap',\n// // //             }}\n// // //           >\n// // //             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem', flexWrap: 'wrap' }}>\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(0, 0)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(0, 0)}\n// // //                 {renderDividerAndNewNodes(0, 0)}\n// // //               </div>\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(0, 1)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(0, 1)}\n// // //                 {renderDividerAndNewNodes(0, 1)}\n// // //               </div>\n// // //             </div>\n// // //           </div>\n// // //         </div>\n// // //       </div>\n// // //     );\n// // //   };\n// // // }\n\n// // // export default withStreamlitConnection(MyComponent);\n\n// // // // // import React, { ReactNode } from 'react';\n// // // // // import {\n// // // // //     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// // // // // } from 'streamlit-component-lib';\n\n// // // // // interface State {\n// // // // //   prompt: string;\n// // // // //   tree: (string | string[][])[][];\n// // // // //   clicked: boolean[][];\n// // // // // }\n\n// // // // // const customContainer = {\n// // // // //   width: '100%',\n// // // // //   maxWidth: '100%',\n// // // // //   minHeight: '1000px',\n// // // // // };\n\n// // // // // class MyComponent extends StreamlitComponentBase<State> {\n// // // // //   public state: State = {\n// // // // //     prompt: 'Why is the sky blue?',\n// // // // //     tree: [\n// // // // //       [\n// // // // //         ['Because God said so', []],\n// // // // //         ['Because of Raleigh scattering', []],\n// // // // //       ],\n// // // // //     ],\n// // // // //     clicked: [],\n// // // // //   };\n\n// // // // //   private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n// // // // //     const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// // // // //     tree[level] = tree[level] || [];\n// // // // //     tree[level][index] = [text, newNodes];\n// // // // //     this.setState({ tree });\n// // // // //   };\n\n// // // // //   private handleClick = (level: number, index: number) => {\n// // // // //     const clicked = [...this.state.clicked] as boolean[][];\n// // // // //     clicked[level] = clicked[level] || [];\n// // // // //     clicked[level][index] = true;\n// // // // //     clicked[level][1 - index] = false;\n// // // // //     this.setState({ clicked });\n// // // // //   };\n\n// // // // //   private renderNode = (level: number, index: number) => {\n// // // // //     const content = this.state.tree[level]?.[index]?.[0];\n// // // // //     const isClicked = this.state.clicked[level]?.[index];\n// // // // //     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n// // // // //     if (content) {\n// // // // //       return (\n// // // // //         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n// // // // //           <button\n// // // // //             onClick={() => {\n// // // // //               this.handleClick(level, index);\n// // // // //             }}\n// // // // //             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n// // // // //             style={{ marginBottom: '1.5rem', whiteSpace: 'normal', width: '12rem' }} // Add white-space and width styles\n// // // // //           >\n// // // // //             {content}\n// // // // //           </button>\n// // // // //           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n// // // // //             {!isClicked && otherButtonClicked && (\n// // // // //               <span style={{ color: 'white', fontStyle: 'italic' }}>\n// // // // //                 This response was not selected\n// // // // //               </span>\n// // // // //             )}\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       );\n// // // // //     }\n// // // // //     return null;\n// // // // //   };\n\n// // // // //   private renderTextInput = (level: number, index: number) => {\n// // // // //     const isClicked = this.state.clicked[level]?.[index];\n\n// // // // //     const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n// // // // //       if (event.key === 'Enter') {\n// // // // //         const commentary = event.currentTarget.value;\n// // // // //         this.handleClick(level, index);\n// // // // //         this.addToTree(level + 1, index * 2, commentary, []);\n// // // // //       }\n// // // // //     };\n\n// // // // //     const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n// // // // //       const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n\n// // // // //       const clicked = [...this.state.clicked] as boolean[][];\n// // // // //       clicked[level] = clicked[level] || [];\n// // // // //       clicked[level][index] = true;\n// // // // //       clicked[level][1 - index] = false;\n\n// // // // //       const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// // // // //       const newNodes = level === 0\n// // // // //         ? index === 0\n// // // // //           ? [\n// // // // //             [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n// // // // //             [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n// // // // //           ]\n// // // // //           : [\n// // // // //             [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n// // // // //             [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n// // // // //           ]\n// // // // //         : []; // For deeper levels, you can add more new nodes here\n\n// // // // //       tree[level + 1] = tree[level + 1] || [];\n// // // // //       tree[level + 1][index * 2] = [newNodes[0], []];\n// // // // //       tree[level + 1][index * 2 + 1] = [newNodes[1], []];\n\n// // // // //       this.setState({ clicked, tree });\n// // // // //     };\n\n// // // // //     if (isClicked) {\n// // // // //       return (\n// // // // //         <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n// // // // //           <input\n// // // // //             type=\"text\"\n// // // // //             className=\"form-control\"\n// // // // //             placeholder=\"Enter your commentary\"\n// // // // //             id={`inputDefault_${level}_${index}`}\n// // // // //             onKeyPress={handleKeyPress}\n// // // // //           />\n// // // // //           <button\n// // // // //             className=\"btn btn-primary\"\n// // // // //             type=\"button\"\n// // // // //             id={`button-addon2_${level}_${index}`}\n// // // // //             onClick={handleButtonClick}\n// // // // //           >\n// // // // //             Critique\n// // // // //           </button>\n// // // // //         </div>\n// // // // //       );\n// // // // //     }\n// // // // //     return null;\n// // // // //   };\n\n// // // // //   public render = (): ReactNode => {\n// // // // //     const renderDividerAndNewNodes = (level: number, index: number) => {\n// // // // //       const isClicked = this.state.clicked[level]?.[index];\n// // // // //       const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n// // // // //       if (isClicked && newNodesExist) {\n// // // // //         return (\n// // // // //           <React.Fragment>\n// // // // //             <hr />\n// // // // //             <div\n// // // // //               style={{\n// // // // //                 display: 'flex',\n// // // // //                 justifyContent: 'center',\n// // // // //                 alignItems: 'flex-end',\n// // // // //                 marginTop: '2rem',\n// // // // //                 flexWrap: 'wrap', // Add flex-wrap style\n// // // // //               }}\n// // // // //             >\n// // // // //               <div className=\"d-flex flex-column align-items-center\">\n// // // // //                 {this.renderNode(level + 1, index * 2)}\n// // // // //                 <input\n// // // // //                   type=\"range\"\n// // // // //                   min=\"0\"\n// // // // //                   max=\"100\"\n// // // // //                   defaultValue=\"50\"\n// // // // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // // // //                 />\n// // // // //                 {this.renderTextInput(level + 1, index * 2)}\n// // // // //               </div>\n// // // // //               <div className=\"d-flex flex-column align-items-center\">\n// // // // //                 {this.renderNode(level + 1, index * 2 + 1)}\n// // // // //                 <input\n// // // // //                   type=\"range\"\n// // // // //                   min=\"0\"\n// // // // //                   max=\"100\"\n// // // // //                   defaultValue=\"50\"\n// // // // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // // // //                 />\n// // // // //                 {this.renderTextInput(level + 1, index * 2 + 1)}\n// // // // //               </div>\n// // // // //             </div>\n// // // // //           </React.Fragment>\n// // // // //         );\n// // // // //       }\n// // // // //       return null;\n// // // // //     };\n\n// // // // //     return (\n// // // // //       <div className=\"container\" style={customContainer}>\n// // // // //         <div\n// // // // //           style={{\n// // // // //             display: 'flex',\n// // // // //             flexDirection: 'column',\n// // // // //             alignItems: 'center',\n// // // // //             marginTop: '2rem',\n// // // // //           }}\n// // // // //         >\n// // // // //           <button\n// // // // //             style={{\n// // // // //               backgroundColor: '#007bff',\n// // // // //               border: '1px solid #007bff',\n// // // // //               borderRadius: '4px',\n// // // // //               color: 'white',\n// // // // //               padding: '0.5rem 1rem',\n// // // // //               margin: '1rem',\n// // // // //               pointerEvents: 'none',\n// // // // //             }}\n// // // // //           >\n// // // // //             {this.state.prompt}\n// // // // //           </button>\n// // // // //           <div\n// // // // //             style={{\n// // // // //               display: 'flex',\n// // // // //               justifyContent: 'center',\n// // // // //               alignItems: 'flex-end',\n// // // // //               marginTop: '2rem',\n// // // // //               flexWrap: 'wrap', // Add flex-wrap style\n// // // // //             }}\n// // // // //           >\n// // // // //             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem', flexWrap: 'wrap' }}>\n// // // // //               <div className=\"d-flex flex-column align-items-center\">\n// // // // //                 {this.renderNode(0, 0)}\n// // // // //                 <input\n// // // // //                   type=\"range\"\n// // // // //                   min=\"0\"\n// // // // //                   max=\"100\"\n// // // // //                   defaultValue=\"50\"\n// // // // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // // // //                 />\n// // // // //                 {this.renderTextInput(0, 0)}\n// // // // //                 {renderDividerAndNewNodes(0, 0)}\n// // // // //               </div>\n// // // // //               <div className=\"d-flex flex-column align-items-center\">\n// // // // //                 {this.renderNode(0, 1)}\n// // // // //                 <input\n// // // // //                   type=\"range\"\n// // // // //                   min=\"0\"\n// // // // //                   max=\"100\"\n// // // // //                   defaultValue=\"50\"\n// // // // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // // // //                 />\n// // // // //                 {this.renderTextInput(0, 1)}\n// // // // //                 {renderDividerAndNewNodes(0, 1)}\n// // // // //               </div>\n// // // // //             </div>\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       </div>\n// // // // //     );\n// // // // //   };\n// // // // // }\n\n// // // // // export default withStreamlitConnection(MyComponent);\nvar _c, _c2;\n$RefreshReg$(_c, \"ChoicePair\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","StreamlitComponentBase","withStreamlitConnection","jsxDEV","_jsxDEV","customContainer","width","maxWidth","minHeight","ChoicePair","_ref","_s","level","index","content","updateTree","critiques","visible","clicked","setClicked","textInput","setTextInput","handleClick","btnIndex","newClickedState","map","c","i","handleTextInputChange","e","target","value","handleButtonClick","className","children","style","display","justifyContent","btnContent","marginRight","undefined","marginLeft","onClick","marginBottom","whiteSpace","fileName","_jsxFileName","lineNumber","columnNumber","alignItems","color","fontStyle","type","min","max","defaultValue","marginTop","placeholder","onChange","_c","MyComponent","constructor","props","tree","JSON","parse","stringify","state","newNode","length","push","setState","render","flexDirection","backgroundColor","border","borderRadius","padding","margin","pointerEvents","node","_c2","$RefreshReg$"],"sources":["/Users/tyna/code/select_critique_package/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Streamlit, StreamlitComponentBase, withStreamlitConnection\n} from 'streamlit-component-lib';\n\nconst customContainer = {\n  width: '100%',\n  maxWidth: '100%',\n  minHeight: '1000px',\n};\n\ntype ChoicePairProps = {\n  level: number;\n  index: number;\n  content: string[];\n  updateTree: (level: number, index: number, critique: string) => void;\n  critiques: { [key: string]: string };\n  visible: boolean;\n};\n\nconst ChoicePair: React.FC<ChoicePairProps> = ({\n  level,\n  index,\n  content,\n  updateTree,\n  critiques,\n  visible,\n}) => {\n  const [clicked, setClicked] = useState<boolean[]>([false, false]);\n  const [textInput, setTextInput] = useState<string>('');\n\n  const handleClick = (btnIndex: number) => {\n    const newClickedState = clicked.map((c, i) => i === btnIndex);\n    setClicked(newClickedState);\n    setTextInput('');\n  };\n\n  const handleTextInputChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setTextInput(e.target.value);\n  };\n\n  const handleButtonClick = () => {\n    updateTree(level, index, textInput);\n    setTextInput('');\n  };\n\n  if (!visible) {\n    return null;\n  }\n\n  return (\n    <div className=\"choice-pair\">\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\n        {content.map((btnContent, btnIndex) => (\n          <div\n            key={btnIndex}\n            className=\"d-flex flex-column align-items-center\"\n            style={{\n              marginRight: btnIndex === 0 ? '2rem' : undefined,\n              marginLeft: btnIndex === 1 ? '2rem' : undefined,\n            }}\n          >\n            <button\n              onClick={() => handleClick(btnIndex)}\n              className={`btn btn-${clicked[btnIndex] ? 'secondary' : 'primary'\n                } my-1`}\n              style={{\n                marginBottom: '1.5rem',\n                whiteSpace: 'normal',\n                width: '12rem',\n              }}\n            >\n              {btnContent}\n            </button>\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                minHeight: '1.5rem',\n              }}\n            >\n              {!clicked[btnIndex] && clicked[1 - btnIndex] && (\n                <span style={{ color: 'white', fontStyle: 'italic' }}>\n                  This response was not selected\n                </span>\n              )}\n            </div>\n            {clicked[btnIndex] && (\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                defaultValue=\"50\"\n                style={{ width: '150px', marginBottom: '1rem' }}\n              />\n            )}\n            {clicked[btnIndex] && (\n              <div\n                className=\"input-group mb-3\"\n                style={{ marginTop: '1rem', width: '300px' }}\n              >\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Enter your commentary\"\n                  value={textInput}\n                  onChange={handleTextInputChange}\n                />\n                <button\n                  className=\"btn btn-primary\"\n                  type=\"button\"\n                  onClick={handleButtonClick}\n                >\n                  Critique\n                </button>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\ntype Node = {\n  level: number;\n  index: number;\n  content: string[];\n  children: any[]; // Update with the proper type if possible.\n};\n\ntype MyComponentState = {\n  tree: Node[];\n  critiques: { [key: string]: string };\n  clicked: number[];\n};\n\nclass MyComponent extends StreamlitComponentBase<MyComponentState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      tree: [\n        {\n          level: 0,\n          index: 0,\n          content: [\n            'Because God said so',\n            'Because of Raleigh scattering',\n          ],\n          children: [],\n        },\n      ],\n      critiques: {},\n      clicked: [0], // Add an array to store the clicked state at each level\n    };\n  }\n\n  updateTree = (level: number, index: number, textInput: string) => {\n    const tree = JSON.parse(JSON.stringify(this.state.tree)) as Node[];\n    const critiques = JSON.parse(JSON.stringify(this.state.critiques));\n    const clicked = JSON.parse(JSON.stringify(this.state.clicked));\n\n    const newNode: Node = {\n      level: level + 1,\n      index: tree.length,\n      content: [\n        `Level ${level + 1}, Index ${index * 2} response`,\n        `Level ${level + 1}, Index ${index * 2 + 1} response`,\n      ],\n      children: [],\n    };\n\n    // Store the critique in the critiques dictionary\n    critiques[`${level}_${index}`] = textInput;\n\n    // Update the clicked state at the current level\n    clicked[level] = index;\n\n    tree.push(newNode);\n    this.setState({ tree, critiques, clicked });\n  };\n\n  render() {\n    const { tree, critiques, clicked } = this.state;\n\n    return (\n      <div className=\"container\" style={customContainer}>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            marginTop: '2rem',\n          }}\n        >\n          <button\n            style={{\n              backgroundColor: '#007bff',\n              border: '1px solid #007bff',\n              borderRadius: '4px',\n              color: 'white',\n              padding: '0.5rem 1rem',\n              margin: '1rem',\n              pointerEvents: 'none',\n            }}\n          >\n            Why is the sky blue?\n          </button>\n          <div>\n            {tree.map((node, index) => (\n              <div key={index}>\n                <ChoicePair\n                  level={node.level}\n                  index={node.index}\n                  content={node.content}\n                  updateTree={this.updateTree}\n                  critiques={critiques}\n                  visible={clicked[node.level] === node.index}\n                />\n                {index < tree.length - 1 && <hr />}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStreamlitConnection(MyComponent);\n\n\n\n// import React, { useState } from 'react';\n// import {\n//   Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// const customContainer = {\n//   width: '100%',\n//   maxWidth: '100%',\n//   minHeight: '1000px',\n// };\n\n// type ChoicePairProps = {\n//   level: number;\n//   index: number;\n//   content: string[];\n//   updateTree: (level: number, index: number, textInput: string) => void;\n// };\n\n// const ChoicePair: React.FC<ChoicePairProps> = ({\n//   level,\n//   index,\n//   content,\n//   updateTree,\n// }) => {\n//   const [clicked, setClicked] = useState<boolean[]>([false, false]);\n//   const [textInput, setTextInput] = useState<string>('');\n\n//   const handleClick = (btnIndex: number) => {\n//     const newClickedState = clicked.map((c, i) => i === btnIndex);\n//     setClicked(newClickedState);\n//     setTextInput('');\n//   };\n\n//   const handleTextInputChange = (\n//     e: React.ChangeEvent<HTMLInputElement>\n//   ) => {\n//     setTextInput(e.target.value);\n//   };\n\n//   const handleButtonClick = () => {\n//     updateTree(level, index, textInput);\n//     setTextInput('');\n//   };\n\n//   return (\n//     <div className=\"choice-pair\">\n//       <div style={{ display: 'flex', justifyContent: 'center' }}>\n//         {content.map((btnContent, btnIndex) => (\n//           <div\n//             key={btnIndex}\n//             className=\"d-flex flex-column align-items-center\"\n//             style={{\n//               marginRight: btnIndex === 0 ? '2rem' : undefined,\n//               marginLeft: btnIndex === 1 ? '2rem' : undefined,\n//             }}\n//           >\n//             <button\n//               onClick={() => handleClick(btnIndex)}\n//               className={`btn btn-${clicked[btnIndex] ? 'secondary' : 'primary'\n//                 } my-1`}\n//               style={{\n//                 marginBottom: '1.5rem',\n//                 whiteSpace: 'normal',\n//                 width: '12rem',\n//               }}\n//             >\n//               {btnContent}\n//             </button>\n//             <div\n//               style={{\n//                 display: 'flex',\n//                 justifyContent: 'center',\n//                 alignItems: 'center',\n//                 minHeight: '1.5rem',\n//               }}\n//             >\n//               {!clicked[btnIndex] && clicked[1 - btnIndex] && (\n//                 <span style={{ color: 'white', fontStyle: 'italic' }}>\n//                   This response was not selected\n//                 </span>\n//               )}\n//             </div>\n//             {clicked[btnIndex] && (\n//               <input\n//                 type=\"range\"\n//                 min=\"0\"\n//                 max=\"100\"\n//                 defaultValue=\"50\"\n//                 style={{ width: '150px', marginBottom: '1rem' }}\n//               />\n//             )}\n//             {clicked[btnIndex] && (\n//               <div\n//                 className=\"input-group mb-3\"\n//                 style={{ marginTop: '1rem', width: '300px' }}\n//               >\n//                 <input\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   placeholder=\"Enter your commentary\"\n//                   value={textInput}\n//                   onChange={handleTextInputChange}\n//                 />\n//                 <button\n//                   className=\"btn btn-primary\"\n//                   type=\"button\"\n//                   onClick={handleButtonClick}\n//                 >\n//                   Critique\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// type Node = {\n//   level: number;\n//   index: number;\n//   content: string[];\n//   children: any[];\n// };\n\n// type MyComponentState = {\n//   tree: Node[];\n//   critiques: { [key: string]: string };\n// };\n\n// class MyComponent extends StreamlitComponentBase<MyComponentState> {\n//   constructor(props: any) {\n//     super(props);\n\n//     this.state = {\n//       tree: [\n//         {\n//           level: 0,\n//           index: 0,\n//           content: [\n//             'Because God said so',\n//             'Because of Rayleigh scattering',\n//           ],\n//           children: [],\n//         },\n//       ],\n//       critiques: {},\n//     };\n//   }\n\n//   updateTree = (level: number, index: number, textInput: string) => {\n//     const tree = JSON.parse(JSON.stringify(this.state.tree)) as Node[];\n\n//     const key = `L${level}I${index}`;\n//     const critiques = { ...this.state.critiques, [key]: textInput };\n\n//     const newNode: Node = {\n//       level: level + 1,\n//       index: tree.length,\n//       content: [\n//         `Level ${level + 1}, Index ${index * 2} response: ${textInput}`,\n//         `Level ${level + 1}, Index ${index * 2 + 1} response: ${textInput}`,\n//       ],\n//       children: [],\n//     };\n\n//     tree.push(newNode);\n//     this.setState({ tree, critiques });\n//   };\n\n//   render() {\n//     const { tree } = this.state;\n\n//     return (\n//       <div className=\"container\" style={customContainer}>\n//         <div\n//           style={{\n//             display: 'flex',\n//             flexDirection: 'column',\n//             alignItems: 'center',\n//             marginTop: '2rem',\n//           }}\n//         >\n//           <button\n//             style={{\n//               backgroundColor: '#007bff',\n//               border: '1px solid #007bff',\n//               borderRadius: '4px',\n//               color: 'white',\n//               padding: '0.5rem 1rem',\n//               margin: '1rem',\n//               pointerEvents: 'none',\n//             }}\n//           >\n//             Why is the sky blue?\n//           </button>\n//           <div>\n//             {tree.map((node, index) => (\n//               <div key={index}>\n//                 <ChoicePair\n//                   level={node.level}\n//                   index={node.index}\n//                   content={node.content}\n//                   updateTree={this.updateTree}\n//                 />\n//                 {index < tree.length - 1 && <hr />}\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default withStreamlitConnection(MyComponent);\n\n\n// import React, { useState } from 'react';\n// import {\n//   Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// const customContainer = {\n//   width: '100%',\n//   maxWidth: '100%',\n//   minHeight: '1000px',\n// };\n\n// type ChoicePairProps = {\n//   level: number;\n//   index: number;\n//   content: string[];\n//   updateTree: (level: number, index: number, textInput: string) => void;\n// };\n\n// const ChoicePair: React.FC<ChoicePairProps> = ({\n//   level,\n//   index,\n//   content,\n//   updateTree,\n// }) => {\n//   const [clicked, setClicked] = useState<boolean[]>([false, false]);\n//   const [textInput, setTextInput] = useState<string>('');\n\n//   const handleClick = (btnIndex: number) => {\n//     const newClickedState = clicked.map((c, i) => i === btnIndex);\n//     setClicked(newClickedState);\n//     setTextInput('');\n//   };\n\n//   const handleTextInputChange = (\n//     e: React.ChangeEvent<HTMLInputElement>\n//   ) => {\n//     setTextInput(e.target.value);\n//   };\n\n//   const handleButtonClick = () => {\n//     updateTree(level, index, textInput);\n//     setTextInput('');\n//   };\n\n//   return (\n//     <div className=\"choice-pair\">\n//       <div style={{ display: 'flex', justifyContent: 'center' }}>\n//         {content.map((btnContent, btnIndex) => (\n//           <div\n//             key={btnIndex}\n//             className=\"d-flex flex-column align-items-center\"\n//             style={{\n//               marginRight: btnIndex === 0 ? '2rem' : undefined,\n//               marginLeft: btnIndex === 1 ? '2rem' : undefined,\n//             }}\n//           >\n//             <button\n//               onClick={() => handleClick(btnIndex)}\n//               className={`btn btn-${clicked[btnIndex] ? 'secondary' : 'primary'} my-1`}\n//               style={{\n//                 marginBottom: '1.5rem',\n//                 whiteSpace: 'normal',\n//                 width: '12rem',\n//               }}\n//             >\n//               {btnContent}\n//             </button>\n//             <div\n//               style={{\n//                 display: 'flex',\n//                 justifyContent: 'center',\n//                 alignItems: 'center',\n//                 minHeight: '1.5rem',\n//               }}\n//             >\n//               {!clicked[btnIndex] && clicked[1 - btnIndex] && (\n//                 <span style={{ color: 'white', fontStyle: 'italic' }}>\n//                   This response was not selected\n//                 </span>\n//               )}\n//             </div>\n//             {clicked[btnIndex] && (\n//               <input\n//                 type=\"range\"\n//                 min=\"0\"\n//                 max=\"100\"\n//                 defaultValue=\"50\"\n//                 style={{ width: '150px', marginBottom: '1rem' }}\n//               />\n//             )}\n//             {clicked[btnIndex] && (\n//               <div\n//                 className=\"input-group mb-3\"\n//                 style={{ marginTop: '1rem', width: '300px' }}\n//               >\n//                 <input\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   placeholder=\"Enter your commentary\"\n//                   value={textInput}\n//                   onChange={handleTextInputChange}\n//                 />\n//                 <button\n//                   className=\"btn btn-primary\"\n//                   type=\"button\"\n//                   onClick={handleButtonClick}\n//                 >\n//                   Critique\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// type Node = {\n//   level: number;\n//   index: number;\n//   content: string[];\n//   children: any[]; // Update with the proper type if possible.\n// };\n\n// type MyComponentState = {\n//   tree: Node[];\n// };\n\n// class MyComponent extends StreamlitComponentBase<MyComponentState> {\n//   constructor(props: any) {\n//     super(props);\n\n//     this.state = {\n//       tree: [\n//         {\n//           level: 0,\n//           index: 0,\n//           content: [\n//             'Because God said so',\n//             'Because of Raleigh scattering',\n//           ],\n//           children: [],\n//         },\n//       ],\n//     };\n//   }\n\n//   updateTree = (level: number, index: number, textInput: string) => {\n//     const tree = JSON.parse(JSON.stringify(this.state.tree)) as Node[];\n\n//     const newNode: Node = {\n//       level: level + 1,\n//       index: tree.length,\n//       content: [\n//         `Level ${level + 1}, Index ${index * 2} response: ${textInput}`,\n//         `Level ${level + 1}, Index ${index * 2 + 1} response: ${textInput}`,\n//       ],\n//       children: [],\n//     };\n\n//     tree.push(newNode);\n//     this.setState({ tree });\n//   };\n\n//   render() {\n//     const { tree } = this.state;\n\n//     return (\n//       <div className=\"container\" style={customContainer}>\n//         <div\n//           style={{\n//             display: 'flex',\n//             flexDirection: 'column',\n//             alignItems: 'center',\n//             marginTop: '2rem',\n//           }}\n//         >\n//           <button\n//             style={{\n//               backgroundColor: '#007bff',\n//               border: '1px solid #007bff',\n//               borderRadius: '4px',\n//               color: 'white',\n//               padding: '0.5rem 1rem',\n//               margin: '1rem',\n//               pointerEvents: 'none',\n//             }}\n//           >\n//             Why is the sky blue?\n//           </button>\n//           <div>\n//             {tree.map((node, index) => (\n//               <div key={index}>\n//                 <ChoicePair\n//                   level={node.level}\n//                   index={node.index}\n//                   content={node.content}\n//                   updateTree={this.updateTree}\n//                 />\n//                 {index < tree.length - 1 && <hr />}\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default withStreamlitConnection(MyComponent);\n\n\n// // // import React, { ReactNode } from 'react';\n// // // import {\n// // //     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// // // } from 'streamlit-component-lib';\n\n// // // interface State {\n// // //   prompt: string;\n// // //   tree: (string | string[][])[][];\n// // //   clicked: boolean[][];\n// // // }\n\n// // // const customContainer = {\n// // //   width: '100%',\n// // //   maxWidth: '100%',\n// // //   minHeight: '1000px',\n// // // };\n\n// // // class MyComponent extends StreamlitComponentBase<State> {\n// // //   public state: State = {\n// // //     prompt: 'Why is the sky blue?',\n// // //     tree: [\n// // //       [\n// // //         ['Because God said so', []],\n// // //         ['Because of Raleigh scattering', []],\n// // //       ],\n// // //     ],\n// // //     clicked: [],\n// // //   };\n\n// // //   private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n// // //     const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// // //     tree[level] = tree[level] || [];\n// // //     tree[level][index] = [text, newNodes];\n// // //     this.setState({ tree });\n// // //   };\n\n\n// // //   private handleClick = (level: number, index: number) => {\n// // //     const clicked = JSON.parse(JSON.stringify(this.state.clicked)) as boolean[][];\n// // //     clicked[level] = clicked[level] || [];\n\n// // //     if (clicked[level][index]) {\n// // //       clicked[level][index] = false;\n// // //     } else {\n// // //       clicked[level][index] = true;\n// // //       clicked[level][1 - index] = false;\n// // //     }\n\n// // //     this.setState({ clicked }, () => {\n// // //       // If a button is unclicked, clear the input field associated with that button\n// // //       const unclickedInput = document.getElementById(\n// // //         `inputDefault_${level}_${index}`\n// // //       ) as HTMLInputElement;\n// // //       if (unclickedInput) {\n// // //         unclickedInput.value = '';\n// // //       }\n// // //     });\n// // //   };\n\n\n\n\n\n// // //   private renderNode = (level: number, index: number) => {\n// // //     const content = this.state.tree[level]?.[index]?.[0];\n// // //     const isClicked = this.state.clicked[level]?.[index];\n// // //     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n// // //     if (content) {\n// // //       return (\n// // //         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n// // //           <button\n// // //             onClick={() => {\n// // //               this.handleClick(level, index);\n// // //             }}\n// // //             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n// // //             style={{ marginBottom: '1.5rem', whiteSpace: 'normal', width: '12rem' }}\n// // //           >\n// // //             {content}\n// // //           </button>\n// // //           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n// // //             {!isClicked && otherButtonClicked && (\n// // //               <span style={{ color: 'white', fontStyle: 'italic' }}>\n// // //                 This response was not selected\n// // //               </span>\n// // //             )}\n// // //           </div>\n// // //         </div>\n// // //       );\n// // //     }\n// // //     return null;\n// // //   };\n\n// // //   private generateNewNodes = (level: number, index: number) => {\n// // //     if (level === 0) {\n// // //       if (index === 0) {\n// // //         return [\n// // //           [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n// // //           [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n// // //         ];\n// // //       } else {\n// // //         return [\n// // //           [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n// // //           [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n// // //         ];\n// // //       }\n// // //     } else {\n// // //       return [\n// // //         [`Level ${level + 1}, Index ${index * 2} response`],\n// // //         [`Level ${level + 1}, Index ${index * 2 + 1} response`]\n// // //       ];\n// // //     }\n// // //   };\n\n// // //   private renderTextInput = (level: number, index: number) => {\n// // //     const isClicked = this.state.clicked[level]?.[index];\n\n// // //     const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n// // //       if (event.key === 'Enter') {\n// // //         const commentary = event.currentTarget.value;\n// // //         this.handleClick(level, index);\n\n// // //         // Generate new nodes without modifying the current node text\n// // //         const newNodes = this.generateNewNodes(level, index);\n\n// // //         this.addToTree(level + 1, index * 2, newNodes[0][0], []);\n// // //         this.addToTree(level + 1, index * 2 + 1, newNodes[1][0], []);\n// // //       }\n// // //     };\n\n// // //     const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n// // //       const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n\n// // //       const clicked = [...this.state.clicked] as boolean[][];\n// // //       clicked[level] = clicked[level] || [];\n// // //       clicked[level][index] = true;\n// // //       clicked[level][1 - index] = false;\n\n// // //       const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n\n// // //       let newNodes: string[][] = [];\n\n// // //       if (level === 0) {\n// // //         if (index === 0) {\n// // //           newNodes = [\n// // //             [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n// // //             [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n// // //           ];\n// // //         } else {\n// // //           newNodes = [\n// // //             [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n// // //             [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n// // //           ];\n// // //         }\n// // //       } else {\n// // //         newNodes = [\n// // //           [`Level ${level + 1}, Index ${index * 2} response`],\n// // //           [`Level ${level + 1}, Index ${index * 2 + 1} response`]\n// // //         ];\n// // //       }\n\n// // //       tree[level + 1] = tree[level + 1] || [];\n// // //       tree[level + 1][index * 2] = [newNodes[0][0], []];\n// // //       tree[level + 1][index * 2 + 1] = [newNodes[1][0], []];\n\n// // //       this.setState({ clicked, tree });\n// // //     };\n\n\n// // //     if (isClicked) {\n// // //       return (\n// // //         <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n// // //           <input\n// // //             type=\"text\"\n// // //             className=\"form-control\"\n// // //             placeholder=\"Enter your commentary\"\n// // //             id={`inputDefault_${level}_${index}`}\n// // //             onKeyPress={handleKeyPress}\n// // //           />\n// // //           <button\n// // //             className=\"btn btn-primary\"\n// // //             type=\"button\"\n// // //             id={`button-addon2_${level}_${index}`}\n// // //             onClick={handleButtonClick} // Add this line back\n// // //           >\n// // //             Critique\n// // //           </button>\n// // //         </div>\n// // //       );\n// // //     }\n// // //     return null;\n// // //   };\n\n\n// // //   public render = (): ReactNode => {\n// // //     const renderDividerAndNewNodes = (level: number, index: number) => {\n// // //       const isClicked = this.state.clicked[level]?.[index];\n// // //       const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n// // //       if (isClicked && newNodesExist) {\n// // //         return (\n// // //           <React.Fragment>\n// // //             <hr />\n// // //             <div\n// // //               style={{\n// // //                 display: 'flex',\n// // //                 justifyContent: 'center',\n// // //                 alignItems: 'flex-end',\n// // //                 marginTop: '2rem',\n// // //                 flexWrap: 'wrap',\n// // //               }}\n// // //             >\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(level + 1, index * 2)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(level + 1, index * 2)}\n// // //               </div>\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(level + 1, index * 2 + 1)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(level + 1, index * 2 + 1)}\n// // //               </div>\n// // //             </div>\n// // //           </React.Fragment>\n// // //         );\n// // //       }\n// // //       return null;\n// // //     };\n\n// // //     return (\n// // //       <div className=\"container\" style={customContainer}>\n// // //         <div\n// // //           style={{\n// // //             display: 'flex',\n// // //             flexDirection: 'column',\n// // //             alignItems: 'center',\n// // //             marginTop: '2rem',\n// // //           }}\n// // //         >\n// // //           <button\n// // //             style={{\n// // //               backgroundColor: '#007bff',\n// // //               border: '1px solid #007bff',\n// // //               borderRadius: '4px',\n// // //               color: 'white',\n// // //               padding: '0.5rem 1rem',\n// // //               margin: '1rem',\n// // //               pointerEvents: 'none',\n// // //             }}\n// // //           >\n// // //             {this.state.prompt}\n// // //           </button>\n// // //           <div\n// // //             style={{\n// // //               display: 'flex',\n// // //               justifyContent: 'center',\n// // //               alignItems: 'flex-end',\n// // //               marginTop: '2rem',\n// // //               flexWrap: 'wrap',\n// // //             }}\n// // //           >\n// // //             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem', flexWrap: 'wrap' }}>\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(0, 0)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(0, 0)}\n// // //                 {renderDividerAndNewNodes(0, 0)}\n// // //               </div>\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(0, 1)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(0, 1)}\n// // //                 {renderDividerAndNewNodes(0, 1)}\n// // //               </div>\n// // //             </div>\n// // //           </div>\n// // //         </div>\n// // //       </div>\n// // //     );\n// // //   };\n// // // }\n\n// // // export default withStreamlitConnection(MyComponent);\n\n\n// // // // // import React, { ReactNode } from 'react';\n// // // // // import {\n// // // // //     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// // // // // } from 'streamlit-component-lib';\n\n// // // // // interface State {\n// // // // //   prompt: string;\n// // // // //   tree: (string | string[][])[][];\n// // // // //   clicked: boolean[][];\n// // // // // }\n\n// // // // // const customContainer = {\n// // // // //   width: '100%',\n// // // // //   maxWidth: '100%',\n// // // // //   minHeight: '1000px',\n// // // // // };\n\n// // // // // class MyComponent extends StreamlitComponentBase<State> {\n// // // // //   public state: State = {\n// // // // //     prompt: 'Why is the sky blue?',\n// // // // //     tree: [\n// // // // //       [\n// // // // //         ['Because God said so', []],\n// // // // //         ['Because of Raleigh scattering', []],\n// // // // //       ],\n// // // // //     ],\n// // // // //     clicked: [],\n// // // // //   };\n\n// // // // //   private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n// // // // //     const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// // // // //     tree[level] = tree[level] || [];\n// // // // //     tree[level][index] = [text, newNodes];\n// // // // //     this.setState({ tree });\n// // // // //   };\n\n// // // // //   private handleClick = (level: number, index: number) => {\n// // // // //     const clicked = [...this.state.clicked] as boolean[][];\n// // // // //     clicked[level] = clicked[level] || [];\n// // // // //     clicked[level][index] = true;\n// // // // //     clicked[level][1 - index] = false;\n// // // // //     this.setState({ clicked });\n// // // // //   };\n\n// // // // //   private renderNode = (level: number, index: number) => {\n// // // // //     const content = this.state.tree[level]?.[index]?.[0];\n// // // // //     const isClicked = this.state.clicked[level]?.[index];\n// // // // //     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n// // // // //     if (content) {\n// // // // //       return (\n// // // // //         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n// // // // //           <button\n// // // // //             onClick={() => {\n// // // // //               this.handleClick(level, index);\n// // // // //             }}\n// // // // //             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n// // // // //             style={{ marginBottom: '1.5rem', whiteSpace: 'normal', width: '12rem' }} // Add white-space and width styles\n// // // // //           >\n// // // // //             {content}\n// // // // //           </button>\n// // // // //           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n// // // // //             {!isClicked && otherButtonClicked && (\n// // // // //               <span style={{ color: 'white', fontStyle: 'italic' }}>\n// // // // //                 This response was not selected\n// // // // //               </span>\n// // // // //             )}\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       );\n// // // // //     }\n// // // // //     return null;\n// // // // //   };\n\n// // // // //   private renderTextInput = (level: number, index: number) => {\n// // // // //     const isClicked = this.state.clicked[level]?.[index];\n\n// // // // //     const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n// // // // //       if (event.key === 'Enter') {\n// // // // //         const commentary = event.currentTarget.value;\n// // // // //         this.handleClick(level, index);\n// // // // //         this.addToTree(level + 1, index * 2, commentary, []);\n// // // // //       }\n// // // // //     };\n\n// // // // //     const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n// // // // //       const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n\n// // // // //       const clicked = [...this.state.clicked] as boolean[][];\n// // // // //       clicked[level] = clicked[level] || [];\n// // // // //       clicked[level][index] = true;\n// // // // //       clicked[level][1 - index] = false;\n\n// // // // //       const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// // // // //       const newNodes = level === 0\n// // // // //         ? index === 0\n// // // // //           ? [\n// // // // //             [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n// // // // //             [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n// // // // //           ]\n// // // // //           : [\n// // // // //             [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n// // // // //             [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n// // // // //           ]\n// // // // //         : []; // For deeper levels, you can add more new nodes here\n\n// // // // //       tree[level + 1] = tree[level + 1] || [];\n// // // // //       tree[level + 1][index * 2] = [newNodes[0], []];\n// // // // //       tree[level + 1][index * 2 + 1] = [newNodes[1], []];\n\n// // // // //       this.setState({ clicked, tree });\n// // // // //     };\n\n// // // // //     if (isClicked) {\n// // // // //       return (\n// // // // //         <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n// // // // //           <input\n// // // // //             type=\"text\"\n// // // // //             className=\"form-control\"\n// // // // //             placeholder=\"Enter your commentary\"\n// // // // //             id={`inputDefault_${level}_${index}`}\n// // // // //             onKeyPress={handleKeyPress}\n// // // // //           />\n// // // // //           <button\n// // // // //             className=\"btn btn-primary\"\n// // // // //             type=\"button\"\n// // // // //             id={`button-addon2_${level}_${index}`}\n// // // // //             onClick={handleButtonClick}\n// // // // //           >\n// // // // //             Critique\n// // // // //           </button>\n// // // // //         </div>\n// // // // //       );\n// // // // //     }\n// // // // //     return null;\n// // // // //   };\n\n// // // // //   public render = (): ReactNode => {\n// // // // //     const renderDividerAndNewNodes = (level: number, index: number) => {\n// // // // //       const isClicked = this.state.clicked[level]?.[index];\n// // // // //       const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n// // // // //       if (isClicked && newNodesExist) {\n// // // // //         return (\n// // // // //           <React.Fragment>\n// // // // //             <hr />\n// // // // //             <div\n// // // // //               style={{\n// // // // //                 display: 'flex',\n// // // // //                 justifyContent: 'center',\n// // // // //                 alignItems: 'flex-end',\n// // // // //                 marginTop: '2rem',\n// // // // //                 flexWrap: 'wrap', // Add flex-wrap style\n// // // // //               }}\n// // // // //             >\n// // // // //               <div className=\"d-flex flex-column align-items-center\">\n// // // // //                 {this.renderNode(level + 1, index * 2)}\n// // // // //                 <input\n// // // // //                   type=\"range\"\n// // // // //                   min=\"0\"\n// // // // //                   max=\"100\"\n// // // // //                   defaultValue=\"50\"\n// // // // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // // // //                 />\n// // // // //                 {this.renderTextInput(level + 1, index * 2)}\n// // // // //               </div>\n// // // // //               <div className=\"d-flex flex-column align-items-center\">\n// // // // //                 {this.renderNode(level + 1, index * 2 + 1)}\n// // // // //                 <input\n// // // // //                   type=\"range\"\n// // // // //                   min=\"0\"\n// // // // //                   max=\"100\"\n// // // // //                   defaultValue=\"50\"\n// // // // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // // // //                 />\n// // // // //                 {this.renderTextInput(level + 1, index * 2 + 1)}\n// // // // //               </div>\n// // // // //             </div>\n// // // // //           </React.Fragment>\n// // // // //         );\n// // // // //       }\n// // // // //       return null;\n// // // // //     };\n\n// // // // //     return (\n// // // // //       <div className=\"container\" style={customContainer}>\n// // // // //         <div\n// // // // //           style={{\n// // // // //             display: 'flex',\n// // // // //             flexDirection: 'column',\n// // // // //             alignItems: 'center',\n// // // // //             marginTop: '2rem',\n// // // // //           }}\n// // // // //         >\n// // // // //           <button\n// // // // //             style={{\n// // // // //               backgroundColor: '#007bff',\n// // // // //               border: '1px solid #007bff',\n// // // // //               borderRadius: '4px',\n// // // // //               color: 'white',\n// // // // //               padding: '0.5rem 1rem',\n// // // // //               margin: '1rem',\n// // // // //               pointerEvents: 'none',\n// // // // //             }}\n// // // // //           >\n// // // // //             {this.state.prompt}\n// // // // //           </button>\n// // // // //           <div\n// // // // //             style={{\n// // // // //               display: 'flex',\n// // // // //               justifyContent: 'center',\n// // // // //               alignItems: 'flex-end',\n// // // // //               marginTop: '2rem',\n// // // // //               flexWrap: 'wrap', // Add flex-wrap style\n// // // // //             }}\n// // // // //           >\n// // // // //             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem', flexWrap: 'wrap' }}>\n// // // // //               <div className=\"d-flex flex-column align-items-center\">\n// // // // //                 {this.renderNode(0, 0)}\n// // // // //                 <input\n// // // // //                   type=\"range\"\n// // // // //                   min=\"0\"\n// // // // //                   max=\"100\"\n// // // // //                   defaultValue=\"50\"\n// // // // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // // // //                 />\n// // // // //                 {this.renderTextInput(0, 0)}\n// // // // //                 {renderDividerAndNewNodes(0, 0)}\n// // // // //               </div>\n// // // // //               <div className=\"d-flex flex-column align-items-center\">\n// // // // //                 {this.renderNode(0, 1)}\n// // // // //                 <input\n// // // // //                   type=\"range\"\n// // // // //                   min=\"0\"\n// // // // //                   max=\"100\"\n// // // // //                   defaultValue=\"50\"\n// // // // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // // // //                 />\n// // // // //                 {this.renderTextInput(0, 1)}\n// // // // //                 {renderDividerAndNewNodes(0, 1)}\n// // // // //               </div>\n// // // // //             </div>\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       </div>\n// // // // //     );\n// // // // //   };\n// // // // // }\n\n// // // // // export default withStreamlitConnection(MyComponent);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}