{"ast":null,"code":"var _jsxFileName = \"/Users/tyna/code/select_critique_package/my_component/frontend/src/MyComponent.tsx\";\nimport React from 'react';\nimport { StreamlitComponentBase, withStreamlitConnection } from 'streamlit-component-lib';\nimport Tree, { mutateTree } from '@atlaskit/tree';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      treeData: {\n        rootId: 'prompt',\n        items: {\n          prompt: {\n            id: 'prompt',\n            children: ['response1', 'response2'],\n            data: {\n              title: 'Why is the sky blue?'\n            }\n          },\n          response1: {\n            id: 'response1',\n            children: [],\n            data: {\n              title: 'Because God said so'\n            }\n          },\n          response2: {\n            id: 'response2',\n            children: [],\n            data: {\n              title: 'Because of Raleigh scattering'\n            }\n          }\n        }\n      }\n    };\n    this.onExpand = itemId => {\n      const {\n        treeData\n      } = this.state;\n      this.setState({\n        treeData: mutateTree(treeData, itemId, {\n          isExpanded: true\n        })\n      });\n    };\n    this.onCollapse = itemId => {\n      const {\n        treeData\n      } = this.state;\n      this.setState({\n        treeData: mutateTree(treeData, itemId, {\n          isExpanded: false\n        })\n      });\n    };\n    this.renderItem = _ref => {\n      let {\n        item,\n        provided\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: provided.innerRef,\n        ...provided.draggableProps,\n        ...provided.dragHandleProps,\n        style: {\n          ...provided.draggableProps.style,\n          border: '1px solid white',\n          borderRadius: '3px',\n          backgroundColor: 'blue',\n          color: 'white',\n          padding: '8px',\n          marginBottom: '8px'\n        },\n        children: item.data.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this);\n    };\n    this.render = () => {\n      const {\n        treeData\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        style: {\n          width: '100%',\n          maxWidth: '100%',\n          minHeight: '400px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Tree, {\n          tree: treeData,\n          renderItem: this.renderItem,\n          onExpand: this.onExpand,\n          onCollapse: this.onCollapse\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this);\n    };\n  }\n}\nexport default _c = withStreamlitConnection(MyComponent);\n\n// import React, { ReactNode } from 'react';\n// import {\n//     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// interface State {\n//   prompt: string;\n//   tree: string[][][];\n//   clicked: boolean[][];\n// }\n\n// const customContainer = {\n//   width: '100%',\n//   maxWidth: '100%',\n//   minHeight: '1000px',\n// };\n\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state: State = {\n//     prompt: 'Why is the sky blue?',\n//     tree: [\n//       [['Because God said so'], ['Because of Raleigh scattering']],\n//     ],\n//     clicked: [],\n//   };\n\n//   private addToTree = (level: number, index: number, text: string) => {\n//     const tree = [...this.state.tree] as string[][][];\n//     tree[level] = tree[level] || [];\n//     tree[level][index] = [text];\n//     this.setState({ tree });\n//   };\n\n//   private handleClick = (level: number, index: number) => {\n//     const clicked = [...this.state.clicked] as boolean[][];\n//     clicked[level] = clicked[level] || [];\n//     clicked[level][index] = true;\n//     clicked[level][1 - index] = false;\n//     this.setState({ clicked });\n//   };\n\n//   private renderNode = (level: number, index: number) => {\n//     const content = this.state.tree[level]?.[index]?.[0];\n//     const isClicked = this.state.clicked[level]?.[index];\n\n//     if (content) {\n//       return (\n//         <div className=\"d-flex flex-column align-items-center\">\n//           <button\n//             onClick={() => {\n//               this.handleClick(level, index);\n//               if (isClicked) {\n//                 this.addToTree(level + 1, index * 2, 'Response A');\n//               }\n//             }}\n//             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n//           >\n//             {content}\n//           </button>\n//           {!isClicked && (\n//             <span style={{ color: 'white', fontStyle: 'italic', marginBottom: '1rem' }}>\n//               This response was not selected\n//             </span>\n//           )}\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   public render = (): ReactNode => {\n//     return (\n//       <div className=\"container\" style={customContainer}>\n//         <div\n//           style={{\n//             display: 'flex',\n//             flexDirection: 'column',\n//             alignItems: 'center',\n//             marginTop: '2rem',\n//           }}\n//         >\n//           <button\n//             style={{\n//               backgroundColor: '#007bff',\n//               border: '1px solid #007bff',\n//               borderRadius: '4px',\n//               color: 'white',\n//               padding: '0.5rem 1rem',\n//               margin: '1rem',\n//               pointerEvents: 'none',\n//             }}\n//           >\n//             {this.state.prompt}\n//           </button>\n//           <div\n//             style={{\n//               display: 'flex',\n//               justifyContent: 'center',\n//               alignItems: 'flex-end',\n//               marginTop: '2rem',\n//             }}\n//           >\n//             <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n//               <div style={{ border: '1px solid white', width: '1px', height: '2rem' }}></div>\n//               <div style={{ display: 'flex', justifyContent: 'space-between', width: '24rem' }}>\n//                 <div style={{ border: '1px solid white', height: '1px', width: '50%' }}></div>\n//                 <div style={{ border: '1px solid white', height: '1px', width: '50%' }}></div>\n//               </div>\n//             </div>\n//             <div\n//               style={{\n//                 display: 'flex',\n//                 marginLeft: '-12rem',\n//                 marginRight: '-12rem',\n//               }}\n//             >\n//               {this.renderNode(0, 0)}\n//               {this.renderNode(0, 1)}\n//             </div>\n//             <div style={{ display: 'flex', justifyContent: 'space-between', width: '24rem', marginTop: '1rem' }}>\n//               <input\n//                 type=\"range\"\n//                 min=\"0\"\n//                 max=\"100\"\n//                 defaultValue=\"50\"\n//                 style={{ width: '150px' }}\n//               />\n//               <input\n//                 type=\"range\"\n//                 min=\"0\"\n//                 max=\"100\"\n//                 defaultValue=\"50\"\n//                 style={{ width: '150px' }}\n//               />\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","StreamlitComponentBase","withStreamlitConnection","Tree","mutateTree","jsxDEV","_jsxDEV","MyComponent","constructor","arguments","state","treeData","rootId","items","prompt","id","children","data","title","response1","response2","onExpand","itemId","setState","isExpanded","onCollapse","renderItem","_ref","item","provided","ref","innerRef","draggableProps","dragHandleProps","style","border","borderRadius","backgroundColor","color","padding","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","render","className","width","maxWidth","minHeight","tree","_c","$RefreshReg$"],"sources":["/Users/tyna/code/select_critique_package/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\nimport {\n    Streamlit, StreamlitComponentBase, withStreamlitConnection\n} from 'streamlit-component-lib';\n\nimport Tree, { mutateTree, TreeData, TreeItem } from '@atlaskit/tree';\n\ninterface State {\n  treeData: TreeData;\n}\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state: State = {\n    treeData: {\n      rootId: 'prompt',\n      items: {\n        prompt: {\n          id: 'prompt',\n          children: ['response1', 'response2'],\n          data: {\n            title: 'Why is the sky blue?',\n          },\n        },\n        response1: {\n          id: 'response1',\n          children: [],\n          data: {\n            title: 'Because God said so',\n          },\n        },\n        response2: {\n          id: 'response2',\n          children: [],\n          data: {\n            title: 'Because of Raleigh scattering',\n          },\n        },\n      },\n    },\n  };\n\n  onExpand = (itemId: any) => {\n    const { treeData } = this.state;\n    this.setState({\n      treeData: mutateTree(treeData, itemId, { isExpanded: true }),\n    });\n  };\n\n  onCollapse = (itemId: any) => {\n    const { treeData } = this.state;\n    this.setState({\n      treeData: mutateTree(treeData, itemId, { isExpanded: false }),\n    });\n  };\n\n  renderItem = ({ item, provided }: RenderItemParams) => {\n    return (\n      <div\n        ref={provided.innerRef}\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        style={{\n          ...provided.draggableProps.style,\n          border: '1px solid white',\n          borderRadius: '3px',\n          backgroundColor: 'blue',\n          color: 'white',\n          padding: '8px',\n          marginBottom: '8px',\n        }}\n      >\n        {item.data.title}\n      </div>\n    );\n  };\n\n  public render = (): ReactNode => {\n    const { treeData } = this.state;\n    return (\n      <div\n        className=\"container\"\n        style={{\n          width: '100%',\n          maxWidth: '100%',\n          minHeight: '400px',\n        }}\n      >\n        <Tree\n          tree={treeData}\n          renderItem={this.renderItem}\n          onExpand={this.onExpand}\n          onCollapse={this.onCollapse}\n        />\n      </div>\n    );\n  };\n}\n\nexport default withStreamlitConnection(MyComponent);\n\n\n// import React, { ReactNode } from 'react';\n// import {\n//     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// interface State {\n//   prompt: string;\n//   tree: string[][][];\n//   clicked: boolean[][];\n// }\n\n// const customContainer = {\n//   width: '100%',\n//   maxWidth: '100%',\n//   minHeight: '1000px',\n// };\n\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state: State = {\n//     prompt: 'Why is the sky blue?',\n//     tree: [\n//       [['Because God said so'], ['Because of Raleigh scattering']],\n//     ],\n//     clicked: [],\n//   };\n\n//   private addToTree = (level: number, index: number, text: string) => {\n//     const tree = [...this.state.tree] as string[][][];\n//     tree[level] = tree[level] || [];\n//     tree[level][index] = [text];\n//     this.setState({ tree });\n//   };\n\n//   private handleClick = (level: number, index: number) => {\n//     const clicked = [...this.state.clicked] as boolean[][];\n//     clicked[level] = clicked[level] || [];\n//     clicked[level][index] = true;\n//     clicked[level][1 - index] = false;\n//     this.setState({ clicked });\n//   };\n\n//   private renderNode = (level: number, index: number) => {\n//     const content = this.state.tree[level]?.[index]?.[0];\n//     const isClicked = this.state.clicked[level]?.[index];\n\n//     if (content) {\n//       return (\n//         <div className=\"d-flex flex-column align-items-center\">\n//           <button\n//             onClick={() => {\n//               this.handleClick(level, index);\n//               if (isClicked) {\n//                 this.addToTree(level + 1, index * 2, 'Response A');\n//               }\n//             }}\n//             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n//           >\n//             {content}\n//           </button>\n//           {!isClicked && (\n//             <span style={{ color: 'white', fontStyle: 'italic', marginBottom: '1rem' }}>\n//               This response was not selected\n//             </span>\n//           )}\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   public render = (): ReactNode => {\n//     return (\n//       <div className=\"container\" style={customContainer}>\n//         <div\n//           style={{\n//             display: 'flex',\n//             flexDirection: 'column',\n//             alignItems: 'center',\n//             marginTop: '2rem',\n//           }}\n//         >\n//           <button\n//             style={{\n//               backgroundColor: '#007bff',\n//               border: '1px solid #007bff',\n//               borderRadius: '4px',\n//               color: 'white',\n//               padding: '0.5rem 1rem',\n//               margin: '1rem',\n//               pointerEvents: 'none',\n//             }}\n//           >\n//             {this.state.prompt}\n//           </button>\n//           <div\n//             style={{\n//               display: 'flex',\n//               justifyContent: 'center',\n//               alignItems: 'flex-end',\n//               marginTop: '2rem',\n//             }}\n//           >\n//             <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n//               <div style={{ border: '1px solid white', width: '1px', height: '2rem' }}></div>\n//               <div style={{ display: 'flex', justifyContent: 'space-between', width: '24rem' }}>\n//                 <div style={{ border: '1px solid white', height: '1px', width: '50%' }}></div>\n//                 <div style={{ border: '1px solid white', height: '1px', width: '50%' }}></div>\n//               </div>\n//             </div>\n//             <div\n//               style={{\n//                 display: 'flex',\n//                 marginLeft: '-12rem',\n//                 marginRight: '-12rem',\n//               }}\n//             >\n//               {this.renderNode(0, 0)}\n//               {this.renderNode(0, 1)}\n//             </div>\n//             <div style={{ display: 'flex', justifyContent: 'space-between', width: '24rem', marginTop: '1rem' }}>\n//               <input\n//                 type=\"range\"\n//                 min=\"0\"\n//                 max=\"100\"\n//                 defaultValue=\"50\"\n//                 style={{ width: '150px' }}\n//               />\n//               <input\n//                 type=\"range\"\n//                 min=\"0\"\n//                 max=\"100\"\n//                 defaultValue=\"50\"\n//                 style={{ width: '150px' }}\n//               />\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default withStreamlitConnection(MyComponent);\n\n\n"],"mappings":"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},"metadata":{},"sourceType":"module"}