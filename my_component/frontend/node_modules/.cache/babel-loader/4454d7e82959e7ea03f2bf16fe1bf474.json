{"ast":null,"code":"\n\n// import React, { ReactNode } from 'react';\n// import {\n//     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// interface State {\n//   prompt: string;\n//   tree: string[][][];\n// }\n\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state: State = {\n//     prompt: 'Why is the sky blue?',\n//     tree: [\n//       [['Because God said so'], ['Because of Raleigh scattering']],\n//     ],\n//   };\n\n//   private addToTree = (level: number, index: number, text: string) => {\n//     const tree = [...this.state.tree] as string[][][];\n//     tree[level] = tree[level] || [];\n//     tree[level][index] = [text];\n//     this.setState({ tree });\n//   };\n\n//   private renderNode = (level: number, index: number) => {\n//     const content = this.state.tree[level]?.[index]?.[0];\n\n//     if (content) {\n//       return (\n//         <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n//           <span>{content}</span>\n//           {index % 2 === 0 && this.state.tree[level]?.[index + 1] && (\n//             <div style={{ display: 'flex', justifyContent: 'space-between', width: '12rem' }}>\n//               <button\n//                 style={{ backgroundColor: 'transparent', border: 'none', cursor: 'pointer', color: 'blue' }}\n//                 onClick={() => this.addToTree(level + 1, index * 2, 'Response A')}\n//               >\n//                 A\n//               </button>\n//               <button\n//                 style={{ backgroundColor: 'transparent', border: 'none', cursor: 'pointer', color: 'blue' }}\n//                 onClick={() => this.addToTree(level + 1, index * 2 + 1, 'Response B')}\n//               >\n//                 B\n//               </button>\n//             </div>\n//           )}\n//           <div style={{ display: 'flex' }}>\n//             {this.renderNode(level + 1, index * 2)}\n//             {this.renderNode(level + 1, index * 2 + 1)}\n//           </div>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   public render = (): ReactNode => {\n//     return (\n//       <div>\n//         <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '1rem' }}>\n//           <span>{this.state.prompt}</span>\n//           <div style={{ display: 'flex' }}>\n//             {this.renderNode(0, 0)}\n//             {this.renderNode(0, 1)}\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default withStreamlitConnection(MyComponent);\n\n// import {\n//   Streamlit,\n//   StreamlitComponentBase,\n//   withStreamlitConnection,\n// } from \"streamlit-component-lib\"\n// import React, { ReactNode } from \"react\"\n\n// interface State {\n//   numClicks: number\n//   isFocused: boolean\n// }\n\n// /**\n//  * This is a React-based component template. The `render()` function is called\n//  * automatically when your component should be re-rendered.\n//  */\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state = { numClicks: 0, isFocused: false }\n\n//   public render = (): ReactNode => {\n//     // Arguments that are passed to the plugin in Python are accessible\n//     // via `this.props.args`. Here, we access the \"name\" arg.\n//     const name = this.props.args[\"name\"]\n\n//     // Streamlit sends us a theme object via props that we can use to ensure\n//     // that our component has visuals that match the active theme in a\n//     // streamlit app.\n//     const { theme } = this.props\n//     const style: React.CSSProperties = {}\n\n//     // Maintain compatibility with older versions of Streamlit that don't send\n//     // a theme object.\n//     if (theme) {\n//       // Use the theme object to style our button border. Alternatively, the\n//       // theme style is defined in CSS vars.\n//       const borderStyling = `1px solid ${\n//         this.state.isFocused ? theme.primaryColor : \"gray\"\n//       }`\n//       style.border = borderStyling\n//       style.outline = borderStyling\n//     }\n\n//     // Show a button and some text.\n//     // When the button is clicked, we'll increment our \"numClicks\" state\n//     // variable, and send its new value back to Streamlit, where it'll\n//     // be available to the Python program.\n//     return (\n//       <span>\n//         Hello, {name}! &nbsp;\n//         <button\n//           style={style}\n//           onClick={this.onClicked}\n//           disabled={this.props.disabled}\n//           onFocus={this._onFocus}\n//           onBlur={this._onBlur}\n//         >\n//           Click Me!\n//         </button>\n//       </span>\n//     )\n//   }\n\n//   /** Click handler for our \"Click Me!\" button. */\n//   private onClicked = (): void => {\n//     // Increment state.numClicks, and pass the new value back to\n//     // Streamlit via `Streamlit.setComponentValue`.\n//     this.setState(\n//       prevState => ({ numClicks: prevState.numClicks + 1 }),\n//       () => Streamlit.setComponentValue(this.state.numClicks)\n//     )\n//   }\n\n//   /** Focus handler for our \"Click Me!\" button. */\n//   private _onFocus = (): void => {\n//     this.setState({ isFocused: true })\n//   }\n\n//   /** Blur handler for our \"Click Me!\" button. */\n//   private _onBlur = (): void => {\n//     this.setState({ isFocused: false })\n//   }\n// }\n\n// // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// // connection between your component and the Streamlit app, and handles\n// // passing arguments from Python -> Component.\n// //\n// // You don't need to edit withStreamlitConnection (but you're welcome to!).\n// export default withStreamlitConnection(MyComponent)","map":{"version":3,"names":[],"sources":["/Users/tyna/code/select_critique_package/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["\n\n\n\n// import React, { ReactNode } from 'react';\n// import {\n//     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// interface State {\n//   prompt: string;\n//   tree: string[][][];\n// }\n\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state: State = {\n//     prompt: 'Why is the sky blue?',\n//     tree: [\n//       [['Because God said so'], ['Because of Raleigh scattering']],\n//     ],\n//   };\n\n//   private addToTree = (level: number, index: number, text: string) => {\n//     const tree = [...this.state.tree] as string[][][];\n//     tree[level] = tree[level] || [];\n//     tree[level][index] = [text];\n//     this.setState({ tree });\n//   };\n\n//   private renderNode = (level: number, index: number) => {\n//     const content = this.state.tree[level]?.[index]?.[0];\n\n//     if (content) {\n//       return (\n//         <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n//           <span>{content}</span>\n//           {index % 2 === 0 && this.state.tree[level]?.[index + 1] && (\n//             <div style={{ display: 'flex', justifyContent: 'space-between', width: '12rem' }}>\n//               <button\n//                 style={{ backgroundColor: 'transparent', border: 'none', cursor: 'pointer', color: 'blue' }}\n//                 onClick={() => this.addToTree(level + 1, index * 2, 'Response A')}\n//               >\n//                 A\n//               </button>\n//               <button\n//                 style={{ backgroundColor: 'transparent', border: 'none', cursor: 'pointer', color: 'blue' }}\n//                 onClick={() => this.addToTree(level + 1, index * 2 + 1, 'Response B')}\n//               >\n//                 B\n//               </button>\n//             </div>\n//           )}\n//           <div style={{ display: 'flex' }}>\n//             {this.renderNode(level + 1, index * 2)}\n//             {this.renderNode(level + 1, index * 2 + 1)}\n//           </div>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   public render = (): ReactNode => {\n//     return (\n//       <div>\n//         <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '1rem' }}>\n//           <span>{this.state.prompt}</span>\n//           <div style={{ display: 'flex' }}>\n//             {this.renderNode(0, 0)}\n//             {this.renderNode(0, 1)}\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default withStreamlitConnection(MyComponent);\n\n\n\n// import {\n//   Streamlit,\n//   StreamlitComponentBase,\n//   withStreamlitConnection,\n// } from \"streamlit-component-lib\"\n// import React, { ReactNode } from \"react\"\n\n// interface State {\n//   numClicks: number\n//   isFocused: boolean\n// }\n\n// /**\n//  * This is a React-based component template. The `render()` function is called\n//  * automatically when your component should be re-rendered.\n//  */\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state = { numClicks: 0, isFocused: false }\n\n//   public render = (): ReactNode => {\n//     // Arguments that are passed to the plugin in Python are accessible\n//     // via `this.props.args`. Here, we access the \"name\" arg.\n//     const name = this.props.args[\"name\"]\n\n//     // Streamlit sends us a theme object via props that we can use to ensure\n//     // that our component has visuals that match the active theme in a\n//     // streamlit app.\n//     const { theme } = this.props\n//     const style: React.CSSProperties = {}\n\n//     // Maintain compatibility with older versions of Streamlit that don't send\n//     // a theme object.\n//     if (theme) {\n//       // Use the theme object to style our button border. Alternatively, the\n//       // theme style is defined in CSS vars.\n//       const borderStyling = `1px solid ${\n//         this.state.isFocused ? theme.primaryColor : \"gray\"\n//       }`\n//       style.border = borderStyling\n//       style.outline = borderStyling\n//     }\n\n//     // Show a button and some text.\n//     // When the button is clicked, we'll increment our \"numClicks\" state\n//     // variable, and send its new value back to Streamlit, where it'll\n//     // be available to the Python program.\n//     return (\n//       <span>\n//         Hello, {name}! &nbsp;\n//         <button\n//           style={style}\n//           onClick={this.onClicked}\n//           disabled={this.props.disabled}\n//           onFocus={this._onFocus}\n//           onBlur={this._onBlur}\n//         >\n//           Click Me!\n//         </button>\n//       </span>\n//     )\n//   }\n\n//   /** Click handler for our \"Click Me!\" button. */\n//   private onClicked = (): void => {\n//     // Increment state.numClicks, and pass the new value back to\n//     // Streamlit via `Streamlit.setComponentValue`.\n//     this.setState(\n//       prevState => ({ numClicks: prevState.numClicks + 1 }),\n//       () => Streamlit.setComponentValue(this.state.numClicks)\n//     )\n//   }\n\n//   /** Focus handler for our \"Click Me!\" button. */\n//   private _onFocus = (): void => {\n//     this.setState({ isFocused: true })\n//   }\n\n//   /** Blur handler for our \"Click Me!\" button. */\n//   private _onBlur = (): void => {\n//     this.setState({ isFocused: false })\n//   }\n// }\n\n// // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// // connection between your component and the Streamlit app, and handles\n// // passing arguments from Python -> Component.\n// //\n// // You don't need to edit withStreamlitConnection (but you're welcome to!).\n// export default withStreamlitConnection(MyComponent)\n"],"mappings":";;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}