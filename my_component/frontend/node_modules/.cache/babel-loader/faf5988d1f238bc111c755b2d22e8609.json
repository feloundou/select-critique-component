{"ast":null,"code":"\n\n// import React, { useState } from 'react';\n// import {\n//   Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// const customContainer = {\n//   width: '100%',\n//   maxWidth: '100%',\n//   minHeight: '1000px',\n// };\n\n// type ChoicePairProps = {\n//   level: number;\n//   index: number;\n//   content: string[];\n//   updateTree: (level: number, index: number, textInput: string) => void;\n// };\n\n// const ChoicePair: React.FC<ChoicePairProps> = ({\n//   level,\n//   index,\n//   content,\n//   updateTree,\n// }) => {\n//   const [clicked, setClicked] = useState<boolean[]>([false, false]);\n//   const [textInput, setTextInput] = useState<string>('');\n\n//   const handleClick = (btnIndex: number) => {\n//     const newClickedState = clicked.map((c, i) => i === btnIndex);\n//     setClicked(newClickedState);\n//     setTextInput('');\n//   };\n\n//   const handleTextInputChange = (\n//     e: React.ChangeEvent<HTMLInputElement>\n//   ) => {\n//     setTextInput(e.target.value);\n//   };\n\n//   const handleButtonClick = () => {\n//     updateTree(level, index, textInput);\n//     setTextInput('');\n//   };\n\n//   return (\n//     <div className=\"choice-pair\">\n//       <div style={{ display: 'flex', justifyContent: 'center' }}>\n//         {content.map((btnContent, btnIndex) => (\n//           <div\n//             key={btnIndex}\n//             className=\"d-flex flex-column align-items-center\"\n//             style={{\n//               marginRight: btnIndex === 0 ? '2rem' : undefined,\n//               marginLeft: btnIndex === 1 ? '2rem' : undefined,\n//             }}\n//           >\n//             <button\n//               onClick={() => handleClick(btnIndex)}\n//               className={`btn btn-${clicked[btnIndex] ? 'secondary' : 'primary'\n//                 } my-1`}\n//               style={{\n//                 marginBottom: '1.5rem',\n//                 whiteSpace: 'normal',\n//                 width: '12rem',\n//               }}\n//             >\n//               {btnContent}\n//             </button>\n//             <div\n//               style={{\n//                 display: 'flex',\n//                 justifyContent: 'center',\n//                 alignItems: 'center',\n//                 minHeight: '1.5rem',\n//               }}\n//             >\n//               {!clicked[btnIndex] && clicked[1 - btnIndex] && (\n//                 <span style={{ color: 'white', fontStyle: 'italic' }}>\n//                   This response was not selected\n//                 </span>\n//               )}\n//             </div>\n//             {clicked[btnIndex] && (\n//               <input\n//                 type=\"range\"\n//                 min=\"0\"\n//                 max=\"100\"\n//                 defaultValue=\"50\"\n//                 style={{ width: '150px', marginBottom: '1rem' }}\n//               />\n//             )}\n//             {clicked[btnIndex] && (\n//               <div\n//                 className=\"input-group mb-3\"\n//                 style={{ marginTop: '1rem', width: '300px' }}\n//               >\n//                 <input\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   placeholder=\"Enter your commentary\"\n//                   value={textInput}\n//                   onChange={handleTextInputChange}\n//                 />\n//                 <button\n//                   className=\"btn btn-primary\"\n//                   type=\"button\"\n//                   onClick={handleButtonClick}\n//                 >\n//                   Critique\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// type Node = {\n//   level: number;\n//   index: number;\n//   content: string[];\n//   children: any[];\n// };\n\n// type MyComponentState = {\n//   tree: Node[];\n//   critiques: { [key: string]: string };\n// };\n\n// class MyComponent extends StreamlitComponentBase<MyComponentState> {\n//   constructor(props: any) {\n//     super(props);\n\n//     this.state = {\n//       tree: [\n//         {\n//           level: 0,\n//           index: 0,\n//           content: [\n//             'Because God said so',\n//             'Because of Rayleigh scattering',\n//           ],\n//           children: [],\n//         },\n//       ],\n//       critiques: {},\n//     };\n//   }\n\n//   updateTree = (level: number, index: number, textInput: string) => {\n//     const tree = JSON.parse(JSON.stringify(this.state.tree)) as Node[];\n\n//     const key = `L${level}I${index}`;\n//     const critiques = { ...this.state.critiques, [key]: textInput };\n\n//     const newNode: Node = {\n//       level: level + 1,\n//       index: tree.length,\n//       content: [\n//         `Level ${level + 1}, Index ${index * 2} response: ${textInput}`,\n//         `Level ${level + 1}, Index ${index * 2 + 1} response: ${textInput}`,\n//       ],\n//       children: [],\n//     };\n\n//     tree.push(newNode);\n//     this.setState({ tree, critiques });\n//   };\n\n//   render() {\n//     const { tree } = this.state;\n\n//     return (\n//       <div className=\"container\" style={customContainer}>\n//         <div\n//           style={{\n//             display: 'flex',\n//             flexDirection: 'column',\n//             alignItems: 'center',\n//             marginTop: '2rem',\n//           }}\n//         >\n//           <button\n//             style={{\n//               backgroundColor: '#007bff',\n//               border: '1px solid #007bff',\n//               borderRadius: '4px',\n//               color: 'white',\n//               padding: '0.5rem 1rem',\n//               margin: '1rem',\n//               pointerEvents: 'none',\n//             }}\n//           >\n//             Why is the sky blue?\n//           </button>\n//           <div>\n//             {tree.map((node, index) => (\n//               <div key={index}>\n//                 <ChoicePair\n//                   level={node.level}\n//                   index={node.index}\n//                   content={node.content}\n//                   updateTree={this.updateTree}\n//                 />\n//                 {index < tree.length - 1 && <hr />}\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default withStreamlitConnection(MyComponent);\n\n// import React, { useState } from 'react';\n// import {\n//   Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// const customContainer = {\n//   width: '100%',\n//   maxWidth: '100%',\n//   minHeight: '1000px',\n// };\n\n// type ChoicePairProps = {\n//   level: number;\n//   index: number;\n//   content: string[];\n//   updateTree: (level: number, index: number, textInput: string) => void;\n// };\n\n// const ChoicePair: React.FC<ChoicePairProps> = ({\n//   level,\n//   index,\n//   content,\n//   updateTree,\n// }) => {\n//   const [clicked, setClicked] = useState<boolean[]>([false, false]);\n//   const [textInput, setTextInput] = useState<string>('');\n\n//   const handleClick = (btnIndex: number) => {\n//     const newClickedState = clicked.map((c, i) => i === btnIndex);\n//     setClicked(newClickedState);\n//     setTextInput('');\n//   };\n\n//   const handleTextInputChange = (\n//     e: React.ChangeEvent<HTMLInputElement>\n//   ) => {\n//     setTextInput(e.target.value);\n//   };\n\n//   const handleButtonClick = () => {\n//     updateTree(level, index, textInput);\n//     setTextInput('');\n//   };\n\n//   return (\n//     <div className=\"choice-pair\">\n//       <div style={{ display: 'flex', justifyContent: 'center' }}>\n//         {content.map((btnContent, btnIndex) => (\n//           <div\n//             key={btnIndex}\n//             className=\"d-flex flex-column align-items-center\"\n//             style={{\n//               marginRight: btnIndex === 0 ? '2rem' : undefined,\n//               marginLeft: btnIndex === 1 ? '2rem' : undefined,\n//             }}\n//           >\n//             <button\n//               onClick={() => handleClick(btnIndex)}\n//               className={`btn btn-${clicked[btnIndex] ? 'secondary' : 'primary'} my-1`}\n//               style={{\n//                 marginBottom: '1.5rem',\n//                 whiteSpace: 'normal',\n//                 width: '12rem',\n//               }}\n//             >\n//               {btnContent}\n//             </button>\n//             <div\n//               style={{\n//                 display: 'flex',\n//                 justifyContent: 'center',\n//                 alignItems: 'center',\n//                 minHeight: '1.5rem',\n//               }}\n//             >\n//               {!clicked[btnIndex] && clicked[1 - btnIndex] && (\n//                 <span style={{ color: 'white', fontStyle: 'italic' }}>\n//                   This response was not selected\n//                 </span>\n//               )}\n//             </div>\n//             {clicked[btnIndex] && (\n//               <input\n//                 type=\"range\"\n//                 min=\"0\"\n//                 max=\"100\"\n//                 defaultValue=\"50\"\n//                 style={{ width: '150px', marginBottom: '1rem' }}\n//               />\n//             )}\n//             {clicked[btnIndex] && (\n//               <div\n//                 className=\"input-group mb-3\"\n//                 style={{ marginTop: '1rem', width: '300px' }}\n//               >\n//                 <input\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   placeholder=\"Enter your commentary\"\n//                   value={textInput}\n//                   onChange={handleTextInputChange}\n//                 />\n//                 <button\n//                   className=\"btn btn-primary\"\n//                   type=\"button\"\n//                   onClick={handleButtonClick}\n//                 >\n//                   Critique\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// type Node = {\n//   level: number;\n//   index: number;\n//   content: string[];\n//   children: any[]; // Update with the proper type if possible.\n// };\n\n// type MyComponentState = {\n//   tree: Node[];\n// };\n\n// class MyComponent extends StreamlitComponentBase<MyComponentState> {\n//   constructor(props: any) {\n//     super(props);\n\n//     this.state = {\n//       tree: [\n//         {\n//           level: 0,\n//           index: 0,\n//           content: [\n//             'Because God said so',\n//             'Because of Raleigh scattering',\n//           ],\n//           children: [],\n//         },\n//       ],\n//     };\n//   }\n\n//   updateTree = (level: number, index: number, textInput: string) => {\n//     const tree = JSON.parse(JSON.stringify(this.state.tree)) as Node[];\n\n//     const newNode: Node = {\n//       level: level + 1,\n//       index: tree.length,\n//       content: [\n//         `Level ${level + 1}, Index ${index * 2} response: ${textInput}`,\n//         `Level ${level + 1}, Index ${index * 2 + 1} response: ${textInput}`,\n//       ],\n//       children: [],\n//     };\n\n//     tree.push(newNode);\n//     this.setState({ tree });\n//   };\n\n//   render() {\n//     const { tree } = this.state;\n\n//     return (\n//       <div className=\"container\" style={customContainer}>\n//         <div\n//           style={{\n//             display: 'flex',\n//             flexDirection: 'column',\n//             alignItems: 'center',\n//             marginTop: '2rem',\n//           }}\n//         >\n//           <button\n//             style={{\n//               backgroundColor: '#007bff',\n//               border: '1px solid #007bff',\n//               borderRadius: '4px',\n//               color: 'white',\n//               padding: '0.5rem 1rem',\n//               margin: '1rem',\n//               pointerEvents: 'none',\n//             }}\n//           >\n//             Why is the sky blue?\n//           </button>\n//           <div>\n//             {tree.map((node, index) => (\n//               <div key={index}>\n//                 <ChoicePair\n//                   level={node.level}\n//                   index={node.index}\n//                   content={node.content}\n//                   updateTree={this.updateTree}\n//                 />\n//                 {index < tree.length - 1 && <hr />}\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default withStreamlitConnection(MyComponent);\n\n// // // import React, { ReactNode } from 'react';\n// // // import {\n// // //     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// // // } from 'streamlit-component-lib';\n\n// // // interface State {\n// // //   prompt: string;\n// // //   tree: (string | string[][])[][];\n// // //   clicked: boolean[][];\n// // // }\n\n// // // const customContainer = {\n// // //   width: '100%',\n// // //   maxWidth: '100%',\n// // //   minHeight: '1000px',\n// // // };\n\n// // // class MyComponent extends StreamlitComponentBase<State> {\n// // //   public state: State = {\n// // //     prompt: 'Why is the sky blue?',\n// // //     tree: [\n// // //       [\n// // //         ['Because God said so', []],\n// // //         ['Because of Raleigh scattering', []],\n// // //       ],\n// // //     ],\n// // //     clicked: [],\n// // //   };\n\n// // //   private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n// // //     const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// // //     tree[level] = tree[level] || [];\n// // //     tree[level][index] = [text, newNodes];\n// // //     this.setState({ tree });\n// // //   };\n\n// // //   private handleClick = (level: number, index: number) => {\n// // //     const clicked = JSON.parse(JSON.stringify(this.state.clicked)) as boolean[][];\n// // //     clicked[level] = clicked[level] || [];\n\n// // //     if (clicked[level][index]) {\n// // //       clicked[level][index] = false;\n// // //     } else {\n// // //       clicked[level][index] = true;\n// // //       clicked[level][1 - index] = false;\n// // //     }\n\n// // //     this.setState({ clicked }, () => {\n// // //       // If a button is unclicked, clear the input field associated with that button\n// // //       const unclickedInput = document.getElementById(\n// // //         `inputDefault_${level}_${index}`\n// // //       ) as HTMLInputElement;\n// // //       if (unclickedInput) {\n// // //         unclickedInput.value = '';\n// // //       }\n// // //     });\n// // //   };\n\n// // //   private renderNode = (level: number, index: number) => {\n// // //     const content = this.state.tree[level]?.[index]?.[0];\n// // //     const isClicked = this.state.clicked[level]?.[index];\n// // //     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n// // //     if (content) {\n// // //       return (\n// // //         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n// // //           <button\n// // //             onClick={() => {\n// // //               this.handleClick(level, index);\n// // //             }}\n// // //             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n// // //             style={{ marginBottom: '1.5rem', whiteSpace: 'normal', width: '12rem' }}\n// // //           >\n// // //             {content}\n// // //           </button>\n// // //           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n// // //             {!isClicked && otherButtonClicked && (\n// // //               <span style={{ color: 'white', fontStyle: 'italic' }}>\n// // //                 This response was not selected\n// // //               </span>\n// // //             )}\n// // //           </div>\n// // //         </div>\n// // //       );\n// // //     }\n// // //     return null;\n// // //   };\n\n// // //   private generateNewNodes = (level: number, index: number) => {\n// // //     if (level === 0) {\n// // //       if (index === 0) {\n// // //         return [\n// // //           [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n// // //           [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n// // //         ];\n// // //       } else {\n// // //         return [\n// // //           [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n// // //           [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n// // //         ];\n// // //       }\n// // //     } else {\n// // //       return [\n// // //         [`Level ${level + 1}, Index ${index * 2} response`],\n// // //         [`Level ${level + 1}, Index ${index * 2 + 1} response`]\n// // //       ];\n// // //     }\n// // //   };\n\n// // //   private renderTextInput = (level: number, index: number) => {\n// // //     const isClicked = this.state.clicked[level]?.[index];\n\n// // //     const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n// // //       if (event.key === 'Enter') {\n// // //         const commentary = event.currentTarget.value;\n// // //         this.handleClick(level, index);\n\n// // //         // Generate new nodes without modifying the current node text\n// // //         const newNodes = this.generateNewNodes(level, index);\n\n// // //         this.addToTree(level + 1, index * 2, newNodes[0][0], []);\n// // //         this.addToTree(level + 1, index * 2 + 1, newNodes[1][0], []);\n// // //       }\n// // //     };\n\n// // //     const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n// // //       const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n\n// // //       const clicked = [...this.state.clicked] as boolean[][];\n// // //       clicked[level] = clicked[level] || [];\n// // //       clicked[level][index] = true;\n// // //       clicked[level][1 - index] = false;\n\n// // //       const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n\n// // //       let newNodes: string[][] = [];\n\n// // //       if (level === 0) {\n// // //         if (index === 0) {\n// // //           newNodes = [\n// // //             [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n// // //             [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n// // //           ];\n// // //         } else {\n// // //           newNodes = [\n// // //             [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n// // //             [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n// // //           ];\n// // //         }\n// // //       } else {\n// // //         newNodes = [\n// // //           [`Level ${level + 1}, Index ${index * 2} response`],\n// // //           [`Level ${level + 1}, Index ${index * 2 + 1} response`]\n// // //         ];\n// // //       }\n\n// // //       tree[level + 1] = tree[level + 1] || [];\n// // //       tree[level + 1][index * 2] = [newNodes[0][0], []];\n// // //       tree[level + 1][index * 2 + 1] = [newNodes[1][0], []];\n\n// // //       this.setState({ clicked, tree });\n// // //     };\n\n// // //     if (isClicked) {\n// // //       return (\n// // //         <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n// // //           <input\n// // //             type=\"text\"\n// // //             className=\"form-control\"\n// // //             placeholder=\"Enter your commentary\"\n// // //             id={`inputDefault_${level}_${index}`}\n// // //             onKeyPress={handleKeyPress}\n// // //           />\n// // //           <button\n// // //             className=\"btn btn-primary\"\n// // //             type=\"button\"\n// // //             id={`button-addon2_${level}_${index}`}\n// // //             onClick={handleButtonClick} // Add this line back\n// // //           >\n// // //             Critique\n// // //           </button>\n// // //         </div>\n// // //       );\n// // //     }\n// // //     return null;\n// // //   };\n\n// // //   public render = (): ReactNode => {\n// // //     const renderDividerAndNewNodes = (level: number, index: number) => {\n// // //       const isClicked = this.state.clicked[level]?.[index];\n// // //       const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n// // //       if (isClicked && newNodesExist) {\n// // //         return (\n// // //           <React.Fragment>\n// // //             <hr />\n// // //             <div\n// // //               style={{\n// // //                 display: 'flex',\n// // //                 justifyContent: 'center',\n// // //                 alignItems: 'flex-end',\n// // //                 marginTop: '2rem',\n// // //                 flexWrap: 'wrap',\n// // //               }}\n// // //             >\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(level + 1, index * 2)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(level + 1, index * 2)}\n// // //               </div>\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(level + 1, index * 2 + 1)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(level + 1, index * 2 + 1)}\n// // //               </div>\n// // //             </div>\n// // //           </React.Fragment>\n// // //         );\n// // //       }\n// // //       return null;\n// // //     };\n\n// // //     return (\n// // //       <div className=\"container\" style={customContainer}>\n// // //         <div\n// // //           style={{\n// // //             display: 'flex',\n// // //             flexDirection: 'column',\n// // //             alignItems: 'center',\n// // //             marginTop: '2rem',\n// // //           }}\n// // //         >\n// // //           <button\n// // //             style={{\n// // //               backgroundColor: '#007bff',\n// // //               border: '1px solid #007bff',\n// // //               borderRadius: '4px',\n// // //               color: 'white',\n// // //               padding: '0.5rem 1rem',\n// // //               margin: '1rem',\n// // //               pointerEvents: 'none',\n// // //             }}\n// // //           >\n// // //             {this.state.prompt}\n// // //           </button>\n// // //           <div\n// // //             style={{\n// // //               display: 'flex',\n// // //               justifyContent: 'center',\n// // //               alignItems: 'flex-end',\n// // //               marginTop: '2rem',\n// // //               flexWrap: 'wrap',\n// // //             }}\n// // //           >\n// // //             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem', flexWrap: 'wrap' }}>\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(0, 0)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(0, 0)}\n// // //                 {renderDividerAndNewNodes(0, 0)}\n// // //               </div>\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(0, 1)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(0, 1)}\n// // //                 {renderDividerAndNewNodes(0, 1)}\n// // //               </div>\n// // //             </div>\n// // //           </div>\n// // //         </div>\n// // //       </div>\n// // //     );\n// // //   };\n// // // }\n\n// // // export default withStreamlitConnection(MyComponent);\n\n// // // // // import React, { ReactNode } from 'react';\n// // // // // import {\n// // // // //     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// // // // // } from 'streamlit-component-lib';\n\n// // // // // interface State {\n// // // // //   prompt: string;\n// // // // //   tree: (string | string[][])[][];\n// // // // //   clicked: boolean[][];\n// // // // // }\n\n// // // // // const customContainer = {\n// // // // //   width: '100%',\n// // // // //   maxWidth: '100%',\n// // // // //   minHeight: '1000px',\n// // // // // };\n\n// // // // // class MyComponent extends StreamlitComponentBase<State> {\n// // // // //   public state: State = {\n// // // // //     prompt: 'Why is the sky blue?',\n// // // // //     tree: [\n// // // // //       [\n// // // // //         ['Because God said so', []],\n// // // // //         ['Because of Raleigh scattering', []],\n// // // // //       ],\n// // // // //     ],\n// // // // //     clicked: [],\n// // // // //   };\n\n// // // // //   private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n// // // // //     const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// // // // //     tree[level] = tree[level] || [];\n// // // // //     tree[level][index] = [text, newNodes];\n// // // // //     this.setState({ tree });\n// // // // //   };\n\n// // // // //   private handleClick = (level: number, index: number) => {\n// // // // //     const clicked = [...this.state.clicked] as boolean[][];\n// // // // //     clicked[level] = clicked[level] || [];\n// // // // //     clicked[level][index] = true;\n// // // // //     clicked[level][1 - index] = false;\n// // // // //     this.setState({ clicked });\n// // // // //   };\n\n// // // // //   private renderNode = (level: number, index: number) => {\n// // // // //     const content = this.state.tree[level]?.[index]?.[0];\n// // // // //     const isClicked = this.state.clicked[level]?.[index];\n// // // // //     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n// // // // //     if (content) {\n// // // // //       return (\n// // // // //         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n// // // // //           <button\n// // // // //             onClick={() => {\n// // // // //               this.handleClick(level, index);\n// // // // //             }}\n// // // // //             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n// // // // //             style={{ marginBottom: '1.5rem', whiteSpace: 'normal', width: '12rem' }} // Add white-space and width styles\n// // // // //           >\n// // // // //             {content}\n// // // // //           </button>\n// // // // //           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n// // // // //             {!isClicked && otherButtonClicked && (\n// // // // //               <span style={{ color: 'white', fontStyle: 'italic' }}>\n// // // // //                 This response was not selected\n// // // // //               </span>\n// // // // //             )}\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       );\n// // // // //     }\n// // // // //     return null;\n// // // // //   };\n\n// // // // //   private renderTextInput = (level: number, index: number) => {\n// // // // //     const isClicked = this.state.clicked[level]?.[index];\n\n// // // // //     const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n// // // // //       if (event.key === 'Enter') {\n// // // // //         const commentary = event.currentTarget.value;\n// // // // //         this.handleClick(level, index);\n// // // // //         this.addToTree(level + 1, index * 2, commentary, []);\n// // // // //       }\n// // // // //     };\n\n// // // // //     const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n// // // // //       const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n\n// // // // //       const clicked = [...this.state.clicked] as boolean[][];\n// // // // //       clicked[level] = clicked[level] || [];\n// // // // //       clicked[level][index] = true;\n// // // // //       clicked[level][1 - index] = false;\n\n// // // // //       const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// // // // //       const newNodes = level === 0\n// // // // //         ? index === 0\n// // // // //           ? [\n// // // // //             [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n// // // // //             [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n// // // // //           ]\n// // // // //           : [\n// // // // //             [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n// // // // //             [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n// // // // //           ]\n// // // // //         : []; // For deeper levels, you can add more new nodes here\n\n// // // // //       tree[level + 1] = tree[level + 1] || [];\n// // // // //       tree[level + 1][index * 2] = [newNodes[0], []];\n// // // // //       tree[level + 1][index * 2 + 1] = [newNodes[1], []];\n\n// // // // //       this.setState({ clicked, tree });\n// // // // //     };\n\n// // // // //     if (isClicked) {\n// // // // //       return (\n// // // // //         <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n// // // // //           <input\n// // // // //             type=\"text\"\n// // // // //             className=\"form-control\"\n// // // // //             placeholder=\"Enter your commentary\"\n// // // // //             id={`inputDefault_${level}_${index}`}\n// // // // //             onKeyPress={handleKeyPress}\n// // // // //           />\n// // // // //           <button\n// // // // //             className=\"btn btn-primary\"\n// // // // //             type=\"button\"\n// // // // //             id={`button-addon2_${level}_${index}`}\n// // // // //             onClick={handleButtonClick}\n// // // // //           >\n// // // // //             Critique\n// // // // //           </button>\n// // // // //         </div>\n// // // // //       );\n// // // // //     }\n// // // // //     return null;\n// // // // //   };\n\n// // // // //   public render = (): ReactNode => {\n// // // // //     const renderDividerAndNewNodes = (level: number, index: number) => {\n// // // // //       const isClicked = this.state.clicked[level]?.[index];\n// // // // //       const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n// // // // //       if (isClicked && newNodesExist) {\n// // // // //         return (\n// // // // //           <React.Fragment>\n// // // // //             <hr />\n// // // // //             <div\n// // // // //               style={{\n// // // // //                 display: 'flex',\n// // // // //                 justifyContent: 'center',\n// // // // //                 alignItems: 'flex-end',\n// // // // //                 marginTop: '2rem',\n// // // // //                 flexWrap: 'wrap', // Add flex-wrap style\n// // // // //               }}\n// // // // //             >\n// // // // //               <div className=\"d-flex flex-column align-items-center\">\n// // // // //                 {this.renderNode(level + 1, index * 2)}\n// // // // //                 <input\n// // // // //                   type=\"range\"\n// // // // //                   min=\"0\"\n// // // // //                   max=\"100\"\n// // // // //                   defaultValue=\"50\"\n// // // // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // // // //                 />\n// // // // //                 {this.renderTextInput(level + 1, index * 2)}\n// // // // //               </div>\n// // // // //               <div className=\"d-flex flex-column align-items-center\">\n// // // // //                 {this.renderNode(level + 1, index * 2 + 1)}\n// // // // //                 <input\n// // // // //                   type=\"range\"\n// // // // //                   min=\"0\"\n// // // // //                   max=\"100\"\n// // // // //                   defaultValue=\"50\"\n// // // // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // // // //                 />\n// // // // //                 {this.renderTextInput(level + 1, index * 2 + 1)}\n// // // // //               </div>\n// // // // //             </div>\n// // // // //           </React.Fragment>\n// // // // //         );\n// // // // //       }\n// // // // //       return null;\n// // // // //     };\n\n// // // // //     return (\n// // // // //       <div className=\"container\" style={customContainer}>\n// // // // //         <div\n// // // // //           style={{\n// // // // //             display: 'flex',\n// // // // //             flexDirection: 'column',\n// // // // //             alignItems: 'center',\n// // // // //             marginTop: '2rem',\n// // // // //           }}\n// // // // //         >\n// // // // //           <button\n// // // // //             style={{\n// // // // //               backgroundColor: '#007bff',\n// // // // //               border: '1px solid #007bff',\n// // // // //               borderRadius: '4px',\n// // // // //               color: 'white',\n// // // // //               padding: '0.5rem 1rem',\n// // // // //               margin: '1rem',\n// // // // //               pointerEvents: 'none',\n// // // // //             }}\n// // // // //           >\n// // // // //             {this.state.prompt}\n// // // // //           </button>\n// // // // //           <div\n// // // // //             style={{\n// // // // //               display: 'flex',\n// // // // //               justifyContent: 'center',\n// // // // //               alignItems: 'flex-end',\n// // // // //               marginTop: '2rem',\n// // // // //               flexWrap: 'wrap', // Add flex-wrap style\n// // // // //             }}\n// // // // //           >\n// // // // //             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem', flexWrap: 'wrap' }}>\n// // // // //               <div className=\"d-flex flex-column align-items-center\">\n// // // // //                 {this.renderNode(0, 0)}\n// // // // //                 <input\n// // // // //                   type=\"range\"\n// // // // //                   min=\"0\"\n// // // // //                   max=\"100\"\n// // // // //                   defaultValue=\"50\"\n// // // // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // // // //                 />\n// // // // //                 {this.renderTextInput(0, 0)}\n// // // // //                 {renderDividerAndNewNodes(0, 0)}\n// // // // //               </div>\n// // // // //               <div className=\"d-flex flex-column align-items-center\">\n// // // // //                 {this.renderNode(0, 1)}\n// // // // //                 <input\n// // // // //                   type=\"range\"\n// // // // //                   min=\"0\"\n// // // // //                   max=\"100\"\n// // // // //                   defaultValue=\"50\"\n// // // // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // // // //                 />\n// // // // //                 {this.renderTextInput(0, 1)}\n// // // // //                 {renderDividerAndNewNodes(0, 1)}\n// // // // //               </div>\n// // // // //             </div>\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       </div>\n// // // // //     );\n// // // // //   };\n// // // // // }\n\n// // // // // export default withStreamlitConnection(MyComponent);","map":{"version":3,"names":[],"sources":["/Users/tyna/code/select_critique_package/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["\n\n\n// import React, { useState } from 'react';\n// import {\n//   Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// const customContainer = {\n//   width: '100%',\n//   maxWidth: '100%',\n//   minHeight: '1000px',\n// };\n\n// type ChoicePairProps = {\n//   level: number;\n//   index: number;\n//   content: string[];\n//   updateTree: (level: number, index: number, textInput: string) => void;\n// };\n\n// const ChoicePair: React.FC<ChoicePairProps> = ({\n//   level,\n//   index,\n//   content,\n//   updateTree,\n// }) => {\n//   const [clicked, setClicked] = useState<boolean[]>([false, false]);\n//   const [textInput, setTextInput] = useState<string>('');\n\n//   const handleClick = (btnIndex: number) => {\n//     const newClickedState = clicked.map((c, i) => i === btnIndex);\n//     setClicked(newClickedState);\n//     setTextInput('');\n//   };\n\n//   const handleTextInputChange = (\n//     e: React.ChangeEvent<HTMLInputElement>\n//   ) => {\n//     setTextInput(e.target.value);\n//   };\n\n//   const handleButtonClick = () => {\n//     updateTree(level, index, textInput);\n//     setTextInput('');\n//   };\n\n//   return (\n//     <div className=\"choice-pair\">\n//       <div style={{ display: 'flex', justifyContent: 'center' }}>\n//         {content.map((btnContent, btnIndex) => (\n//           <div\n//             key={btnIndex}\n//             className=\"d-flex flex-column align-items-center\"\n//             style={{\n//               marginRight: btnIndex === 0 ? '2rem' : undefined,\n//               marginLeft: btnIndex === 1 ? '2rem' : undefined,\n//             }}\n//           >\n//             <button\n//               onClick={() => handleClick(btnIndex)}\n//               className={`btn btn-${clicked[btnIndex] ? 'secondary' : 'primary'\n//                 } my-1`}\n//               style={{\n//                 marginBottom: '1.5rem',\n//                 whiteSpace: 'normal',\n//                 width: '12rem',\n//               }}\n//             >\n//               {btnContent}\n//             </button>\n//             <div\n//               style={{\n//                 display: 'flex',\n//                 justifyContent: 'center',\n//                 alignItems: 'center',\n//                 minHeight: '1.5rem',\n//               }}\n//             >\n//               {!clicked[btnIndex] && clicked[1 - btnIndex] && (\n//                 <span style={{ color: 'white', fontStyle: 'italic' }}>\n//                   This response was not selected\n//                 </span>\n//               )}\n//             </div>\n//             {clicked[btnIndex] && (\n//               <input\n//                 type=\"range\"\n//                 min=\"0\"\n//                 max=\"100\"\n//                 defaultValue=\"50\"\n//                 style={{ width: '150px', marginBottom: '1rem' }}\n//               />\n//             )}\n//             {clicked[btnIndex] && (\n//               <div\n//                 className=\"input-group mb-3\"\n//                 style={{ marginTop: '1rem', width: '300px' }}\n//               >\n//                 <input\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   placeholder=\"Enter your commentary\"\n//                   value={textInput}\n//                   onChange={handleTextInputChange}\n//                 />\n//                 <button\n//                   className=\"btn btn-primary\"\n//                   type=\"button\"\n//                   onClick={handleButtonClick}\n//                 >\n//                   Critique\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// type Node = {\n//   level: number;\n//   index: number;\n//   content: string[];\n//   children: any[];\n// };\n\n// type MyComponentState = {\n//   tree: Node[];\n//   critiques: { [key: string]: string };\n// };\n\n// class MyComponent extends StreamlitComponentBase<MyComponentState> {\n//   constructor(props: any) {\n//     super(props);\n\n//     this.state = {\n//       tree: [\n//         {\n//           level: 0,\n//           index: 0,\n//           content: [\n//             'Because God said so',\n//             'Because of Rayleigh scattering',\n//           ],\n//           children: [],\n//         },\n//       ],\n//       critiques: {},\n//     };\n//   }\n\n//   updateTree = (level: number, index: number, textInput: string) => {\n//     const tree = JSON.parse(JSON.stringify(this.state.tree)) as Node[];\n\n//     const key = `L${level}I${index}`;\n//     const critiques = { ...this.state.critiques, [key]: textInput };\n\n//     const newNode: Node = {\n//       level: level + 1,\n//       index: tree.length,\n//       content: [\n//         `Level ${level + 1}, Index ${index * 2} response: ${textInput}`,\n//         `Level ${level + 1}, Index ${index * 2 + 1} response: ${textInput}`,\n//       ],\n//       children: [],\n//     };\n\n//     tree.push(newNode);\n//     this.setState({ tree, critiques });\n//   };\n\n//   render() {\n//     const { tree } = this.state;\n\n//     return (\n//       <div className=\"container\" style={customContainer}>\n//         <div\n//           style={{\n//             display: 'flex',\n//             flexDirection: 'column',\n//             alignItems: 'center',\n//             marginTop: '2rem',\n//           }}\n//         >\n//           <button\n//             style={{\n//               backgroundColor: '#007bff',\n//               border: '1px solid #007bff',\n//               borderRadius: '4px',\n//               color: 'white',\n//               padding: '0.5rem 1rem',\n//               margin: '1rem',\n//               pointerEvents: 'none',\n//             }}\n//           >\n//             Why is the sky blue?\n//           </button>\n//           <div>\n//             {tree.map((node, index) => (\n//               <div key={index}>\n//                 <ChoicePair\n//                   level={node.level}\n//                   index={node.index}\n//                   content={node.content}\n//                   updateTree={this.updateTree}\n//                 />\n//                 {index < tree.length - 1 && <hr />}\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default withStreamlitConnection(MyComponent);\n\n\n// import React, { useState } from 'react';\n// import {\n//   Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// const customContainer = {\n//   width: '100%',\n//   maxWidth: '100%',\n//   minHeight: '1000px',\n// };\n\n// type ChoicePairProps = {\n//   level: number;\n//   index: number;\n//   content: string[];\n//   updateTree: (level: number, index: number, textInput: string) => void;\n// };\n\n// const ChoicePair: React.FC<ChoicePairProps> = ({\n//   level,\n//   index,\n//   content,\n//   updateTree,\n// }) => {\n//   const [clicked, setClicked] = useState<boolean[]>([false, false]);\n//   const [textInput, setTextInput] = useState<string>('');\n\n//   const handleClick = (btnIndex: number) => {\n//     const newClickedState = clicked.map((c, i) => i === btnIndex);\n//     setClicked(newClickedState);\n//     setTextInput('');\n//   };\n\n//   const handleTextInputChange = (\n//     e: React.ChangeEvent<HTMLInputElement>\n//   ) => {\n//     setTextInput(e.target.value);\n//   };\n\n//   const handleButtonClick = () => {\n//     updateTree(level, index, textInput);\n//     setTextInput('');\n//   };\n\n//   return (\n//     <div className=\"choice-pair\">\n//       <div style={{ display: 'flex', justifyContent: 'center' }}>\n//         {content.map((btnContent, btnIndex) => (\n//           <div\n//             key={btnIndex}\n//             className=\"d-flex flex-column align-items-center\"\n//             style={{\n//               marginRight: btnIndex === 0 ? '2rem' : undefined,\n//               marginLeft: btnIndex === 1 ? '2rem' : undefined,\n//             }}\n//           >\n//             <button\n//               onClick={() => handleClick(btnIndex)}\n//               className={`btn btn-${clicked[btnIndex] ? 'secondary' : 'primary'} my-1`}\n//               style={{\n//                 marginBottom: '1.5rem',\n//                 whiteSpace: 'normal',\n//                 width: '12rem',\n//               }}\n//             >\n//               {btnContent}\n//             </button>\n//             <div\n//               style={{\n//                 display: 'flex',\n//                 justifyContent: 'center',\n//                 alignItems: 'center',\n//                 minHeight: '1.5rem',\n//               }}\n//             >\n//               {!clicked[btnIndex] && clicked[1 - btnIndex] && (\n//                 <span style={{ color: 'white', fontStyle: 'italic' }}>\n//                   This response was not selected\n//                 </span>\n//               )}\n//             </div>\n//             {clicked[btnIndex] && (\n//               <input\n//                 type=\"range\"\n//                 min=\"0\"\n//                 max=\"100\"\n//                 defaultValue=\"50\"\n//                 style={{ width: '150px', marginBottom: '1rem' }}\n//               />\n//             )}\n//             {clicked[btnIndex] && (\n//               <div\n//                 className=\"input-group mb-3\"\n//                 style={{ marginTop: '1rem', width: '300px' }}\n//               >\n//                 <input\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   placeholder=\"Enter your commentary\"\n//                   value={textInput}\n//                   onChange={handleTextInputChange}\n//                 />\n//                 <button\n//                   className=\"btn btn-primary\"\n//                   type=\"button\"\n//                   onClick={handleButtonClick}\n//                 >\n//                   Critique\n//                 </button>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// type Node = {\n//   level: number;\n//   index: number;\n//   content: string[];\n//   children: any[]; // Update with the proper type if possible.\n// };\n\n// type MyComponentState = {\n//   tree: Node[];\n// };\n\n// class MyComponent extends StreamlitComponentBase<MyComponentState> {\n//   constructor(props: any) {\n//     super(props);\n\n//     this.state = {\n//       tree: [\n//         {\n//           level: 0,\n//           index: 0,\n//           content: [\n//             'Because God said so',\n//             'Because of Raleigh scattering',\n//           ],\n//           children: [],\n//         },\n//       ],\n//     };\n//   }\n\n//   updateTree = (level: number, index: number, textInput: string) => {\n//     const tree = JSON.parse(JSON.stringify(this.state.tree)) as Node[];\n\n//     const newNode: Node = {\n//       level: level + 1,\n//       index: tree.length,\n//       content: [\n//         `Level ${level + 1}, Index ${index * 2} response: ${textInput}`,\n//         `Level ${level + 1}, Index ${index * 2 + 1} response: ${textInput}`,\n//       ],\n//       children: [],\n//     };\n\n//     tree.push(newNode);\n//     this.setState({ tree });\n//   };\n\n//   render() {\n//     const { tree } = this.state;\n\n//     return (\n//       <div className=\"container\" style={customContainer}>\n//         <div\n//           style={{\n//             display: 'flex',\n//             flexDirection: 'column',\n//             alignItems: 'center',\n//             marginTop: '2rem',\n//           }}\n//         >\n//           <button\n//             style={{\n//               backgroundColor: '#007bff',\n//               border: '1px solid #007bff',\n//               borderRadius: '4px',\n//               color: 'white',\n//               padding: '0.5rem 1rem',\n//               margin: '1rem',\n//               pointerEvents: 'none',\n//             }}\n//           >\n//             Why is the sky blue?\n//           </button>\n//           <div>\n//             {tree.map((node, index) => (\n//               <div key={index}>\n//                 <ChoicePair\n//                   level={node.level}\n//                   index={node.index}\n//                   content={node.content}\n//                   updateTree={this.updateTree}\n//                 />\n//                 {index < tree.length - 1 && <hr />}\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default withStreamlitConnection(MyComponent);\n\n\n// // // import React, { ReactNode } from 'react';\n// // // import {\n// // //     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// // // } from 'streamlit-component-lib';\n\n// // // interface State {\n// // //   prompt: string;\n// // //   tree: (string | string[][])[][];\n// // //   clicked: boolean[][];\n// // // }\n\n// // // const customContainer = {\n// // //   width: '100%',\n// // //   maxWidth: '100%',\n// // //   minHeight: '1000px',\n// // // };\n\n// // // class MyComponent extends StreamlitComponentBase<State> {\n// // //   public state: State = {\n// // //     prompt: 'Why is the sky blue?',\n// // //     tree: [\n// // //       [\n// // //         ['Because God said so', []],\n// // //         ['Because of Raleigh scattering', []],\n// // //       ],\n// // //     ],\n// // //     clicked: [],\n// // //   };\n\n// // //   private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n// // //     const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// // //     tree[level] = tree[level] || [];\n// // //     tree[level][index] = [text, newNodes];\n// // //     this.setState({ tree });\n// // //   };\n\n\n// // //   private handleClick = (level: number, index: number) => {\n// // //     const clicked = JSON.parse(JSON.stringify(this.state.clicked)) as boolean[][];\n// // //     clicked[level] = clicked[level] || [];\n\n// // //     if (clicked[level][index]) {\n// // //       clicked[level][index] = false;\n// // //     } else {\n// // //       clicked[level][index] = true;\n// // //       clicked[level][1 - index] = false;\n// // //     }\n\n// // //     this.setState({ clicked }, () => {\n// // //       // If a button is unclicked, clear the input field associated with that button\n// // //       const unclickedInput = document.getElementById(\n// // //         `inputDefault_${level}_${index}`\n// // //       ) as HTMLInputElement;\n// // //       if (unclickedInput) {\n// // //         unclickedInput.value = '';\n// // //       }\n// // //     });\n// // //   };\n\n\n\n\n\n// // //   private renderNode = (level: number, index: number) => {\n// // //     const content = this.state.tree[level]?.[index]?.[0];\n// // //     const isClicked = this.state.clicked[level]?.[index];\n// // //     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n// // //     if (content) {\n// // //       return (\n// // //         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n// // //           <button\n// // //             onClick={() => {\n// // //               this.handleClick(level, index);\n// // //             }}\n// // //             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n// // //             style={{ marginBottom: '1.5rem', whiteSpace: 'normal', width: '12rem' }}\n// // //           >\n// // //             {content}\n// // //           </button>\n// // //           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n// // //             {!isClicked && otherButtonClicked && (\n// // //               <span style={{ color: 'white', fontStyle: 'italic' }}>\n// // //                 This response was not selected\n// // //               </span>\n// // //             )}\n// // //           </div>\n// // //         </div>\n// // //       );\n// // //     }\n// // //     return null;\n// // //   };\n\n// // //   private generateNewNodes = (level: number, index: number) => {\n// // //     if (level === 0) {\n// // //       if (index === 0) {\n// // //         return [\n// // //           [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n// // //           [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n// // //         ];\n// // //       } else {\n// // //         return [\n// // //           [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n// // //           [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n// // //         ];\n// // //       }\n// // //     } else {\n// // //       return [\n// // //         [`Level ${level + 1}, Index ${index * 2} response`],\n// // //         [`Level ${level + 1}, Index ${index * 2 + 1} response`]\n// // //       ];\n// // //     }\n// // //   };\n\n// // //   private renderTextInput = (level: number, index: number) => {\n// // //     const isClicked = this.state.clicked[level]?.[index];\n\n// // //     const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n// // //       if (event.key === 'Enter') {\n// // //         const commentary = event.currentTarget.value;\n// // //         this.handleClick(level, index);\n\n// // //         // Generate new nodes without modifying the current node text\n// // //         const newNodes = this.generateNewNodes(level, index);\n\n// // //         this.addToTree(level + 1, index * 2, newNodes[0][0], []);\n// // //         this.addToTree(level + 1, index * 2 + 1, newNodes[1][0], []);\n// // //       }\n// // //     };\n\n// // //     const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n// // //       const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n\n// // //       const clicked = [...this.state.clicked] as boolean[][];\n// // //       clicked[level] = clicked[level] || [];\n// // //       clicked[level][index] = true;\n// // //       clicked[level][1 - index] = false;\n\n// // //       const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n\n// // //       let newNodes: string[][] = [];\n\n// // //       if (level === 0) {\n// // //         if (index === 0) {\n// // //           newNodes = [\n// // //             [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n// // //             [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n// // //           ];\n// // //         } else {\n// // //           newNodes = [\n// // //             [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n// // //             [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n// // //           ];\n// // //         }\n// // //       } else {\n// // //         newNodes = [\n// // //           [`Level ${level + 1}, Index ${index * 2} response`],\n// // //           [`Level ${level + 1}, Index ${index * 2 + 1} response`]\n// // //         ];\n// // //       }\n\n// // //       tree[level + 1] = tree[level + 1] || [];\n// // //       tree[level + 1][index * 2] = [newNodes[0][0], []];\n// // //       tree[level + 1][index * 2 + 1] = [newNodes[1][0], []];\n\n// // //       this.setState({ clicked, tree });\n// // //     };\n\n\n// // //     if (isClicked) {\n// // //       return (\n// // //         <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n// // //           <input\n// // //             type=\"text\"\n// // //             className=\"form-control\"\n// // //             placeholder=\"Enter your commentary\"\n// // //             id={`inputDefault_${level}_${index}`}\n// // //             onKeyPress={handleKeyPress}\n// // //           />\n// // //           <button\n// // //             className=\"btn btn-primary\"\n// // //             type=\"button\"\n// // //             id={`button-addon2_${level}_${index}`}\n// // //             onClick={handleButtonClick} // Add this line back\n// // //           >\n// // //             Critique\n// // //           </button>\n// // //         </div>\n// // //       );\n// // //     }\n// // //     return null;\n// // //   };\n\n\n// // //   public render = (): ReactNode => {\n// // //     const renderDividerAndNewNodes = (level: number, index: number) => {\n// // //       const isClicked = this.state.clicked[level]?.[index];\n// // //       const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n// // //       if (isClicked && newNodesExist) {\n// // //         return (\n// // //           <React.Fragment>\n// // //             <hr />\n// // //             <div\n// // //               style={{\n// // //                 display: 'flex',\n// // //                 justifyContent: 'center',\n// // //                 alignItems: 'flex-end',\n// // //                 marginTop: '2rem',\n// // //                 flexWrap: 'wrap',\n// // //               }}\n// // //             >\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(level + 1, index * 2)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(level + 1, index * 2)}\n// // //               </div>\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(level + 1, index * 2 + 1)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(level + 1, index * 2 + 1)}\n// // //               </div>\n// // //             </div>\n// // //           </React.Fragment>\n// // //         );\n// // //       }\n// // //       return null;\n// // //     };\n\n// // //     return (\n// // //       <div className=\"container\" style={customContainer}>\n// // //         <div\n// // //           style={{\n// // //             display: 'flex',\n// // //             flexDirection: 'column',\n// // //             alignItems: 'center',\n// // //             marginTop: '2rem',\n// // //           }}\n// // //         >\n// // //           <button\n// // //             style={{\n// // //               backgroundColor: '#007bff',\n// // //               border: '1px solid #007bff',\n// // //               borderRadius: '4px',\n// // //               color: 'white',\n// // //               padding: '0.5rem 1rem',\n// // //               margin: '1rem',\n// // //               pointerEvents: 'none',\n// // //             }}\n// // //           >\n// // //             {this.state.prompt}\n// // //           </button>\n// // //           <div\n// // //             style={{\n// // //               display: 'flex',\n// // //               justifyContent: 'center',\n// // //               alignItems: 'flex-end',\n// // //               marginTop: '2rem',\n// // //               flexWrap: 'wrap',\n// // //             }}\n// // //           >\n// // //             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem', flexWrap: 'wrap' }}>\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(0, 0)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(0, 0)}\n// // //                 {renderDividerAndNewNodes(0, 0)}\n// // //               </div>\n// // //               <div className=\"d-flex flex-column align-items-center\">\n// // //                 {this.renderNode(0, 1)}\n// // //                 <input\n// // //                   type=\"range\"\n// // //                   min=\"0\"\n// // //                   max=\"100\"\n// // //                   defaultValue=\"50\"\n// // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // //                 />\n// // //                 {this.renderTextInput(0, 1)}\n// // //                 {renderDividerAndNewNodes(0, 1)}\n// // //               </div>\n// // //             </div>\n// // //           </div>\n// // //         </div>\n// // //       </div>\n// // //     );\n// // //   };\n// // // }\n\n// // // export default withStreamlitConnection(MyComponent);\n\n\n// // // // // import React, { ReactNode } from 'react';\n// // // // // import {\n// // // // //     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// // // // // } from 'streamlit-component-lib';\n\n// // // // // interface State {\n// // // // //   prompt: string;\n// // // // //   tree: (string | string[][])[][];\n// // // // //   clicked: boolean[][];\n// // // // // }\n\n// // // // // const customContainer = {\n// // // // //   width: '100%',\n// // // // //   maxWidth: '100%',\n// // // // //   minHeight: '1000px',\n// // // // // };\n\n// // // // // class MyComponent extends StreamlitComponentBase<State> {\n// // // // //   public state: State = {\n// // // // //     prompt: 'Why is the sky blue?',\n// // // // //     tree: [\n// // // // //       [\n// // // // //         ['Because God said so', []],\n// // // // //         ['Because of Raleigh scattering', []],\n// // // // //       ],\n// // // // //     ],\n// // // // //     clicked: [],\n// // // // //   };\n\n// // // // //   private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n// // // // //     const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// // // // //     tree[level] = tree[level] || [];\n// // // // //     tree[level][index] = [text, newNodes];\n// // // // //     this.setState({ tree });\n// // // // //   };\n\n// // // // //   private handleClick = (level: number, index: number) => {\n// // // // //     const clicked = [...this.state.clicked] as boolean[][];\n// // // // //     clicked[level] = clicked[level] || [];\n// // // // //     clicked[level][index] = true;\n// // // // //     clicked[level][1 - index] = false;\n// // // // //     this.setState({ clicked });\n// // // // //   };\n\n// // // // //   private renderNode = (level: number, index: number) => {\n// // // // //     const content = this.state.tree[level]?.[index]?.[0];\n// // // // //     const isClicked = this.state.clicked[level]?.[index];\n// // // // //     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n// // // // //     if (content) {\n// // // // //       return (\n// // // // //         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n// // // // //           <button\n// // // // //             onClick={() => {\n// // // // //               this.handleClick(level, index);\n// // // // //             }}\n// // // // //             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n// // // // //             style={{ marginBottom: '1.5rem', whiteSpace: 'normal', width: '12rem' }} // Add white-space and width styles\n// // // // //           >\n// // // // //             {content}\n// // // // //           </button>\n// // // // //           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n// // // // //             {!isClicked && otherButtonClicked && (\n// // // // //               <span style={{ color: 'white', fontStyle: 'italic' }}>\n// // // // //                 This response was not selected\n// // // // //               </span>\n// // // // //             )}\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       );\n// // // // //     }\n// // // // //     return null;\n// // // // //   };\n\n// // // // //   private renderTextInput = (level: number, index: number) => {\n// // // // //     const isClicked = this.state.clicked[level]?.[index];\n\n// // // // //     const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n// // // // //       if (event.key === 'Enter') {\n// // // // //         const commentary = event.currentTarget.value;\n// // // // //         this.handleClick(level, index);\n// // // // //         this.addToTree(level + 1, index * 2, commentary, []);\n// // // // //       }\n// // // // //     };\n\n// // // // //     const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n// // // // //       const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n\n// // // // //       const clicked = [...this.state.clicked] as boolean[][];\n// // // // //       clicked[level] = clicked[level] || [];\n// // // // //       clicked[level][index] = true;\n// // // // //       clicked[level][1 - index] = false;\n\n// // // // //       const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// // // // //       const newNodes = level === 0\n// // // // //         ? index === 0\n// // // // //           ? [\n// // // // //             [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n// // // // //             [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n// // // // //           ]\n// // // // //           : [\n// // // // //             [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n// // // // //             [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n// // // // //           ]\n// // // // //         : []; // For deeper levels, you can add more new nodes here\n\n// // // // //       tree[level + 1] = tree[level + 1] || [];\n// // // // //       tree[level + 1][index * 2] = [newNodes[0], []];\n// // // // //       tree[level + 1][index * 2 + 1] = [newNodes[1], []];\n\n// // // // //       this.setState({ clicked, tree });\n// // // // //     };\n\n// // // // //     if (isClicked) {\n// // // // //       return (\n// // // // //         <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n// // // // //           <input\n// // // // //             type=\"text\"\n// // // // //             className=\"form-control\"\n// // // // //             placeholder=\"Enter your commentary\"\n// // // // //             id={`inputDefault_${level}_${index}`}\n// // // // //             onKeyPress={handleKeyPress}\n// // // // //           />\n// // // // //           <button\n// // // // //             className=\"btn btn-primary\"\n// // // // //             type=\"button\"\n// // // // //             id={`button-addon2_${level}_${index}`}\n// // // // //             onClick={handleButtonClick}\n// // // // //           >\n// // // // //             Critique\n// // // // //           </button>\n// // // // //         </div>\n// // // // //       );\n// // // // //     }\n// // // // //     return null;\n// // // // //   };\n\n// // // // //   public render = (): ReactNode => {\n// // // // //     const renderDividerAndNewNodes = (level: number, index: number) => {\n// // // // //       const isClicked = this.state.clicked[level]?.[index];\n// // // // //       const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n// // // // //       if (isClicked && newNodesExist) {\n// // // // //         return (\n// // // // //           <React.Fragment>\n// // // // //             <hr />\n// // // // //             <div\n// // // // //               style={{\n// // // // //                 display: 'flex',\n// // // // //                 justifyContent: 'center',\n// // // // //                 alignItems: 'flex-end',\n// // // // //                 marginTop: '2rem',\n// // // // //                 flexWrap: 'wrap', // Add flex-wrap style\n// // // // //               }}\n// // // // //             >\n// // // // //               <div className=\"d-flex flex-column align-items-center\">\n// // // // //                 {this.renderNode(level + 1, index * 2)}\n// // // // //                 <input\n// // // // //                   type=\"range\"\n// // // // //                   min=\"0\"\n// // // // //                   max=\"100\"\n// // // // //                   defaultValue=\"50\"\n// // // // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // // // //                 />\n// // // // //                 {this.renderTextInput(level + 1, index * 2)}\n// // // // //               </div>\n// // // // //               <div className=\"d-flex flex-column align-items-center\">\n// // // // //                 {this.renderNode(level + 1, index * 2 + 1)}\n// // // // //                 <input\n// // // // //                   type=\"range\"\n// // // // //                   min=\"0\"\n// // // // //                   max=\"100\"\n// // // // //                   defaultValue=\"50\"\n// // // // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // // // //                 />\n// // // // //                 {this.renderTextInput(level + 1, index * 2 + 1)}\n// // // // //               </div>\n// // // // //             </div>\n// // // // //           </React.Fragment>\n// // // // //         );\n// // // // //       }\n// // // // //       return null;\n// // // // //     };\n\n// // // // //     return (\n// // // // //       <div className=\"container\" style={customContainer}>\n// // // // //         <div\n// // // // //           style={{\n// // // // //             display: 'flex',\n// // // // //             flexDirection: 'column',\n// // // // //             alignItems: 'center',\n// // // // //             marginTop: '2rem',\n// // // // //           }}\n// // // // //         >\n// // // // //           <button\n// // // // //             style={{\n// // // // //               backgroundColor: '#007bff',\n// // // // //               border: '1px solid #007bff',\n// // // // //               borderRadius: '4px',\n// // // // //               color: 'white',\n// // // // //               padding: '0.5rem 1rem',\n// // // // //               margin: '1rem',\n// // // // //               pointerEvents: 'none',\n// // // // //             }}\n// // // // //           >\n// // // // //             {this.state.prompt}\n// // // // //           </button>\n// // // // //           <div\n// // // // //             style={{\n// // // // //               display: 'flex',\n// // // // //               justifyContent: 'center',\n// // // // //               alignItems: 'flex-end',\n// // // // //               marginTop: '2rem',\n// // // // //               flexWrap: 'wrap', // Add flex-wrap style\n// // // // //             }}\n// // // // //           >\n// // // // //             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem', flexWrap: 'wrap' }}>\n// // // // //               <div className=\"d-flex flex-column align-items-center\">\n// // // // //                 {this.renderNode(0, 0)}\n// // // // //                 <input\n// // // // //                   type=\"range\"\n// // // // //                   min=\"0\"\n// // // // //                   max=\"100\"\n// // // // //                   defaultValue=\"50\"\n// // // // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // // // //                 />\n// // // // //                 {this.renderTextInput(0, 0)}\n// // // // //                 {renderDividerAndNewNodes(0, 0)}\n// // // // //               </div>\n// // // // //               <div className=\"d-flex flex-column align-items-center\">\n// // // // //                 {this.renderNode(0, 1)}\n// // // // //                 <input\n// // // // //                   type=\"range\"\n// // // // //                   min=\"0\"\n// // // // //                   max=\"100\"\n// // // // //                   defaultValue=\"50\"\n// // // // //                   style={{ width: '150px', marginTop: '1rem' }}\n// // // // //                 />\n// // // // //                 {this.renderTextInput(0, 1)}\n// // // // //                 {renderDividerAndNewNodes(0, 1)}\n// // // // //               </div>\n// // // // //             </div>\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       </div>\n// // // // //     );\n// // // // //   };\n// // // // // }\n\n// // // // // export default withStreamlitConnection(MyComponent);\n"],"mappings},"metadata":{},"sourceType":"module"}