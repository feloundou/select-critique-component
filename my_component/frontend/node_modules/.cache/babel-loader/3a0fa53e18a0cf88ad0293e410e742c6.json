{"ast":null,"code":"var _jsxFileName = \"/Users/tyna/code/select_critique_package/my_component/frontend/src/MyComponent.tsx\";\nimport React from 'react';\nimport { StreamlitComponentBase, withStreamlitConnection } from 'streamlit-component-lib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst customContainer = {\n  width: '100%',\n  maxWidth: '100%',\n  minHeight: '1000px'\n};\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      prompt: 'Why is the sky blue?',\n      tree: [[['Because God said so', []], ['Because of Raleigh scattering', []]]],\n      clicked: []\n    };\n    this.addToTree = (level, index, text, newNodes) => {\n      const tree = JSON.parse(JSON.stringify(this.state.tree));\n      tree[level] = tree[level] || [];\n      tree[level][index] = [text, newNodes];\n      this.setState({\n        tree\n      });\n    };\n    this.handleClick = (level, index) => {\n      this.setState(prevState => {\n        const clicked = [...prevState.clicked];\n        clicked[level] = clicked[level] || [];\n        if (clicked[level][index]) {\n          clicked[level][index] = false;\n          clicked[level][1 - index] = false;\n        } else {\n          clicked[level][index] = true;\n          clicked[level][1 - index] = false;\n        }\n        return {\n          clicked\n        };\n      });\n    };\n    this.generateNewNodes = (level, index) => {\n      const newNodes = level === 0 ? index === 0 ? [[\"God wanted us to be happy, and he made the sky to give us light and food\"], [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]] : [[\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"], [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]] : [[`Level ${level + 1}, Index ${index * 2} response`], [`Level ${level + 1}, Index ${index * 2 + 1} response`]];\n      this.addToTree(level + 1, index * 2, newNodes[0], []);\n      this.addToTree(level + 1, index * 2 + 1, newNodes[1], []);\n    };\n    this.renderNode = (level, index) => {\n      var _this$state$tree$leve, _this$state$tree$leve2, _this$state$clicked$l;\n      const content = (_this$state$tree$leve = this.state.tree[level]) === null || _this$state$tree$leve === void 0 ? void 0 : (_this$state$tree$leve2 = _this$state$tree$leve[index]) === null || _this$state$tree$leve2 === void 0 ? void 0 : _this$state$tree$leve2[0];\n      const isClicked = (_this$state$clicked$l = this.state.clicked[level]) === null || _this$state$clicked$l === void 0 ? void 0 : _this$state$clicked$l[index];\n      if (content) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex flex-column align-items-center\",\n          style: {\n            marginRight: index === 0 ? '2rem' : undefined,\n            marginLeft: index === 1 ? '2rem' : undefined\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              this.handleClick(level, index);\n            },\n            className: `btn btn-${isClicked ? 'secondary' : 'primary'} my-1`,\n            style: {\n              marginBottom: '1.5rem',\n              whiteSpace: 'normal',\n              width: '12rem'\n            } // Add white-space and width styles\n            ,\n            children: content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              minHeight: '1.5rem'\n            },\n            children: !isClicked && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: 'white',\n                fontStyle: 'italic'\n              },\n              children: \"This response was not selected\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }, this);\n      }\n      return null;\n    };\n    this.render = () => {\n      const renderDividerAndNewNodes = (level, index) => {\n        var _this$state$clicked$l2, _this$state$tree, _this$state$tree2;\n        const isClicked = (_this$state$clicked$l2 = this.state.clicked[level]) === null || _this$state$clicked$l2 === void 0 ? void 0 : _this$state$clicked$l2[index];\n        const newNodesExist = (_this$state$tree = this.state.tree[level + 1]) === null || _this$state$tree === void 0 ? void 0 : (_this$state$tree2 = _this$state$tree[index * 2]) === null || _this$state$tree2 === void 0 ? void 0 : _this$state$tree2[0];\n        if (isClicked && newNodesExist) {\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'flex-end',\n                marginTop: '2rem',\n                flexWrap: 'wrap' // Add flex-wrap style\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"d-flex flex-column align-items-center\",\n                children: this.renderNode(level + 1, index * 2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"d-flex flex-column align-items-center\",\n                children: this.renderNode(level + 1, index * 2 + 1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 11\n          }, this);\n        }\n        return null;\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        style: customContainer,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            marginTop: '2rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              backgroundColor: '#007bff',\n              border: '1px solid #007bff',\n              borderRadius: '4px',\n              color: 'white',\n              padding: '0.5rem 1rem',\n              margin: '1rem',\n              pointerEvents: 'none'\n            },\n            children: this.state.prompt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'flex-end',\n              marginTop: '2rem',\n              flexWrap: 'wrap' // Add flex-wrap style\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                marginLeft: '-12rem',\n                marginRight: '-12rem',\n                flexWrap: 'wrap'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"d-flex flex-column align-items-center\",\n                children: [this.renderNode(0, 0), renderDividerAndNewNodes(0, 0)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"d-flex flex-column align-items-center\",\n                children: [this.renderNode(0, 1), renderDividerAndNewNodes(0, 1)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }, this);\n    };\n  }\n}\nexport default _c = withStreamlitConnection(MyComponent);\n\n// import React, { ReactNode } from 'react';\n// import {\n//     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// interface State {\n//   prompt: string;\n//   tree: (string | string[][])[][];\n//   clicked: boolean[][];\n// }\n\n// const customContainer = {\n//   width: '100%',\n//   maxWidth: '100%',\n//   minHeight: '1000px',\n// };\n\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state: State = {\n//     prompt: 'Why is the sky blue?',\n//     tree: [\n//       [\n//         ['Because God said so', []],\n//         ['Because of Raleigh scattering', []],\n//       ],\n//     ],\n//     clicked: [],\n//   };\n\n//   private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n//     const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n//     tree[level] = tree[level] || [];\n//     tree[level][index] = [text, newNodes];\n//     this.setState({ tree });\n//   };\n\n//   private handleClick = (level: number, index: number) => {\n//     const clicked = [...this.state.clicked] as boolean[][];\n//     clicked[level] = clicked[level] || [];\n//     clicked[level][index] = !clicked[level][index];\n//     clicked[level][1 - index] = false;\n//     this.setState({ clicked });\n//   };\n\n//   private renderNode = (level: number, index: number) => {\n//     const content = this.state.tree[level]?.[index]?.[0];\n//     const isClicked = this.state.clicked[level]?.[index];\n//     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n//     if (content) {\n//       return (\n//         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n//           <button\n//             onClick={() => {\n//               this.handleClick(level, index);\n//             }}\n//             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n//             style={{ marginBottom: '1.5rem', whiteSpace: 'normal', width: '12rem' }} // Add white-space and width styles\n//           >\n//             {content}\n//           </button>\n//           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n//             {!isClicked && otherButtonClicked && (\n//               <span style={{ color: 'white', fontStyle: 'italic' }}>\n//                 This response was not selected\n//               </span>\n//             )}\n//           </div>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   private renderTextInput = (level: number, index: number) => {\n//     const isClicked = this.state.clicked[level]?.[index];\n\n//     const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n//       if (event.key === 'Enter') {\n//         const commentary = event.currentTarget.value;\n//         this.handleClick(level, index);\n//         this.addToTree(level + 1, index * 2, commentary, []);\n//       }\n//     };\n\n//     const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n//       const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n\n//       const clicked = [...this.state.clicked] as boolean[][];\n//       clicked[level] = clicked[level] || [];\n//       clicked[level][index] = true;\n//       clicked[level][1 - index] = false;\n\n//       const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n\n//       let newNodes: string[][] = [];\n\n//       if (level === 0) {\n//         if (index === 0) {\n//           newNodes = [\n//             [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n//             [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n//           ];\n//         } else {\n//           newNodes = [\n//             [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n//             [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n//           ];\n//         }\n//       } else {\n//         newNodes = [\n//           [`Level ${level + 1}, Index ${index * 2} response`],\n//           [`Level ${level + 1}, Index ${index * 2 + 1} response`]\n//         ];\n//       }\n\n//       tree[level + 1] = tree[level + 1] || [];\n//       tree[level + 1][index * 2] = [newNodes[0], []];\n//       tree[level + 1][index * 2 + 1] = [newNodes[1], []];\n\n//       this.setState({ clicked, tree });\n//     };\n\n//     if (isClicked) {\n//       return (\n//         <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             placeholder=\"Enter your commentary\"\n//             id={`inputDefault_${level}_${index}`}\n//             onKeyPress={handleKeyPress}\n//           />\n//           <button\n//             className=\"btn btn-primary\"\n//             type=\"button\"\n//             id={`button-addon2_${level}_${index}`}\n//             onClick={handleButtonClick}\n//           >\n//             Critique\n//           </button>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   public render = (): ReactNode => {\n//     const renderDividerAndNewNodes = (level: number, index: number) => {\n//       const isClicked = this.state.clicked[level]?.[index];\n//       const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n//       if (isClicked && newNodesExist) {\n//         return (\n//           <React.Fragment>\n//             <hr />\n//             <div\n//               style={{\n//                 display: 'flex',\n//                 justifyContent: 'center',\n//                 alignItems: 'flex-end',\n//                 marginTop: '2rem',\n//                 flexWrap: 'wrap', // Add flex-wrap style\n//               }}\n//             >\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(level + 1, index * 2)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(level + 1, index * 2)}\n//               </div>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(level + 1, index * 2 + 1)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(level + 1, index * 2 + 1)}\n//               </div>\n//             </div>\n//           </React.Fragment>\n//         );\n//       }\n//       return null;\n//     };\n\n//     return (\n//       <div className=\"container\" style={customContainer}>\n//         <div\n//           style={{\n//             display: 'flex',\n//             flexDirection: 'column',\n//             alignItems: 'center',\n//             marginTop: '2rem',\n//           }}\n//         >\n//           <button\n//             style={{\n//               backgroundColor: '#007bff',\n//               border: '1px solid #007bff',\n//               borderRadius: '4px',\n//               color: 'white',\n//               padding: '0.5rem 1rem',\n//               margin: '1rem',\n//               pointerEvents: 'none',\n//             }}\n//           >\n//             {this.state.prompt}\n//           </button>\n//           <div\n//             style={{\n//               display: 'flex',\n//               justifyContent: 'center',\n//               alignItems: 'flex-end',\n//               marginTop: '2rem',\n//               flexWrap: 'wrap', // Add flex-wrap style\n//             }}\n//           >\n//             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem', flexWrap: 'wrap' }}>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(0, 0)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(0, 0)}\n//                 {renderDividerAndNewNodes(0, 0)}\n//               </div>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(0, 1)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(0, 1)}\n//                 {renderDividerAndNewNodes(0, 1)}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   };\n// }\n\n// export default withStreamlitConnection(MyComponent);\n\n// // import React, { ReactNode } from 'react';\n// // import {\n// //     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// // } from 'streamlit-component-lib';\n\n// // interface State {\n// //   prompt: string;\n// //   tree: (string | string[][])[][];\n// //   clicked: boolean[][];\n// // }\n\n// // const customContainer = {\n// //   width: '100%',\n// //   maxWidth: '100%',\n// //   minHeight: '1000px',\n// // };\n\n// // class MyComponent extends StreamlitComponentBase<State> {\n// //   public state: State = {\n// //     prompt: 'Why is the sky blue?',\n// //     tree: [\n// //       [\n// //         ['Because God said so', []],\n// //         ['Because of Raleigh scattering', []],\n// //       ],\n// //     ],\n// //     clicked: [],\n// //   };\n\n// //   private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n// //     const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// //     tree[level] = tree[level] || [];\n// //     tree[level][index] = [text, newNodes];\n// //     this.setState({ tree });\n// //   };\n\n// //   private handleClick = (level: number, index: number) => {\n// //     const clicked = [...this.state.clicked] as boolean[][];\n// //     clicked[level] = clicked[level] || [];\n// //     clicked[level][index] = true;\n// //     clicked[level][1 - index] = false;\n// //     this.setState({ clicked });\n// //   };\n\n// //   private renderNode = (level: number, index: number) => {\n// //     const content = this.state.tree[level]?.[index]?.[0];\n// //     const isClicked = this.state.clicked[level]?.[index];\n// //     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n// //     if (content) {\n// //       return (\n// //         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n// //           <button\n// //             onClick={() => {\n// //               this.handleClick(level, index);\n// //             }}\n// //             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n// //             style={{ marginBottom: '1.5rem', whiteSpace: 'normal', width: '12rem' }} // Add white-space and width styles\n// //           >\n// //             {content}\n// //           </button>\n// //           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n// //             {!isClicked && otherButtonClicked && (\n// //               <span style={{ color: 'white', fontStyle: 'italic' }}>\n// //                 This response was not selected\n// //               </span>\n// //             )}\n// //           </div>\n// //         </div>\n// //       );\n// //     }\n// //     return null;\n// //   };\n\n// //   private renderTextInput = (level: number, index: number) => {\n// //     const isClicked = this.state.clicked[level]?.[index];\n\n// //     const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n// //       if (event.key === 'Enter') {\n// //         const commentary = event.currentTarget.value;\n// //         this.handleClick(level, index);\n// //         this.addToTree(level + 1, index * 2, commentary, []);\n// //       }\n// //     };\n\n// //     const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n// //       const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n\n// //       const clicked = [...this.state.clicked] as boolean[][];\n// //       clicked[level] = clicked[level] || [];\n// //       clicked[level][index] = true;\n// //       clicked[level][1 - index] = false;\n\n// //       const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// //       const newNodes = level === 0\n// //         ? index === 0\n// //           ? [\n// //             [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n// //             [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n// //           ]\n// //           : [\n// //             [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n// //             [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n// //           ]\n// //         : []; // For deeper levels, you can add more new nodes here\n\n// //       tree[level + 1] = tree[level + 1] || [];\n// //       tree[level + 1][index * 2] = [newNodes[0], []];\n// //       tree[level + 1][index * 2 + 1] = [newNodes[1], []];\n\n// //       this.setState({ clicked, tree });\n// //     };\n\n// //     if (isClicked) {\n// //       return (\n// //         <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n// //           <input\n// //             type=\"text\"\n// //             className=\"form-control\"\n// //             placeholder=\"Enter your commentary\"\n// //             id={`inputDefault_${level}_${index}`}\n// //             onKeyPress={handleKeyPress}\n// //           />\n// //           <button\n// //             className=\"btn btn-primary\"\n// //             type=\"button\"\n// //             id={`button-addon2_${level}_${index}`}\n// //             onClick={handleButtonClick}\n// //           >\n// //             Critique\n// //           </button>\n// //         </div>\n// //       );\n// //     }\n// //     return null;\n// //   };\n\n// //   public render = (): ReactNode => {\n// //     const renderDividerAndNewNodes = (level: number, index: number) => {\n// //       const isClicked = this.state.clicked[level]?.[index];\n// //       const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n// //       if (isClicked && newNodesExist) {\n// //         return (\n// //           <React.Fragment>\n// //             <hr />\n// //             <div\n// //               style={{\n// //                 display: 'flex',\n// //                 justifyContent: 'center',\n// //                 alignItems: 'flex-end',\n// //                 marginTop: '2rem',\n// //                 flexWrap: 'wrap', // Add flex-wrap style\n// //               }}\n// //             >\n// //               <div className=\"d-flex flex-column align-items-center\">\n// //                 {this.renderNode(level + 1, index * 2)}\n// //                 <input\n// //                   type=\"range\"\n// //                   min=\"0\"\n// //                   max=\"100\"\n// //                   defaultValue=\"50\"\n// //                   style={{ width: '150px', marginTop: '1rem' }}\n// //                 />\n// //                 {this.renderTextInput(level + 1, index * 2)}\n// //               </div>\n// //               <div className=\"d-flex flex-column align-items-center\">\n// //                 {this.renderNode(level + 1, index * 2 + 1)}\n// //                 <input\n// //                   type=\"range\"\n// //                   min=\"0\"\n// //                   max=\"100\"\n// //                   defaultValue=\"50\"\n// //                   style={{ width: '150px', marginTop: '1rem' }}\n// //                 />\n// //                 {this.renderTextInput(level + 1, index * 2 + 1)}\n// //               </div>\n// //             </div>\n// //           </React.Fragment>\n// //         );\n// //       }\n// //       return null;\n// //     };\n\n// //     return (\n// //       <div className=\"container\" style={customContainer}>\n// //         <div\n// //           style={{\n// //             display: 'flex',\n// //             flexDirection: 'column',\n// //             alignItems: 'center',\n// //             marginTop: '2rem',\n// //           }}\n// //         >\n// //           <button\n// //             style={{\n// //               backgroundColor: '#007bff',\n// //               border: '1px solid #007bff',\n// //               borderRadius: '4px',\n// //               color: 'white',\n// //               padding: '0.5rem 1rem',\n// //               margin: '1rem',\n// //               pointerEvents: 'none',\n// //             }}\n// //           >\n// //             {this.state.prompt}\n// //           </button>\n// //           <div\n// //             style={{\n// //               display: 'flex',\n// //               justifyContent: 'center',\n// //               alignItems: 'flex-end',\n// //               marginTop: '2rem',\n// //               flexWrap: 'wrap', // Add flex-wrap style\n// //             }}\n// //           >\n// //             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem', flexWrap: 'wrap' }}>\n// //               <div className=\"d-flex flex-column align-items-center\">\n// //                 {this.renderNode(0, 0)}\n// //                 <input\n// //                   type=\"range\"\n// //                   min=\"0\"\n// //                   max=\"100\"\n// //                   defaultValue=\"50\"\n// //                   style={{ width: '150px', marginTop: '1rem' }}\n// //                 />\n// //                 {this.renderTextInput(0, 0)}\n// //                 {renderDividerAndNewNodes(0, 0)}\n// //               </div>\n// //               <div className=\"d-flex flex-column align-items-center\">\n// //                 {this.renderNode(0, 1)}\n// //                 <input\n// //                   type=\"range\"\n// //                   min=\"0\"\n// //                   max=\"100\"\n// //                   defaultValue=\"50\"\n// //                   style={{ width: '150px', marginTop: '1rem' }}\n// //                 />\n// //                 {this.renderTextInput(0, 1)}\n// //                 {renderDividerAndNewNodes(0, 1)}\n// //               </div>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </div>\n// //     );\n// //   };\n// // }\n\n// // export default withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","StreamlitComponentBase","withStreamlitConnection","jsxDEV","_jsxDEV","customContainer","width","maxWidth","minHeight","MyComponent","constructor","arguments","state","prompt","tree","clicked","addToTree","level","index","text","newNodes","JSON","parse","stringify","setState","handleClick","prevState","generateNewNodes","renderNode","_this$state$tree$leve","_this$state$tree$leve2","_this$state$clicked$l","content","isClicked","className","style","marginRight","undefined","marginLeft","children","onClick","marginBottom","whiteSpace","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","alignItems","color","fontStyle","render","renderDividerAndNewNodes","_this$state$clicked$l2","_this$state$tree","_this$state$tree2","newNodesExist","Fragment","marginTop","flexWrap","flexDirection","backgroundColor","border","borderRadius","padding","margin","pointerEvents","_c","$RefreshReg$"],"sources":["/Users/tyna/code/select_critique_package/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\nimport {\n    Streamlit, StreamlitComponentBase, withStreamlitConnection\n} from 'streamlit-component-lib';\n\ninterface State {\n  prompt: string;\n  tree: (string | string[][])[][];\n  clicked: boolean[][];\n}\n\nconst customContainer = {\n  width: '100%',\n  maxWidth: '100%',\n  minHeight: '1000px',\n};\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state: State = {\n    prompt: 'Why is the sky blue?',\n    tree: [\n      [\n        ['Because God said so', []],\n        ['Because of Raleigh scattering', []],\n      ],\n    ],\n    clicked: [],\n  };\n\n  private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n    const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n    tree[level] = tree[level] || [];\n    tree[level][index] = [text, newNodes];\n    this.setState({ tree });\n  };\n\n  private handleClick = (level: number, index: number) => {\n    this.setState(prevState => {\n      const clicked = [...prevState.clicked] as boolean[][];\n      clicked[level] = clicked[level] || [];\n      if (clicked[level][index]) {\n        clicked[level][index] = false;\n        clicked[level][1 - index] = false;\n      } else {\n        clicked[level][index] = true;\n        clicked[level][1 - index] = false;\n      }\n      return { clicked };\n    });\n  };\n\n\n  private generateNewNodes = (level: number, index: number) => {\n    const newNodes = level === 0\n      ? index === 0\n        ? [\n          [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n          [\"God made the sky and gave it the color he deemed most beneficial for mankind\"],\n        ]\n        : [\n          [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n          [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"],\n        ]\n      : [\n        [`Level ${level + 1}, Index ${index * 2} response`],\n        [`Level ${level + 1}, Index ${index * 2 + 1} response`],\n      ];\n\n    this.addToTree(level + 1, index * 2, newNodes[0], []);\n    this.addToTree(level + 1, index * 2 + 1, newNodes[1], []);\n  };\n\n  private renderNode = (level: number, index: number) => {\n    const content = this.state.tree[level]?.[index]?.[0];\n    const isClicked = this.state.clicked[level]?.[index];\n\n    if (content) {\n      return (\n        <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n          <button\n            onClick={() => {\n              this.handleClick(level, index);\n            }}\n            className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n            style={{ marginBottom: '1.5rem', whiteSpace: 'normal', width: '12rem' }} // Add white-space and width styles\n          >\n            {content}\n          </button>\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n            {!isClicked && (\n              <span style={{ color: 'white', fontStyle: 'italic' }}>\n                This response was not selected\n              </span>\n            )}\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  public render = (): ReactNode => {\n    const renderDividerAndNewNodes = (level: number, index: number) => {\n      const isClicked = this.state.clicked[level]?.[index];\n      const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n      if (isClicked && newNodesExist) {\n        return (\n          <React.Fragment>\n            <hr />\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'flex-end',\n                marginTop: '2rem',\n                flexWrap: 'wrap', // Add flex-wrap style\n              }}\n            >\n              <div className=\"d-flex flex-column align-items-center\">\n                {this.renderNode(level + 1, index * 2)}\n              </div>\n              <div className=\"d-flex flex-column align-items-center\">\n                {this.renderNode(level + 1, index * 2 + 1)}\n              </div>\n            </div>\n          </React.Fragment>\n        );\n      }\n      return null;\n    };\n\n    return (\n      <div className=\"container\" style={customContainer}>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            marginTop: '2rem',\n          }}\n        >\n          <button\n            style={{\n              backgroundColor: '#007bff',\n              border: '1px solid #007bff',\n              borderRadius: '4px',\n              color: 'white',\n              padding: '0.5rem 1rem',\n              margin: '1rem',\n              pointerEvents: 'none',\n            }}\n          >\n            {this.state.prompt}\n          </button>\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'flex-end',\n              marginTop: '2rem',\n              flexWrap: 'wrap', // Add flex-wrap style\n            }}\n          >\n            <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem', flexWrap: 'wrap' }}>\n              <div className=\"d-flex flex-column align-items-center\">\n                {this.renderNode(0, 0)}\n                {renderDividerAndNewNodes(0, 0)}\n              </div>\n              <div className=\"d-flex flex-column align-items-center\">\n                {this.renderNode(0, 1)}\n                {renderDividerAndNewNodes(0, 1)}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default withStreamlitConnection(MyComponent);\n\n\n// import React, { ReactNode } from 'react';\n// import {\n//     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// } from 'streamlit-component-lib';\n\n// interface State {\n//   prompt: string;\n//   tree: (string | string[][])[][];\n//   clicked: boolean[][];\n// }\n\n// const customContainer = {\n//   width: '100%',\n//   maxWidth: '100%',\n//   minHeight: '1000px',\n// };\n\n// class MyComponent extends StreamlitComponentBase<State> {\n//   public state: State = {\n//     prompt: 'Why is the sky blue?',\n//     tree: [\n//       [\n//         ['Because God said so', []],\n//         ['Because of Raleigh scattering', []],\n//       ],\n//     ],\n//     clicked: [],\n//   };\n\n//   private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n//     const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n//     tree[level] = tree[level] || [];\n//     tree[level][index] = [text, newNodes];\n//     this.setState({ tree });\n//   };\n\n//   private handleClick = (level: number, index: number) => {\n//     const clicked = [...this.state.clicked] as boolean[][];\n//     clicked[level] = clicked[level] || [];\n//     clicked[level][index] = !clicked[level][index];\n//     clicked[level][1 - index] = false;\n//     this.setState({ clicked });\n//   };\n\n//   private renderNode = (level: number, index: number) => {\n//     const content = this.state.tree[level]?.[index]?.[0];\n//     const isClicked = this.state.clicked[level]?.[index];\n//     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n//     if (content) {\n//       return (\n//         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n//           <button\n//             onClick={() => {\n//               this.handleClick(level, index);\n//             }}\n//             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n//             style={{ marginBottom: '1.5rem', whiteSpace: 'normal', width: '12rem' }} // Add white-space and width styles\n//           >\n//             {content}\n//           </button>\n//           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n//             {!isClicked && otherButtonClicked && (\n//               <span style={{ color: 'white', fontStyle: 'italic' }}>\n//                 This response was not selected\n//               </span>\n//             )}\n//           </div>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   private renderTextInput = (level: number, index: number) => {\n//     const isClicked = this.state.clicked[level]?.[index];\n\n//     const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n//       if (event.key === 'Enter') {\n//         const commentary = event.currentTarget.value;\n//         this.handleClick(level, index);\n//         this.addToTree(level + 1, index * 2, commentary, []);\n//       }\n//     };\n\n//     const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n//       const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n\n//       const clicked = [...this.state.clicked] as boolean[][];\n//       clicked[level] = clicked[level] || [];\n//       clicked[level][index] = true;\n//       clicked[level][1 - index] = false;\n\n//       const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n\n//       let newNodes: string[][] = [];\n\n//       if (level === 0) {\n//         if (index === 0) {\n//           newNodes = [\n//             [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n//             [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n//           ];\n//         } else {\n//           newNodes = [\n//             [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n//             [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n//           ];\n//         }\n//       } else {\n//         newNodes = [\n//           [`Level ${level + 1}, Index ${index * 2} response`],\n//           [`Level ${level + 1}, Index ${index * 2 + 1} response`]\n//         ];\n//       }\n\n//       tree[level + 1] = tree[level + 1] || [];\n//       tree[level + 1][index * 2] = [newNodes[0], []];\n//       tree[level + 1][index * 2 + 1] = [newNodes[1], []];\n\n//       this.setState({ clicked, tree });\n//     };\n\n//     if (isClicked) {\n//       return (\n//         <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             placeholder=\"Enter your commentary\"\n//             id={`inputDefault_${level}_${index}`}\n//             onKeyPress={handleKeyPress}\n//           />\n//           <button\n//             className=\"btn btn-primary\"\n//             type=\"button\"\n//             id={`button-addon2_${level}_${index}`}\n//             onClick={handleButtonClick}\n//           >\n//             Critique\n//           </button>\n//         </div>\n//       );\n//     }\n//     return null;\n//   };\n\n//   public render = (): ReactNode => {\n//     const renderDividerAndNewNodes = (level: number, index: number) => {\n//       const isClicked = this.state.clicked[level]?.[index];\n//       const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n//       if (isClicked && newNodesExist) {\n//         return (\n//           <React.Fragment>\n//             <hr />\n//             <div\n//               style={{\n//                 display: 'flex',\n//                 justifyContent: 'center',\n//                 alignItems: 'flex-end',\n//                 marginTop: '2rem',\n//                 flexWrap: 'wrap', // Add flex-wrap style\n//               }}\n//             >\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(level + 1, index * 2)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(level + 1, index * 2)}\n//               </div>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(level + 1, index * 2 + 1)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(level + 1, index * 2 + 1)}\n//               </div>\n//             </div>\n//           </React.Fragment>\n//         );\n//       }\n//       return null;\n//     };\n\n//     return (\n//       <div className=\"container\" style={customContainer}>\n//         <div\n//           style={{\n//             display: 'flex',\n//             flexDirection: 'column',\n//             alignItems: 'center',\n//             marginTop: '2rem',\n//           }}\n//         >\n//           <button\n//             style={{\n//               backgroundColor: '#007bff',\n//               border: '1px solid #007bff',\n//               borderRadius: '4px',\n//               color: 'white',\n//               padding: '0.5rem 1rem',\n//               margin: '1rem',\n//               pointerEvents: 'none',\n//             }}\n//           >\n//             {this.state.prompt}\n//           </button>\n//           <div\n//             style={{\n//               display: 'flex',\n//               justifyContent: 'center',\n//               alignItems: 'flex-end',\n//               marginTop: '2rem',\n//               flexWrap: 'wrap', // Add flex-wrap style\n//             }}\n//           >\n//             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem', flexWrap: 'wrap' }}>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(0, 0)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(0, 0)}\n//                 {renderDividerAndNewNodes(0, 0)}\n//               </div>\n//               <div className=\"d-flex flex-column align-items-center\">\n//                 {this.renderNode(0, 1)}\n//                 <input\n//                   type=\"range\"\n//                   min=\"0\"\n//                   max=\"100\"\n//                   defaultValue=\"50\"\n//                   style={{ width: '150px', marginTop: '1rem' }}\n//                 />\n//                 {this.renderTextInput(0, 1)}\n//                 {renderDividerAndNewNodes(0, 1)}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   };\n// }\n\n// export default withStreamlitConnection(MyComponent);\n\n\n\n// // import React, { ReactNode } from 'react';\n// // import {\n// //     Streamlit, StreamlitComponentBase, withStreamlitConnection\n// // } from 'streamlit-component-lib';\n\n// // interface State {\n// //   prompt: string;\n// //   tree: (string | string[][])[][];\n// //   clicked: boolean[][];\n// // }\n\n// // const customContainer = {\n// //   width: '100%',\n// //   maxWidth: '100%',\n// //   minHeight: '1000px',\n// // };\n\n// // class MyComponent extends StreamlitComponentBase<State> {\n// //   public state: State = {\n// //     prompt: 'Why is the sky blue?',\n// //     tree: [\n// //       [\n// //         ['Because God said so', []],\n// //         ['Because of Raleigh scattering', []],\n// //       ],\n// //     ],\n// //     clicked: [],\n// //   };\n\n// //   private addToTree = (level: number, index: number, text: string, newNodes: string[][]) => {\n// //     const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// //     tree[level] = tree[level] || [];\n// //     tree[level][index] = [text, newNodes];\n// //     this.setState({ tree });\n// //   };\n\n// //   private handleClick = (level: number, index: number) => {\n// //     const clicked = [...this.state.clicked] as boolean[][];\n// //     clicked[level] = clicked[level] || [];\n// //     clicked[level][index] = true;\n// //     clicked[level][1 - index] = false;\n// //     this.setState({ clicked });\n// //   };\n\n// //   private renderNode = (level: number, index: number) => {\n// //     const content = this.state.tree[level]?.[index]?.[0];\n// //     const isClicked = this.state.clicked[level]?.[index];\n// //     const otherButtonClicked = this.state.clicked[level]?.[1 - index];\n\n// //     if (content) {\n// //       return (\n// //         <div className=\"d-flex flex-column align-items-center\" style={{ marginRight: index === 0 ? '2rem' : undefined, marginLeft: index === 1 ? '2rem' : undefined }}>\n// //           <button\n// //             onClick={() => {\n// //               this.handleClick(level, index);\n// //             }}\n// //             className={`btn btn-${isClicked ? 'secondary' : 'primary'} my-1`}\n// //             style={{ marginBottom: '1.5rem', whiteSpace: 'normal', width: '12rem' }} // Add white-space and width styles\n// //           >\n// //             {content}\n// //           </button>\n// //           <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '1.5rem' }}>\n// //             {!isClicked && otherButtonClicked && (\n// //               <span style={{ color: 'white', fontStyle: 'italic' }}>\n// //                 This response was not selected\n// //               </span>\n// //             )}\n// //           </div>\n// //         </div>\n// //       );\n// //     }\n// //     return null;\n// //   };\n\n// //   private renderTextInput = (level: number, index: number) => {\n// //     const isClicked = this.state.clicked[level]?.[index];\n\n// //     const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n// //       if (event.key === 'Enter') {\n// //         const commentary = event.currentTarget.value;\n// //         this.handleClick(level, index);\n// //         this.addToTree(level + 1, index * 2, commentary, []);\n// //       }\n// //     };\n\n// //     const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n// //       const commentary = (event.currentTarget.previousSibling as HTMLInputElement).value;\n\n// //       const clicked = [...this.state.clicked] as boolean[][];\n// //       clicked[level] = clicked[level] || [];\n// //       clicked[level][index] = true;\n// //       clicked[level][1 - index] = false;\n\n// //       const tree = JSON.parse(JSON.stringify(this.state.tree)) as (string | string[][])[][][];\n// //       const newNodes = level === 0\n// //         ? index === 0\n// //           ? [\n// //             [\"God wanted us to be happy, and he made the sky to give us light and food\"],\n// //             [\"God made the sky and gave it the color he deemed most beneficial for mankind\"]\n// //           ]\n// //           : [\n// //             [\"Rayleigh scattering is a scientific process that leads to the sky appearing blue\"],\n// //             [\"Rayleigh scattering is the primary scientific reasoning that on most days, the sky appears blue\"]\n// //           ]\n// //         : []; // For deeper levels, you can add more new nodes here\n\n// //       tree[level + 1] = tree[level + 1] || [];\n// //       tree[level + 1][index * 2] = [newNodes[0], []];\n// //       tree[level + 1][index * 2 + 1] = [newNodes[1], []];\n\n// //       this.setState({ clicked, tree });\n// //     };\n\n// //     if (isClicked) {\n// //       return (\n// //         <div className=\"input-group mb-3\" style={{ marginTop: '1rem', width: '300px' }}>\n// //           <input\n// //             type=\"text\"\n// //             className=\"form-control\"\n// //             placeholder=\"Enter your commentary\"\n// //             id={`inputDefault_${level}_${index}`}\n// //             onKeyPress={handleKeyPress}\n// //           />\n// //           <button\n// //             className=\"btn btn-primary\"\n// //             type=\"button\"\n// //             id={`button-addon2_${level}_${index}`}\n// //             onClick={handleButtonClick}\n// //           >\n// //             Critique\n// //           </button>\n// //         </div>\n// //       );\n// //     }\n// //     return null;\n// //   };\n\n// //   public render = (): ReactNode => {\n// //     const renderDividerAndNewNodes = (level: number, index: number) => {\n// //       const isClicked = this.state.clicked[level]?.[index];\n// //       const newNodesExist = this.state.tree[level + 1]?.[index * 2]?.[0];\n\n// //       if (isClicked && newNodesExist) {\n// //         return (\n// //           <React.Fragment>\n// //             <hr />\n// //             <div\n// //               style={{\n// //                 display: 'flex',\n// //                 justifyContent: 'center',\n// //                 alignItems: 'flex-end',\n// //                 marginTop: '2rem',\n// //                 flexWrap: 'wrap', // Add flex-wrap style\n// //               }}\n// //             >\n// //               <div className=\"d-flex flex-column align-items-center\">\n// //                 {this.renderNode(level + 1, index * 2)}\n// //                 <input\n// //                   type=\"range\"\n// //                   min=\"0\"\n// //                   max=\"100\"\n// //                   defaultValue=\"50\"\n// //                   style={{ width: '150px', marginTop: '1rem' }}\n// //                 />\n// //                 {this.renderTextInput(level + 1, index * 2)}\n// //               </div>\n// //               <div className=\"d-flex flex-column align-items-center\">\n// //                 {this.renderNode(level + 1, index * 2 + 1)}\n// //                 <input\n// //                   type=\"range\"\n// //                   min=\"0\"\n// //                   max=\"100\"\n// //                   defaultValue=\"50\"\n// //                   style={{ width: '150px', marginTop: '1rem' }}\n// //                 />\n// //                 {this.renderTextInput(level + 1, index * 2 + 1)}\n// //               </div>\n// //             </div>\n// //           </React.Fragment>\n// //         );\n// //       }\n// //       return null;\n// //     };\n\n// //     return (\n// //       <div className=\"container\" style={customContainer}>\n// //         <div\n// //           style={{\n// //             display: 'flex',\n// //             flexDirection: 'column',\n// //             alignItems: 'center',\n// //             marginTop: '2rem',\n// //           }}\n// //         >\n// //           <button\n// //             style={{\n// //               backgroundColor: '#007bff',\n// //               border: '1px solid #007bff',\n// //               borderRadius: '4px',\n// //               color: 'white',\n// //               padding: '0.5rem 1rem',\n// //               margin: '1rem',\n// //               pointerEvents: 'none',\n// //             }}\n// //           >\n// //             {this.state.prompt}\n// //           </button>\n// //           <div\n// //             style={{\n// //               display: 'flex',\n// //               justifyContent: 'center',\n// //               alignItems: 'flex-end',\n// //               marginTop: '2rem',\n// //               flexWrap: 'wrap', // Add flex-wrap style\n// //             }}\n// //           >\n// //             <div style={{ display: 'flex', marginLeft: '-12rem', marginRight: '-12rem', flexWrap: 'wrap' }}>\n// //               <div className=\"d-flex flex-column align-items-center\">\n// //                 {this.renderNode(0, 0)}\n// //                 <input\n// //                   type=\"range\"\n// //                   min=\"0\"\n// //                   max=\"100\"\n// //                   defaultValue=\"50\"\n// //                   style={{ width: '150px', marginTop: '1rem' }}\n// //                 />\n// //                 {this.renderTextInput(0, 0)}\n// //                 {renderDividerAndNewNodes(0, 0)}\n// //               </div>\n// //               <div className=\"d-flex flex-column align-items-center\">\n// //                 {this.renderNode(0, 1)}\n// //                 <input\n// //                   type=\"range\"\n// //                   min=\"0\"\n// //                   max=\"100\"\n// //                   defaultValue=\"50\"\n// //                   style={{ width: '150px', marginTop: '1rem' }}\n// //                 />\n// //                 {this.renderTextInput(0, 1)}\n// //                 {renderDividerAndNewNodes(0, 1)}\n// //               </div>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </div>\n// //     );\n// //   };\n// // }\n\n// // export default withStreamlitConnection(MyComponent);\n"],"mappings":"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},"metadata":{},"sourceType":"module"}