{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\n/*\n  Changes the tree data structure with minimal reference changes.\n */\n\nexport var mutateTree = function mutateTree(tree, itemId, mutation) {\n  var itemToChange = tree.items[itemId];\n  if (!itemToChange) {\n    // Item not found\n    return tree;\n  }\n  // Returning a clone of the tree structure and overwriting the field coming in mutation\n  return {\n    // rootId should not change\n    rootId: tree.rootId,\n    items: _objectSpread(_objectSpread({}, tree.items), {}, _defineProperty({}, itemId, _objectSpread(_objectSpread({}, itemToChange), mutation)))\n  };\n};","map":{"version":3,"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","mutateTree","tree","itemId","mutation","itemToChange","items","rootId"],"sources":["/Users/tyna/code/select_critique_package/my_component/frontend/node_modules/@atlaskit/tree/dist/esm/utils/mutateTree.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n/*\n  Changes the tree data structure with minimal reference changes.\n */\n\nexport var mutateTree = function mutateTree(tree, itemId, mutation) {\n  var itemToChange = tree.items[itemId];\n  if (!itemToChange) {\n    // Item not found\n    return tree;\n  }\n  // Returning a clone of the tree structure and overwriting the field coming in mutation\n  return {\n    // rootId should not change\n    rootId: tree.rootId,\n    items: _objectSpread(_objectSpread({}, tree.items), {}, _defineProperty({}, itemId, _objectSpread(_objectSpread({}, itemToChange), mutation)))\n  };\n};"],"mappings":"AAAA,OAAOA,eAAe,MAAM,uCAAuC;AACnE,SAASC,OAAOA,CAACC,MAAM,EAAEC,cAAc,EAAE;EAAE,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACF,MAAM,CAAC;EAAE,IAAIG,MAAM,CAACC,qBAAqB,EAAE;IAAE,IAAIC,OAAO,GAAGF,MAAM,CAACC,qBAAqB,CAACJ,MAAM,CAAC;IAAEC,cAAc,KAAKI,OAAO,GAAGA,OAAO,CAACC,MAAM,CAAC,UAAUC,GAAG,EAAE;MAAE,OAAOJ,MAAM,CAACK,wBAAwB,CAACR,MAAM,EAAEO,GAAG,CAAC,CAACE,UAAU;IAAE,CAAC,CAAC,CAAC,EAAEP,IAAI,CAACQ,IAAI,CAACC,KAAK,CAACT,IAAI,EAAEG,OAAO,CAAC;EAAE;EAAE,OAAOH,IAAI;AAAE;AACpV,SAASU,aAAaA,CAACC,MAAM,EAAE;EAAE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;IAAE,IAAIG,MAAM,GAAG,IAAI,IAAIF,SAAS,CAACD,CAAC,CAAC,GAAGC,SAAS,CAACD,CAAC,CAAC,GAAG,CAAC,CAAC;IAAEA,CAAC,GAAG,CAAC,GAAGf,OAAO,CAACI,MAAM,CAACc,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,UAAUC,GAAG,EAAE;MAAErB,eAAe,CAACe,MAAM,EAAEM,GAAG,EAAEF,MAAM,CAACE,GAAG,CAAC,CAAC;IAAE,CAAC,CAAC,GAAGhB,MAAM,CAACiB,yBAAyB,GAAGjB,MAAM,CAACkB,gBAAgB,CAACR,MAAM,EAAEV,MAAM,CAACiB,yBAAyB,CAACH,MAAM,CAAC,CAAC,GAAGlB,OAAO,CAACI,MAAM,CAACc,MAAM,CAAC,CAAC,CAACC,OAAO,CAAC,UAAUC,GAAG,EAAE;MAAEhB,MAAM,CAACmB,cAAc,CAACT,MAAM,EAAEM,GAAG,EAAEhB,MAAM,CAACK,wBAAwB,CAACS,MAAM,EAAEE,GAAG,CAAC,CAAC;IAAE,CAAC,CAAC;EAAE;EAAE,OAAON,MAAM;AAAE;AACzf;AACA;AACA;;AAEA,OAAO,IAAIU,UAAU,GAAG,SAASA,UAAUA,CAACC,IAAI,EAAEC,MAAM,EAAEC,QAAQ,EAAE;EAClE,IAAIC,YAAY,GAAGH,IAAI,CAACI,KAAK,CAACH,MAAM,CAAC;EACrC,IAAI,CAACE,YAAY,EAAE;IACjB;IACA,OAAOH,IAAI;EACb;EACA;EACA,OAAO;IACL;IACAK,MAAM,EAAEL,IAAI,CAACK,MAAM;IACnBD,KAAK,EAAEhB,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAEY,IAAI,CAACI,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE9B,eAAe,CAAC,CAAC,CAAC,EAAE2B,MAAM,EAAEb,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAEe,YAAY,CAAC,EAAED,QAAQ,CAAC,CAAC;EAC/I,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module"}